<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Check Processing :: CloudBank AI</title>
    <link>https://oracle.github.io/microservices-datadriven/cloudbank/check/index.html</link>
    <description>In this module, you will build microservices that use asynchronous messaging to communicate using Spring JMS and Oracle Transactional Event Queues. It introduces service discovery using Eureka Service Registry (part of Spring Cloud Netflix) and Spring Cloud OpenFeign.</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://oracle.github.io/microservices-datadriven/cloudbank/check/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://oracle.github.io/microservices-datadriven/cloudbank/check/intro/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/cloudbank/check/intro/index.html</guid>
      <description>This module walks you through the steps to build Spring Boot microservices that use Java Message Service (JMS) to send and receive asynchronous messages using Transactional Event Queues in the Oracle Database. This service will also use service discovery (OpenFeign) to look up and use the previously built Account service. In this lab, we will extend the Account microservice built in the previous lab, build a new “Check Processing” microservice and another “Test Runner” microservice to help with testing.</description>
    </item>
    <item>
      <title>Learn about the scenario</title>
      <link>https://oracle.github.io/microservices-datadriven/cloudbank/check/learn/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/cloudbank/check/learn/index.html</guid>
      <description>In the previous module, you created an Account service that includes endpoints to create and query accounts, lookup accounts for a given customer, and so on. In this module you will extend that service to add some new endpoints to allow recording bank transactions, in this case check deposits, in the account journal.&#xA;In this module, we will assume that customers can deposit a check at an Automated Teller Machine (ATM) by typing in the check amount, placing the check into a deposit envelope and then inserting that envelope into the ATM. When this occurs, the ATM will send a “deposit” message with details of the check deposit. You will record this as a “pending” deposit in the account journal.</description>
    </item>
    <item>
      <title>Add Journal to the Account service</title>
      <link>https://oracle.github.io/microservices-datadriven/cloudbank/check/update-account/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/cloudbank/check/update-account/index.html</guid>
      <description>Starting with the account service that you built in the previous lab, you will the JPA model and repository for the journal and some new endpoints.&#xA;Create the Journal model&#xA;Create a new Java file in src/main/java/com/example/accounts/model called Journal.java. In this class you can define the fields that make up the journal. Note that you created the Journal table in the previous lab. You will not use the lraId and lraState fields until a later lab. To simplify this lab, create an additional constructor that defaults those fields to suitable values. Your new class should look like this:</description>
    </item>
    <item>
      <title>Create Queues in the Database</title>
      <link>https://oracle.github.io/microservices-datadriven/cloudbank/check/create-queues/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/cloudbank/check/create-queues/index.html</guid>
      <description> Create the queues&#xA;Connect to the database as the ADMIN user and execute the following statements to give the account user the necessary permissions to use queues. Note: module 2, Task 9 provided details on how to connect to the database.&#xA;grant execute on dbms_aq to account; grant execute on dbms_aqadm to account; grant execute on dbms_aqin to account; commit;Now connect as the account user and create the queues by executing these statements (replace [TNS-ENTRY] with your environment information). You can get the TNS Entries by executing SHOW TNS in the sql shell:</description>
    </item>
    <item>
      <title>Create the Test Runner Microservice</title>
      <link>https://oracle.github.io/microservices-datadriven/cloudbank/check/create-testrunner/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/cloudbank/check/create-testrunner/index.html</guid>
      <description>Next, you will create the “Test Runner” microservice which you will use to simulate the ATM and Back Office. This service will send messages to the queues that you just created.&#xA;Create a new Java Project for the transfer service.&#xA;In the Explorer of VS Code open Java Project and click the plus sign to add a Java Project to your workspace.</description>
    </item>
    <item>
      <title>Create the Check Processing Microservice</title>
      <link>https://oracle.github.io/microservices-datadriven/cloudbank/check/check-processing/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/cloudbank/check/check-processing/index.html</guid>
      <description>Next, you will create the “Check Processing” microservice which you will receive messages from the ATM and Back Office and process them by calling the appropriate endpoints on the Account service. This service will also introduce the use of service discovery using OpenFeign clients.&#xA;Create a new Java Project for the checks service.&#xA;In the Explorer of VS Code open Java Project and click the plus sign to add a Java Project to your workspace.</description>
    </item>
    <item>
      <title>Test the end-to-end flow</title>
      <link>https://oracle.github.io/microservices-datadriven/cloudbank/check/test/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/cloudbank/check/test/index.html</guid>
      <description>Now you can test the full end-to-end flow for the Check Processing scenario.&#xA;Simulate a check deposit&#xA;The Test Runner service is not exposed outside your Kubernetes cluster, so you must create a port-forwarding tunnel to access it. Create a tunnel using this command:&#xA;$ kubectl -n application port-forward svc/testrunner 8084:8080Simulate a check being deposited at the ATM using the Test Runner service:&#xA;$ curl -i -X POST -H &#39;Content-Type: application/json&#39; -d &#39;{&#34;accountId&#34;: 2, &#34;amount&#34;: 256}&#39; http://localhost:8084/api/v1/testrunner/deposit HTTP/1.1 201 Date: Wed, 31 May 2023 15:11:55 GMT Content-Type: application/json Transfer-Encoding: chunked Connection: keep-alive {&#34;accountId&#34;:2,&#34;amount&#34;:256} Check the logs for the Check Processing service</description>
    </item>
  </channel>
</rss>