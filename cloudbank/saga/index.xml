<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Manage Sagas :: CloudBank AI</title>
    <link>https://oracle.github.io/microservices-datadriven/cloudbank/saga/index.html</link>
    <description>This module introduces the Saga pattern, a very important pattern that helps us manage data consistency across microservices. We will explore the Long Running Action specification, one implementation of the Saga pattern, and then build a Transfer microservice that will manage funds transfers using a saga.</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://oracle.github.io/microservices-datadriven/cloudbank/saga/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://oracle.github.io/microservices-datadriven/cloudbank/saga/intro/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/cloudbank/saga/intro/index.html</guid>
      <description>This module walks you through implementing the Saga pattern using a Long Running Action to manage transactions across microservices.&#xA;Watch this short introduction video to get an idea of what you will be building: Estimated Time: 30 minutes&#xA;Quick walk through on how to manage saga transactions across microservices.&#xA;Objectives In this module, you will:&#xA;Learn about the Saga pattern Learn about the Long Running Action specification Add new endpoints to the Account service for deposits and withdrawals that act as LRA participants Create a Transfer service that will initiate the LRA Prerequisites This module assumes you have:</description>
    </item>
    <item>
      <title>Learn about the Saga pattern</title>
      <link>https://oracle.github.io/microservices-datadriven/cloudbank/saga/learn/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/cloudbank/saga/learn/index.html</guid>
      <description>When you adopt microservices architecture and start to apply the patterns, you rapidly run into a situation where you have a business transaction that spans across multiple services.&#xA;Database per service The Database per service pattern is a generally accepted best practice which dictates that each service must have its own “database” and that the only way other services can access its data is through its public API. This helps to create loose coupling between services, which in turn makes it easier to evolve them independently and prevents the creation of a web of dependencies that make application changes increasingly difficult over time.</description>
    </item>
    <item>
      <title>Learn about Long Running Actions</title>
      <link>https://oracle.github.io/microservices-datadriven/cloudbank/saga/learn-lra/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/cloudbank/saga/learn-lra/index.html</guid>
      <description>There are different models that can be used to coordinate transactions across services. Three of the most common are XA (Extended Architecture) which focuses on strong consistency, LRA (Long Running Action) which provides eventual consistency, and TCC (Try-Confirm/Cancel) which uses a reservation model. Oracle Backend for Spring Boot and Microservices includes Oracle Transaction Manager for Microservices which supports all three of these options.&#xA;In this module, you will explore the Long Running Action model.</description>
    </item>
    <item>
      <title>Prepare the Account service</title>
      <link>https://oracle.github.io/microservices-datadriven/cloudbank/saga/prepare/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/cloudbank/saga/prepare/index.html</guid>
      <description>You will update the Account service that you built in the previous module to add some new endpoints to perform deposits and withdrawals. These new endpoints will be LRA participants.&#xA;Add new dependencies to the Maven POM&#xA;Open the pom.xml in your accounts project and add these new dependency to the list. It will add support for the LRA client libraries.&#xA;&lt;dependency&gt; &lt;groupId&gt;com.oracle.microtx.lra&lt;/groupId&gt; &lt;artifactId&gt;microtx-lra-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;23.4.2&lt;/version&gt; &lt;/dependency&gt; Update the Spring Boot application configuration file</description>
    </item>
    <item>
      <title>Create the Deposit service</title>
      <link>https://oracle.github.io/microservices-datadriven/cloudbank/saga/deposit/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/cloudbank/saga/deposit/index.html</guid>
      <description>The Deposit service will process deposits into bank accounts. In this task, you will create the basic structure for this service and learn about the endpoints required for an LRA participant, what HTTP Methods they process, the annotations used to define them and so on. You will implement the actual business logic in a later task.&#xA;Create the Deposit service and scaffold methods&#xA;Create a new directory in src/main/java/com/example/accounts called services and in that directory create a new Java file called DepositService.</description>
    </item>
    <item>
      <title>Create a Data Access Object</title>
      <link>https://oracle.github.io/microservices-datadriven/cloudbank/saga/dao/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/cloudbank/saga/dao/index.html</guid>
      <description>The Data Access Object pattern is considered a best practice, and it allows separation of business logic from the persistence layer. In this task, you will create an Account Data Access Object (DAO) that hides the complexity of the persistence layer logic from the business layer services. Additionally, it establishes methods that can be reused by each business layer service that needs to operate on accounts - in this module there will be two such services - deposit and withdraw.</description>
    </item>
    <item>
      <title>Implement business logic</title>
      <link>https://oracle.github.io/microservices-datadriven/cloudbank/saga/business-logic/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/cloudbank/saga/business-logic/index.html</guid>
      <description>In this secion, you will implement the deposit service’s business logic.&#xA;The deposit service will be responsible for depositing funds into accounts. It will be an LRA participant, and so it will need to implement the LRA lifecycle actions like complete, compensate, and so on. A significant amount of the logic will be shared with the withdrawal service, so you will also create a separate class for that shared logic, following the Data Access Object pattern, to keep the business layer separate from the persistence layer.</description>
    </item>
    <item>
      <title>Create the Withdrawal service</title>
      <link>https://oracle.github.io/microservices-datadriven/cloudbank/saga/withdraw-service/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/cloudbank/saga/withdraw-service/index.html</guid>
      <description>Next, you need to implement the withdraw service, which will be the second participant in the transfer LRA.&#xA;Implement the withdraw service&#xA;Create a new Java file called WithdrawService.java in src/main/java/com/example/accounts/services. This service is very similar to the deposit service, and no new concepts are introduced here. Here is the code for this service:&#xA;package com.example.accounts.services; import com.example.accounts.model.Account; import com.example.accounts.model.Journal; import com.oracle.microtx.springboot.lra.annotation.AfterLRA; import com.oracle.microtx.springboot.lra.annotation.Compensate; import com.oracle.microtx.springboot.lra.annotation.Complete; import com.oracle.microtx.springboot.lra.annotation.LRA; import com.oracle.microtx.springboot.lra.annotation.ParticipantStatus; import com.</description>
    </item>
    <item>
      <title>Create the Transfer service</title>
      <link>https://oracle.github.io/microservices-datadriven/cloudbank/saga/transfer-service/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/cloudbank/saga/transfer-service/index.html</guid>
      <description>Now, you will create another new Spring Boot microservice application and implement the Transfer Service. This service will initiate the LRA and act as the logical coordinator - it will call the deposit and withdraw services you just implemented to effect the transfer to process the Cloud Cash Payment.&#xA;Create a new Java Project for the transfer service.&#xA;In the Explorer of VS Code open Java Project and click the plus sign to add a Java Project to your workspace.</description>
    </item>
    <item>
      <title>Deploy services</title>
      <link>https://oracle.github.io/microservices-datadriven/cloudbank/saga/deploy/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/cloudbank/saga/deploy/index.html</guid>
      <description>The services are now completed, and you are ready to deploy them to the Oracle Backend for Spring Boot and Microservices.&#xA;Note: You already created the Kubernetes secrets necessary for the account service to access the Oracle Autonomous Database in a previous module, and the transfer service does not need access to the database. You also created the journal table that is needed by the update account application in the previous module.</description>
    </item>
    <item>
      <title>Run LRA test cases</title>
      <link>https://oracle.github.io/microservices-datadriven/cloudbank/saga/test/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/cloudbank/saga/test/index.html</guid>
      <description>Now you can test your LRA to verify it performs correctly under various circumstances.&#xA;Start a tunnel to access the transfer service&#xA;Since the transfer service is not exposed outside the Kubernetes cluster, you will need to start a kubectl port forwarding tunnel to access its endpoints.&#xA;Note: If you prefer, you can create a route in the APISIX API Gateway to expose the service. The service will normally only be invoked from within the cluster, so you did not create a route for it.</description>
    </item>
  </channel>
</rss>