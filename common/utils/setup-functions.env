#!/bin/bash
# Copyright (c) 2021 Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.


if ! (return 0 2>/dev/null); then
  echo "ERROR: Usage 'source setup_functions.env'"
  return 1
fi

# Request compartment details and create or validate
# Parameters:
# $1: Run Type: LL or OT (required)
# $2: The tenancy OCID (required)
# $3: Home region (required)
# $4: The description text of the compartment if it is created (required)
#
# Input Environment variables:
#   TEST_COMPARTMENT: Compartment name or OCID to use (otional)
#   TEST_PARENT_COMPARTMENT_OCID: Parent compartment OCID (optional)
#
# Output Environment variables: 
#   COMPARTMENT_OCID: Returned compartment OCID
#
function compartment-dialog() {
  set -u
  COMPARTMENT_OCID=''  # Updated in calling shell, not local
  local COMP
  local PARENT_COMP
  local RUN_TYPE="$1"
  local TENANCY_OCID="$2"
  local HOME_REGION="$3"
  local COMP_DESC="$4"

  while test -z "$COMPARTMENT_OCID"; do
    if test "$RUN_TYPE" == 'LL'; then
      # The compartment is already created.  Ask for the OCID
      read -p "Please enter your OCI compartment's OCID: " COMP
      if ! oci iam compartment get --compartment-id "$COMP" 2>&1 >~/comp_ocid_err; then
        echo "ERROR: The compartment $COMP does not exist.  Please retry."
        cat ~/comp_ocid_err
        rm ~/comp_ocid_err
        continue
      else
        rm ~/comp_ocid_err
        COMPARTMENT_OCID="$COMP"
        break
      fi
    fi

    if ! test -z "${TEST_COMPARTMENT-}"; then
      COMP="$TEST_COMPARTMENT"
    else
      echo 'Please enter the OCI compartment where you would like the workshop resources to be created.'
      echo 'For an existing compartment, enter the OCID. For a new compartment, enter the name.'
      read -p "Please specify the compartment: " COMP
    fi

    if test -z "$COMP"; then
      echo "ERROR: No compartment specified"
      continue
    fi

    if [[ "$COMP" =~ ocid1.* ]]; then
      # An existing compartment
      if ! oci iam compartment get --compartment-id "$COMP" 2>&1 >~/comp_ocid_err; then
        echo "ERROR: The compartment $COMP does not exist.  Please retry."
        cat ~/comp_ocid_err
        rm ~/comp_ocid_err
        if ! test -z "${TEST_COMPARTMENT-}"; then
          return 1
        fi
        continue
      else
        rm ~/comp_ocid_err
        COMPARTMENT_OCID="$COMP"
        break
      fi
    fi

    # New compartment
    if ! test -z "${TEST_PARENT_COMPARTMENT_OCID-}"; then
      PARENT_COMP="$TEST_PARENT_COMPARTMENT_OCID"
    else
      echo 'Please enter the OCID of the compartment in which you would like the new compartment to be created.'
      read -p "Please specify the parent compartment OCID (hit return for the root compartment): " PARENT_COMP
      if [[ ! "$PARENT_COMP" =~ ocid1.* ]]; then
        PARENT_COMP="$TENANCY_OCID"
      fi
    fi

    COMPARTMENT_OCID=`oci iam compartment create --region "$HOME_REGION" --compartment-id "$PARENT_COMP" --name "$COMP" --description "$COMP_DESC" --query 'data.id' --raw-output`
  done

  # Wait for the compartment to become active
  while ! test `oci iam compartment get --compartment-id "$COMPARTMENT_OCID" --query 'data."lifecycle-state"' --raw-output 2>/dev/null`"" == 'ACTIVE'; do
    echo "Waiting for the compartment to become ACTIVE"
    sleep 5
  done
  return 0
}
export -f compartment-dialog


# Setup the state store
# Parameters:
# $1: Full hierarchical name of the state store folder (required)
# $2: Log file (required)
#
# Output: 
#   Exported state functions
#
function state-store-setup () {
  set -u
  local STATE_STORE_FOLDER="$1"
  local STATE_STORE_LOG="$2"
  local STATE_STORE_STATUS

  if ! STATE_STORE_STATUS=$(provisioning-get-status $STATE_STORE_FOLDER); then
    echo "ERROR: Unable to get workshop state store status"
    return 1
  fi

  case "$STATE_STORE_STATUS" in

    applied | byo)
      # Nothing to do
      ;;

    applying)
      # Setup already running so exit
      echo "ERROR: Setup is already running and so cannot run setup"
      return 1
      ;;

    destroying-failed | destroying | destroyed)
      # Cannot setup during destroy phase
      echo "ERROR: Destroy is running and so cannot run setup"
      return 1
      ;;

    applying-failed | new)
      # Start or restart the state_store setup
      cd $STATE_STORE_FOLDER
      echo "STATE_LOG='$STATE_STORE_LOG'" > $STATE_STORE_FOLDER/input.env
      if ! provisioning-apply $MSDD_INFRA_CODE/state_store; then
        echo "ERROR: Failed to create state_store in $STATE_STORE_FOLDER"
        return 1
      fi
      ;;

  esac
  source $STATE_STORE_FOLDER/output.env
  return 0
}
export -f state-store-setup


# Setup folder based vault
# Parameters:
# $1: Full hierarchical name of the vault state folder (required)
# Output: 
#   Exported vault functions
#
function folder-vault-setup () {
  set -u
  local VAULT_STATE_FOLDER="$1"
  local VAULT_STATUS

  if ! VAULT_STATUS=$(provisioning-get-status "$VAULT_STATE_FOLDER"); then
    echo "ERROR: Unable to get workshop vault status"
    return 1
  fi

  case "$VAULT_STATUS" in

    applied | byo)
      # No setup to do
      ;;

    applying)
      # Setup already running so exit
      echo "ERROR: Setup is already running and so cannot run setup"
      return 1
      ;;

    destroying-failed | destroying | destroyed)
      # Cannot setup during destroy phase
      echo "ERROR: Destroy is running and so cannot run setup"
      return 1
      ;;

    applying-failed | new)
      # Start or restart the vault setup
      cd $VAULT_STATE_FOLDER
      if ! provisioning-apply $MSDD_INFRA_CODE/vault/folder; then
        echo "ERROR: Failed to create vault in $VAULT_STATE_FOLDER"
        return 1
      fi
      ;;

  esac
  source $VAULT_STATE_FOLDER/output.env
}
export -f folder-vault-setup