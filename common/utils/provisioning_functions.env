#!/bin/bash
# Copyright (c) 2021 Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

# All functions assume the current directory is to contain the state of the thing to be provisioned or contains
# the state of the thing to be worked on.

if ! (return 0 2>/dev/null); then
  echo "ERROR: Usage 'source provisioning_functions.env'"
  return 1
fi

# setup()
#   Provision something.  Current directory is to be used to store the state.
#   $1: The code home of the thing to be provisioned
function setup() {
  local MY_STATE=$PWD

  # Get the code folder
  local MY_CODE="$1"
  local MY_CODE_FILE=$MY_STATE/MY_CODE
  if test -f $MY_CODE_FILE; then
    local LAST_MY_CODE=$(cat $MY_STATE/MY_CODE)
    if test "$MY_CODE" != "$LAST_MY_CODE"; then
      echo "ERROR: Code folder $LAST_MY_CODE cannot be changed to $MY_CODE"
      return 1
    fi
    MY_CODE=$LAST_MY_CODE
  else
    echo "$MY_CODE" > $MY_CODE_FILE
  fi
  
  if ! test -d $MY_CODE; then
    echo "ERROR: $MY_CODE does not exist"
    return 1
  fi

  if test -f $MY_CODE/setup.env; then
    source $MY_CODE/setup.env
  elif test -f $MY_CODE/setup.sh; then
    $MY_CODE/setup.env
  else
    echo "ERROR: No setup script in this code folder"
    return 1
  fi
}

# destroy()
#   Current directory contains the state of the thing to be destroyed.  
#   The MY_CODE file contains the location of the code (from previously run setup).
function destroy() {
  local MY_STATE=$PWD
  local MY_CODE_FILE=$MY_STATE/MY_CODE
  if test -f $MY_CODE_FILE; then
    MY_CODE=$(cat $MY_STATE/MY_CODE)
  else
    echo "ERROR: MY_CODE file is missing"
    return 1
  fi

  if test -f $MY_CODE/destroy.env; then
    source $MY_CODE/destroy.env
  elif test -f $MY_CODE/destroy.sh; then
    $MY_CODE/destroy.env
  else
    echo "ERROR: No destroy script in this code folder"
    return 1
  fi
}

# pre-setup()
#   Retrieve and validate setup params and state of a setup script

function pre-init() {
  # Locate my state
  local MY_STATE=$PWD
  # Locate my code
  local MY_CODE="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

  # Check output file
  local OUTPUT_FILE=$MY_STATE/output.env
  if test -f $OUTPUT_FILE; then
    # Already completed
    echo "$MY_STATE already completed"
    return 1
  fi

  # Check requirements file (required even if empty)
  local REQ_FILE=$MY_CODE/requirements.env
  if ! test -f $REQ_FILE; then
    echo "ERROR: $REQ_FILE is missing"
    return 1
  fi
  source $REQ_FILE
  
  # Check input file (if required)
  if ! test -z $INPUT_FILE; then
    if test -f $INPUT_FILE; then
      source $INPUT_FILE
    else
      echo "$INPUT_FILE is missing"
      return 1
    fi
  fi

  for p in $REQ_PARAMS; do
    if test -z "${!p}"; then
      echo "ERROR: Parameter $p is required and not set"
      return 1
    fi
  done

}