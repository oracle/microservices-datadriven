#!/bin/bash
# Copyright (c) 2021 Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

# All functions assume the current directory is to contain the state of the thing to be provisioned or contains
# the state of the thing to be worked on.

if ! (return 0 2>/dev/null); then
  echo "ERROR: Usage 'source provisioning_functions.env'"
  return 1
fi


# provisioning-get-status()
#   State folder supplied by $1 or if $1 is not supplied then by the current directory
#   Get the status of provisioning:
#     byo: Pre-provisioned
#     new: Either new or destroyed
#     applying: Apply is running
#     applying-failed: Apply was running and failed
#     applied: Apply has completed
#     destroying: Destroy is running
#     destroying-failed: Destroy was running and failed
#     destroyed: Destroy completed
#
function provisioning-get-status() {
  local MY_STATE
  if ! test -z "${1-}"; then
    if test -d "$1"; then
      MY_STATE="$1"
    else
      # Invalid parameter
      return 1
    fi
  else
    MY_STATE=$PWD
  fi
  local OUTPUT_FILE=$MY_STATE/output.env
  local STATE_FILE=$MY_STATE/state.env
  local PID_FILE=$MY_STATE/PID
  local OP_FILE=$MY_STATE/OP

  if test -f $MY_STATE/byo; then
    echo 'byo'
    return 0
  fi

  if test -f $OUTPUT_FILE; then
    echo 'applied'
    return 0
  fi

  if ! test -f $OP_FILE; then
     echo 'new'
    return 0
  fi

  if ! test -f $STATE_FILE; then
     echo 'destroyed'
    return 0
  fi

  local OP=$(<$OP_FILE)

  if test -f $PID_FILE && ps -fp $(<$PID_FILE) >/dev/null 2>&1; then
    # Process is running
    echo "$OP"
  else
    echo "$OP-failed"
    rm -f $PID_FILE
  fi
}


# provisioning-set-op()
#   Set whether apply or destroy operation:
#     applying:   Apply
#     destroying: Destroy
#
function provisioning-set-op() {
  local OP_FILE=$MY_STATE/OP
  echo "$1">$OP_FILE
}


# provisioning-apply()
#   Provision something.  Current directory is to be used to store the state.
#   $1: The code home of the thing to be provisioned (required)
#
#   Checks and creates the MY_CODE file
#   Validates the required input parameters, constructs the state file, and removes the input file, and executes apply.sh (except for BYO)
#   Validates the output file (including BYO)
#
function provisioning-apply() {
  local MY_STATE=$PWD
  local OUTPUT_FILE=$MY_STATE/output.env
  local STATE_FILE=$MY_STATE/state.env
  local INPUT_FILE=$MY_STATE/input.env
  local PID_FILE=$MY_STATE/PID
  local MY_CODE="${1-}"
  local MY_CODE_FILE=$MY_STATE/MY_CODE
  local REQ_UTILS REQ_INPUT_PARAMS REQ_OUTPUT_PARAMS
  local REQ_FILE=$MY_CODE/requirements.env
 
  if ! local STATUS=$(provisioning-get-status); then
    echo "ERROR: Invalid status"
    return 1
  fi
  
  case "$STATUS" in

    applying | applied | byo)
      # Nothing to do
      return 0
      ;;

    destroying | destroying-failed | destroyed)
      # Cannot apply during destroy phase
      echo "ERROR: Trying to apply during destroy phase.  Not supported."
      return 1
      ;;

    new)
      # Starting apply so located and validate code, utils and inputs
      # Locate and check the code home
      if ! test -d $MY_CODE; then
        echo "ERROR: Code folder $MY_CODE does not exist"
        return 1
      fi
      echo "$MY_CODE" > $MY_CODE_FILE

      echo "Beginning $MY_CODE/apply.sh on $MY_STATE"

      # Check the apply script
      if ! test -f $MY_CODE/apply.sh; then
        echo "ERROR: No apply.sh script in code folder $MY_CODE"
        return 1
      fi

      # Check the requirements file
      if ! test -f $REQ_FILE; then
        echo "ERROR: Invalid code folder $MY_CODE.  $REQ_FILE is missing."
        return 1
      fi
      source $REQ_FILE

      # Validate required utils TODO
      
      # Populate the state file with input. 
      provisioning-set-op applying

      if test -z "$REQ_INPUT_PARAMS"; then
        # No required parameters, no input required, empty init state file
        echo "" > $STATE_FILE
      elif ! test -f $INPUT_FILE; then
        # Input file is missing
        echo "$INPUT_FILE is missing"
        return 1
      else
        # Populate init state
        local TEMP_STATE_FILE=$MY_STATE/temp_state.env
        rm -f $TEMP_STATE_FILE
        # Process input file in a subshell with empty env
        if env -i /bin/bash --norc --noprofile; then
          # If successful then make it permanent
            mv $TEMP_STATE_FILE $STATE_FILE
          else
            return 1
          fi  <<!
source $INPUT_FILE
REQ_INPUT_PARAMS='$REQ_INPUT_PARAMS'
for p in \$REQ_INPUT_PARAMS; do
  if test "\${!p-UNDEFINED}" == 'UNDEFINED'; then
    echo "ERROR: Input parameter \$p is required and not defined"
    exit 1
  fi
  echo "\$p='\${!p}'" >>$TEMP_STATE_FILE
done
!
        # Done with the input file so remove it
        rm -f $INPUT_FILE
      fi
   
      ;;

    applying-failed)
      # Restarting apply
      echo "Restarting $MY_CODE/apply.sh on $MY_STATE"
      MY_CODE=$(<$MY_CODE_FILE)
      source $REQ_FILE
      ;;

  esac
  
  # Execute the apply.sh.  Skip if the output file exists (already done) or BYO.
  cd $MY_STATE
  $MY_CODE/apply.sh
  cd $MY_STATE

  # Check for success
  if ! test -f $OUTPUT_FILE; then
    # We are done but no output file, so looks like we failed
    echo "ERROR: provisioning-apply failed for code $MY_CODE in state folder $MY_STATE.  No output file. "
    return 1
  fi

  # Validate the output
  if ! env -i /bin/bash --norc --noprofile; then
    # Missing output parameter
    return 1
  fi <<!
source $OUTPUT_FILE
REQ_OUTPUT_PARAMS='$REQ_OUTPUT_PARAMS'
for p in \$REQ_OUTPUT_PARAMS; do
  if test "\${!p-UNDEFINED}" == 'UNDEFINED'; then
    echo "ERROR: Output parameter \$p is required and not defined"
    exit 1
  fi
done
!
 
  echo "Completed $MY_CODE/apply.sh on $MY_STATE"
}


# provisioning-destroy()
#   Destroy something previously provisioned.
#   Current directory contains the state of the thing to be destroyed.  
#   The MY_CODE file within the state folder contains the location of the code (from previously run apply).
#
#   If the byo file exists then do nothing
#   Checks the MY_CODE file
#   Executes destroy.sh
#

function provisioning-destroy() {
  local MY_STATE=$PWD
  local STATE_FILE=$MY_STATE/state.env
  local OUTPUT_FILE=$MY_STATE/output.env
  local PID_FILE=$MY_STATE/PID
  local MY_CODE_FILE=$MY_STATE/MY_CODE

  if ! local STATUS=$(provisioning-get-status); then
    echo "ERROR: Invalid state"
    return 1
  fi
  
  case "$STATUS" in

    destroying | new | destroyed | byo)
      # Nothing to do
      return 0
      ;;

    applying)
      # Cannot destroy when apply is running
      echo "ERROR: Cannot destroy $MY_STATE when apply is running"
      return 1
      ;;

    applied | applying-failed | destroying-failed )
      # Start destroy
      ;;

  esac

  local MY_CODE=$(<$MY_CODE_FILE)

  if ! test -f $MY_CODE/destroy.sh; then
    echo "ERROR: No destroy script in code folder $MY_CODE"
    return 1
  fi
  
  # Remove the output file
  rm -f $OUTPUT_FILE
  provisioning-set-op destroying
  
  # Execute destroy.sh
  cd $MY_STATE
  echo "Beginning $MY_CODE/destroy.sh on $MY_STATE"
  $MY_CODE/destroy.sh
  cd $MY_STATE

  # Check if we were successful
  if test -f $STATE_FILE; then
    # We ran destroy and the state file still exists, so looks like we failed
    echo "ERROR: Provisioning destroy failed for code $MY_CODE in state folder $MY_STATE. State file still exists."
    return 1
  fi

  echo "Completed $MY_CODE/destroy.sh on $MY_STATE"
}


# provisioning-helper-pre-apply()
#
# First thing to run in every executed apply function
#   Sets the MY_STATE, STATE_FILE and OUTPUT_FILE variables
#   Sets the MY_CODE variable
#   Sets PID file so only one instance can be running
#   Sources the state file
#
function provisioning-helper-pre-apply() {
  MY_STATE=$PWD
  OUTPUT_FILE=$MY_STATE/output.env
  STATE_FILE=$MY_STATE/state.env
  PID_FILE=$MY_STATE/PID
  MY_CODE_FILE=$MY_STATE/MY_CODE

  # Locate my code
  MY_CODE=$(<$MY_CODE_FILE)

  # Prevent parallel execution
  trap "rm -f -- '$PID_FILE'" EXIT
  echo $$ > "$PID_FILE"

  source $STATE_FILE
}


# provisioning-helper-pre-destroy()
#
# First thing to run in every executed destroy function
#   Sets the MY_STATE variable
#   Finds and sets the MY_CODE variable
#   Sets PID file so only one instance can be running
#   Sources the state file
#
function provisioning-helper-pre-destroy() {
  set -e
  
  MY_STATE=$PWD
  STATE_FILE=$MY_STATE/state.env
  PID_FILE=$MY_STATE/PID
  MY_CODE_FILE=$MY_STATE/MY_CODE

  # Locate my code
  MY_CODE=$(<$MY_CODE_FILE)

  # Prevent parallel execution
  trap "rm -f -- '$PID_FILE'" EXIT
  echo $$ > "$PID_FILE"

  source $STATE_FILE
}


export -f provisioning-get-status
export -f provisioning-set-op
export -f provisioning-apply
export -f provisioning-destroy
export -f provisioning-helper-pre-apply
export -f provisioning-helper-pre-destroy