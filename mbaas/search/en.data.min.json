[{"id":0,"href":"/microservices-datadriven/mbaas/","title":"","parent":"","content":" Oracle Backend for Parse Platform - Developer Preview Oracle Backend for Parse Platform deploys mobile applications using Parse mobile APIs, and provisions an Oracle Backend as a Service (OBaaS) with Oracle Database and other infrastructure components that operate on multiple clouds. This service vastly simplifies the task of building, testing, and operating a mobile application development platform for reliable, secure, and scalable enterprise applications. This version includes an Oracle Database storage adapter for Parse (Parse already has MongoDB and Postgres adapters), and a proof-of-concept for Google Firebase APIs emulated using Parse mobile APIs.\nThe Oracle Backend for Parse Platform is based on the Parse Platform.\nIn addition to an Oracle Autonomous Database Serverless instance, the following software components are deployed in an OCI Container Engine for Kubernetes (OKE) for customer usage with Oracle Backend for Parse Platform:\nParse Server, plus the Oracle Database storage adapter for Parse Parse Dashboard Interested in Spring Boot or Microservices, too? Check out Oracle Backend for Spring Boot and Microservices Developer Preview This release is a Developer Preview. This means that not all functionality is complete. In this release, approximately 80-90% of the Parse mobile APIs are working. For interested developers, approximately 2270 out of 2700 tests run successfully. This release is based on Parse Server version 5.2.7 and Parse Dashboard 5.0.0. Oracle is releasing this as a Developer Preview to allow interested developers to try it and provide feedback.\nThe following application program interface (API) families are mostly working:\nDatabase, including query Identity/Security File Caching GeoPoints Config Data The following API families are not expected to work in this release:\nCloud functions GraphQL Live query Push notifications The exposed Parse mobile API is exactly the same as an upstream Parse Server version 5.2.7. There are no changes to the public-facing API. All existing Parse Software Development Kits (SDKs) should work as-is with this Developer Preview for those APIs that are working.\nAbout the Oracle Database Storage Adapter for Parse This Developer Preview includes an Oracle Database storage adapter for Parse based on Parse Server version 5.2.7. The storage adapter is implemented using the Node.js node-oracledb library. Data is stored in the database in JavaScript Object Notation (JSON) collections, using the Simple Oracle Document Access (SODA) API.\n","description":"Oracle Backend for Parse Platform - Developer Preview Oracle Backend for Parse Platform deploys mobile applications using Parse mobile APIs, and provisions an Oracle Backend as a Service (OBaaS) with Oracle Database and other infrastructure components that operate on multiple clouds. This service vastly simplifies the task of building, testing, and operating a mobile application development platform for reliable, secure, and scalable enterprise applications. This version includes an Oracle Database storage adapter for Parse (Parse already has MongoDB and Postgres adapters), and a proof-of-concept for Google Firebase APIs emulated using Parse mobile APIs."},{"id":1,"href":"/microservices-datadriven/mbaas/dashboard/","title":"Dashboard","parent":"","content":" Dashboard The Oracle Backend for Parse Platform installation includes a dashboard endpoint. The Parse Dashboard is a web user interface for managing your Parse applications.\nThe dashboard URL was provided to you at the end of set up, and you chose the administrative user name and password during installation.\nTo log in to the dashboard, go to the provided URL and log in with the Admin credentials. For example:\nAfter you log in, you see the Landing Page that lists your applications. Most likely, you will have just one application that you created during configuration of the Oracle Backend for Parse Platform. You can click on the application to see details and to manage it. For example:\nNote the collections listed in the left panel. Click GameScore to see the data that you created earlier. For example:\nNext, go to the Database Access page to learn about database access.\n","description":"Dashboard The Oracle Backend for Parse Platform installation includes a dashboard endpoint. The Parse Dashboard is a web user interface for managing your Parse applications.\nThe dashboard URL was provided to you at the end of set up, and you chose the administrative user name and password during installation.\nTo log in to the dashboard, go to the provided URL and log in with the Admin credentials. For example:"},{"id":2,"href":"/microservices-datadriven/mbaas/database/","title":"Database Access","parent":"","content":" Database Access The Oracle Backend for Parse Platform includes an Oracle Database storage adapter for Parse which allows the Parse Server to use the Oracle database. An instance of Oracle Autonomous Database Serverless is created during installation of the Oracle Backend for Parse Platform.\nTo work with data in the database, you can use the Database Actions interface, which can be accessed from the OCI Console. The Oracle database is created in the same compartments as the Parse Server. In the OCI Console, navigate to Autonomous Database in the main menu and select the database with the application name that you configured during installation with the suffix DB. For example COOLAPPDB.\nClick on the link to access the database details page, and then click Database Actions. For example:\nThis opens the Database Actions page where you have access to many database functions, including the ability to work with the JavaScript Object Notation (JSON) collections where your Oracle Backend for Parse Platform data is stored.\nNOTE: If you are asked for credentials, you can obtain them by connecting to the Kubernetes cluster and extracting the password from the Parse Server log using the following command. You need to use the correct name of the Pod on your system, which is different than the name used in this example. In the following example, the user name is adam and the password is apple. You can use these credentials to log into Database Actions.\nuser@cloudshell:~ (us-ashburn-1)$ kubectl logs parse-server-646b97979-9pkq6 -n parse-server | grep databaseURI databaseURI: oracledb://adam:apple@MYMBAASAPPDB_TP Select the JSON tile to access the JSON Console.\nAt startup, the Parse Server creates a few collections including _Hooks, _SCHEMA and _User. The _SCHEMA collection is where the schema of other collections are defined. For example:\nTwo schema entries are created in this collection during the server boot, called _User and _Role as you can see in the preceding image.\nThe GameScore schema would have been created when you made the first POST request in the Working with Objects page. You can see the contents of the GameScore collection in the JSON database. For example:\nNext, go to the Kubernetes Access page to learn about Kubernetes access.\n","description":"Database Access The Oracle Backend for Parse Platform includes an Oracle Database storage adapter for Parse which allows the Parse Server to use the Oracle database. An instance of Oracle Autonomous Database Serverless is created during installation of the Oracle Backend for Parse Platform.\nTo work with data in the database, you can use the Database Actions interface, which can be accessed from the OCI Console. The Oracle database is created in the same compartments as the Parse Server."},{"id":3,"href":"/microservices-datadriven/mbaas/firebase-emulation/extra/","title":"Extra Parse Test Code","parent":"Firebase API Emulation","content":" Extra Parse Test Code To test the Parse API direct access from the same page, let\u0026rsquo;s add a few lines of codes to the index.html file to show four new buttons to Insert, Get and Update a restaurant (minimum properties) in the same collection created from the Firebase-on-Parse SDK. The application logic is in the /parsef/example.js file.\nThe modified parts included in the index.html file are the following:\n\u0026lt;!--ORACLE--\u0026gt; \u0026lt;div style=\u0026#34;text-align: center\u0026#34;\u0026gt; \u0026lt;p\u0026gt; \u0026lt;button id=\u0026#34;insertButton\u0026#34;\u0026gt;INSERT RESTAURANT\u0026lt;/button\u0026gt;\u0026lt;p\u0026gt; \u0026lt;button id=\u0026#34;createButton\u0026#34;\u0026gt;GET RESTAURANT\u0026lt;/button\u0026gt;\u0026lt;p\u0026gt; \u0026lt;button id=\u0026#34;updateButton\u0026#34;\u0026gt;SET RESTAURANT\u0026lt;/button\u0026gt;\u0026lt;p\u0026gt; \u0026lt;button id=\u0026#34;queryButton\u0026#34; \u0026gt;NÂ° RESTAURANTS\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/pre\u0026gt; \u0026lt;!-- \u0026lt;script src=\u0026#34;/__/firebase/9.6.6/firebase-app-compat.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/__/firebase/9.6.6/firebase-auth-compat.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/__/firebase/9.6.6/firebase-firestore-compat.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/__/firebase/init.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; --\u0026gt; \u0026lt;!--ORACLE--\u0026gt; \u0026lt;script src=\u0026#34;//unpkg.com/navigo@6\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!--ORACLE --\u0026gt; \u0026lt;script src=\u0026#34;/parsef/parsef.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://npmcdn.com/parse/dist/parse.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; firebase.app().options.appKey=\u0026#34;COOLAPPV100\u0026#34;; Parse.initialize(firebase.app().options.appKey); Parse.serverURL = \u0026#34;http://localhost:1337/parse\u0026#34;; \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/parsef/example.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- ORACLE--\u0026gt; Reload the page to view the four new buttons. Running in the background are the Parse JS API calls for Insert, Get and Update, and the Firebase API to count how many restaurants are in the Parse database. For example:\nClick in sequence:\nInsert Restaurant:\nGet Restaurant (Note: only Name and Category have been added):\nSet Restaurant:\nGet Restaurant (note that the additional field city has been added):\nIf you click on NÂ° Restaurants, you get the size of the restaurants based on a Firebase API call.\nNext, go to the Implemented APIs page to learn more.\n","description":"Extra Parse Test Code To test the Parse API direct access from the same page, let\u0026rsquo;s add a few lines of codes to the index.html file to show four new buttons to Insert, Get and Update a restaurant (minimum properties) in the same collection created from the Firebase-on-Parse SDK. The application logic is in the /parsef/example.js file.\nThe modified parts included in the index.html file are the following:\n\u0026lt;!--ORACLE--\u0026gt; \u0026lt;div style=\u0026#34;text-align: center\u0026#34;\u0026gt; \u0026lt;p\u0026gt; \u0026lt;button id=\u0026#34;insertButton\u0026#34;\u0026gt;INSERT RESTAURANT\u0026lt;/button\u0026gt;\u0026lt;p\u0026gt; \u0026lt;button id=\u0026#34;createButton\u0026#34;\u0026gt;GET RESTAURANT\u0026lt;/button\u0026gt;\u0026lt;p\u0026gt; \u0026lt;button id=\u0026#34;updateButton\u0026#34;\u0026gt;SET RESTAURANT\u0026lt;/button\u0026gt;\u0026lt;p\u0026gt; \u0026lt;button id=\u0026#34;queryButton\u0026#34; \u0026gt;NÂ° RESTAURANTS\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/pre\u0026gt; \u0026lt;!"},{"id":4,"href":"/microservices-datadriven/mbaas/firebase-emulation/","title":"Firebase API Emulation","parent":"","content":" Firebase API Emulation The Developer Preview includes an example of Firebase API emulation.\nThe Firebase API emulation is implemented in a library called parsef. This library is alpha quality and provided only as a proof-of-concept for developers to experiment with.\nTo try the example, explore the following pages:\nFriendly Eats Tutorial Extra Parse Test Code More detailed information about what APIs are implemented in this example is available on this page:\nImplemented APIs Next, go to the Friendly Eats Tutorial page to learn how to use the Friendly Eats tutorial.\n","description":"Firebase API Emulation The Developer Preview includes an example of Firebase API emulation.\nThe Firebase API emulation is implemented in a library called parsef. This library is alpha quality and provided only as a proof-of-concept for developers to experiment with.\nTo try the example, explore the following pages:\nFriendly Eats Tutorial Extra Parse Test Code More detailed information about what APIs are implemented in this example is available on this page:"},{"id":5,"href":"/microservices-datadriven/mbaas/firebase-emulation/friendly-eats/","title":"Friendly Eats Tutorial","parent":"Firebase API Emulation","content":" Friendly Eats Tutorial This is an example of porting a simple Firebase web application based on JavaScript Firebase API - version 8 and describs a public Tutorial to the Parse Platform leveraging an alpha quality JavaScript library included in this example.\nComplete the Original Tutorial First We recommend that you complete the original FriendlyEats tutorial instructions using Firebase.\nAdapt the Code to Use the Firebase API Emulation After completing the tutorial, you have a functioning application. Next, you can adapt that application to use the Developer Preview of the Firebase API emulation using the following steps:\nOpen the file index.html in an editor in the directory /friendlyeats.\nLook for the Firebase library imports. For example:\n... \u0026lt;script src=\u0026#34;/__/firebase/9.6.6/firebase-app-compat.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/__/firebase/9.6.6/firebase-auth-compat.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/__/firebase/9.6.6/firebase-firestore-compat.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/__/firebase/init.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; ... Comment out the Firebase imports and replace with the following imports and code. Change the COOLAPPV100 and serverURL to match your Oracle Backend for Parse Platform environment. For example:\n\u0026lt;!-- comment these out: \u0026lt;script src=\u0026#34;/__/firebase/9.6.6/firebase-app-compat.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/__/firebase/9.6.6/firebase-auth-compat.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/__/firebase/9.6.6/firebase-firestore-compat.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;/__/firebase/init.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; --\u0026gt; \u0026lt;script src=\u0026#34;//unpkg.com/navigo@6\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- add this: --\u0026gt; \u0026lt;script src=\u0026#34;/parsef/parsef.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://npmcdn.com/parse/dist/parse.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; firebase.app().options.appKey=\u0026#34;COOLAPPV100\u0026#34;; Parse.initialize(firebase.app().options.appKey); Parse.serverURL = \u0026#34;http://localhost:1337/parse\u0026#34;; \u0026lt;/script\u0026gt; The added lines do the following:\nThe Firebase API emulation library (called parsef) is included with this line:\n\u0026lt;script src=\u0026#34;/parsef/parsef.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; To enable the import, create a directory parsef under the project directory and copy the file parsef.js into it.\nThe Parse JavaScript SDK is included with this line:\n\u0026lt;script src=\u0026#34;https://npmcdn.com/parse/dist/parse.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; To configure communication with the Oracle Backend for Parse Platform, you must set your own APPLICATION_ID and Parse serverURL. This initial setup is done using these lines of code:\n\u0026lt;script\u0026gt; firebase.app().options.appKey=\u0026#34;COOLAPPV100\u0026#34;; Parse.initialize(firebase.app().options.appKey); Parse.serverURL = \u0026#34;http://localhost:1337/parse\u0026#34;; \u0026lt;/script\u0026gt; Change the code according to your actual Parse server URL and COOLAPPV100.\nRepeat the Tutorial Steps With Firebase API Emulation Repeat the original tutorial steps to load Restaurants and Ratings into the Parse Server and ensure that the original JavaScript demo application is still running without any other changes.\nStop and restart the Firebase CLI.\nReload the web page from URL http://127.0.0.1:5000\nClick on ADD MOCK DATA and wait until it finishes before adding restaurants to the Parse Server.\nClick on any restaurant. Notice that ratings are empty because the client is no longer asking for data from Firebase or Firestore.\nClick on ADD MOCK RATINGS. In a few seconds, you should see the list of ratings added. If not, close the page by clicking X on the upper left corner, and click again on the same restaurant to force a reload. For example:\nClick the + symbol on the upper right corner to add your own rating to the restaurant. For example:\nNotice the list is updated after saving. For example:\nCheck the original sort and filter functions. Choose \u0026ldquo;Ramen\u0026rdquo; as the Category:\nNotice the updated page after the filter is applied:\nNOTE: In this step, we do not need to add an index definition to the collection as we did in the original tutorial, since this is done automatically in the Parse Server.\nYou can further test the sort functionalities by adding more reviews to other restaurants. This allows you to see the number of reviews and average ratings.\nNext, go to the Extra Parse Test Code page to learn more.\n","description":"Friendly Eats Tutorial This is an example of porting a simple Firebase web application based on JavaScript Firebase API - version 8 and describs a public Tutorial to the Parse Platform leveraging an alpha quality JavaScript library included in this example.\nComplete the Original Tutorial First We recommend that you complete the original FriendlyEats tutorial instructions using Firebase.\nAdapt the Code to Use the Firebase API Emulation After completing the tutorial, you have a functioning application."},{"id":6,"href":"/microservices-datadriven/mbaas/getting-started/","title":"Getting Started","parent":"","content":" Getting Started Once you have completed the setting up Mobile Backend as a Service (MBaaS), you can use the examples in this section to get started:\nWorking with Objects Using the Parse Dasbboard Users, Roles and ACLs ","description":" Getting Started Once you have completed the setting up Mobile Backend as a Service (MBaaS), you can use the examples in this section to get started:\nWorking with Objects Using the Parse Dasbboard Users, Roles and ACLs "},{"id":7,"href":"/microservices-datadriven/mbaas/firebase-emulation/scope/","title":"Implemented APIs","parent":"Firebase API Emulation","content":" Implemented APIs This Developer Preview of the Firebase API emulation includes only the following implemented classes and methods:\nclass Query where() orderBy() limit() get() onSnapshot() class CollectionReference add() orderBy() limit() onSnapshot() doc() get() where() class QueryDocumentSnapshot data() get() class DocumentReference get() collection() class QuerySnapshot forEach() class DocumentSnapshot data() class Firestore collection() runTransaction() class Transaction get() set() update() The diagram below shows relationships between these APIs:\nNext, go to the Dashboard page to learn more about the dashboard.\n","description":"Implemented APIs This Developer Preview of the Firebase API emulation includes only the following implemented classes and methods:\nclass Query where() orderBy() limit() get() onSnapshot() class CollectionReference add() orderBy() limit() onSnapshot() doc() get() where() class QueryDocumentSnapshot data() get() class DocumentReference get() collection() class QuerySnapshot forEach() class DocumentSnapshot data() class Firestore collection() runTransaction() class Transaction get() set() update() The diagram below shows relationships between these APIs:\nNext, go to the Dashboard page to learn more about the dashboard."},{"id":8,"href":"/microservices-datadriven/mbaas/cluster-access/","title":"Kubernetes Access","parent":"","content":" Kubernetes Access As an Oracle Backend for Parse Platform user, it is expected that you probably will not need to access the underlying infrastructure. However, if you do want to have a look around, here is how you can access the Kubernetes cluster where your Oracle Backend for Parse Platform is running.\nThe Oracle Backend for Parse Platform setup created a Kubernetes cluster where the server and dashboard components are deployed. At the end of setup, you were provided with a command to create a Kubernetes configuration file to access that cluster. For example:\nkubeconfig_cmd = \u0026#34;oci ce cluster create-kubeconfig --cluster-id ocid1.cluster.oc1.iad.xxx --file $HOME/.kube/config --region us-ashburn-1 --token-version 2.0.0 --kube-endpoint PUBLIC_ENDPOINT\u0026#34; To use the kubectl command-line interface on your local machine, you need to have the OCI CLI installed and configured.\nNOTE: The generated kubeconfig file only works if you are using the DEFAULT profile in your Oracle Cloud Interface (OCI) CLI configuration file. If you are using a different OCI CLI profile, you must add --profile \u0026lt;NAME\u0026gt; to the command by editing the generated Kubernetes configuration file and add the following lines:\n- --profile - MAACLOUD For example:\n- name: user-xxxx user: exec: apiVersion: client.authentication.k8s.io/v1beta1 args: - ce - cluster - generate-token - --cluster-id - ocid1.cluster....xxxx - --region - us-ashburn-1 - --profile - YOUR_PROFILE_NAME command: oci Using OCI Cloud Shell A simple alternative is to use the OCI Cloud Shell, which is provided in the OCI Console. You can open the OCI Cloud Shell by clicking Developer Tools in the upper right corner of the OCI Console.\nRun the provided command to create your Kubernetes configuration file and then you can access the Kubernetes cluster. For example, you can list the Pods in your cluster:\nWelcome to Oracle Cloud Shell. Update: Cloud Shell will now use Oracle JDK 11 by default. To change this, see Managing Language Runtimes in the Cloud Shell documentation. Your Cloud Shell machine comes with 5GB of storage for your home directory. Your Cloud Shell (machine and home directory) are located in: US East (Ashburn). You are using Cloud Shell in tenancy xxxx as an OCI user xxxx Type `help` for more info. user@cloudshell:~ (us-ashburn-1)$ oci ce cluster create-kubeconfig --cluster-id ocid1.cluster.oc1.iad.xxx --file $HOME/.kube/config --region us-ashburn-1 --token-version 2.0.0 --kube-endpoint PUBLIC_ENDPOINT Existing Kubeconfig file found at /home/user/.kube/config and new config merged into it user@cloudshell:~ (us-ashburn-1)$ kubectl get pods -A NAMESPACE NAME READY STATUS RESTARTS AGE ingress-nginx ingress-nginx-controller-7d45557d5c-bqwwp 1/1 Running 0 4h18m ingress-nginx ingress-nginx-controller-7d45557d5c-klgnb 1/1 Running 0 4h18m ingress-nginx ingress-nginx-controller-7d45557d5c-l4d2m 1/1 Running 0 4h18m kube-system coredns-746957c9c6-hwnm8 1/1 Running 0 4h27m kube-system csi-oci-node-kqf5x 1/1 Running 0 4h23m kube-system kube-dns-autoscaler-6f789cfb88-7mptd 1/1 Running 0 4h27m kube-system kube-flannel-ds-hb6ld 1/1 Running 1 (4h22m ago) 4h23m kube-system kube-proxy-v5qwm 1/1 Running 0 4h23m kube-system proxymux-client-vpnh7 1/1 Running 0 4h23m parse-dashboard kaniko 0/1 Completed 0 4h19m parse-dashboard parse-dashboard-58cb567ffd-frc4x 1/1 Running 0 4h19m parse-server kaniko 0/1 Completed 0 4h20m parse-server parse-server-646b97979-9pkq6 1/1 Running 0 4h19m user@cloudshell:~ (us-ashburn-1)$ The Parse Server is running in the parse-server namespace and the Parse Dashboard is running in the parse-dashboard namespace.\nNext, go to the Uninstall page to learn how to uninstall the Oracle Backend for Parse Platform.\n","description":"Kubernetes Access As an Oracle Backend for Parse Platform user, it is expected that you probably will not need to access the underlying infrastructure. However, if you do want to have a look around, here is how you can access the Kubernetes cluster where your Oracle Backend for Parse Platform is running.\nThe Oracle Backend for Parse Platform setup created a Kubernetes cluster where the server and dashboard components are deployed."},{"id":9,"href":"/microservices-datadriven/mbaas/on-premises/macos_ventura/","title":"macOS Ventura (x86)","parent":"On-Premises Installation","content":" On-Premises Installation - macOS Ventura (x86) This is description of installing On-Premises on a macOS Ventura desktop.\nRead On-Premises and ensure that your desktop meets the minimum system requirements.\nInstall Podman To install Podman, process these commands:\nbrew install podman PODMAN_VERSION=$(podman -v |awk \u0026#39;{print $NF}\u0026#39;) sudo /usr/local/Cellar/podman/${PODMAN_VERSION}/bin/podman-mac-helper install podman machine init --cpus 4 --disk-size 60 --memory 8192 --rootful --now podman system connection default podman-machine-default-root Download the Database/Oracle REST Data Services (ORDS) Images The Desktop installation provisions an Oracle Database into the Kubernetes cluster. The images must be downloaded from Oracle Cloud Infrastructure Registry (Container Registry) before continuing.\nLog in to the Container Registry:\npodman login container-registry.oracle.com\nPull the database image:\npodman pull container-registry.oracle.com/database/enterprise:21.3.0.0\nPull the ORDS Image:\npodman pull container-registry.oracle.com/database/ords:21.4.2-gh\nMinikube To install Minikube, process these commands:\nbrew install minikube minikube config set driver podman minikube start --cpus 4 --memory max --container-runtime=containerd minikube addons enable ingress Download Oracle Backend for Spring Boot and Microservices Download the Oracle Backend for Parse Server and unzip into a new directory.\nInstall Ansible To install Ansible, process these commands:\n./setup_ansible.sh source ./activate.env Define the Infrastructure Use the Helper Playbook to define the infrastructure. This Playbook also:\nCreates additional namespaces for the Container Registry and database. Creates a private Container Registry in the Kubernetes cluster. Modifies the Microservices application to be desktop compatible. Run this command:\nansible-playbook ansible/desktop_apply.yaml\nOpen a Tunnel In order to push the images to the Container Registry in the Kubernetes cluster, open a new terminal and start a tunnel.\nRun this command:\nminikube tunnel\nTo test access to the registry, run this command:\ncurl -X GET -k https://localhost:5000/v2/_catalog\nThis curl results in the following:\n{\u0026#34;errors\u0026#34;:[{\u0026#34;code\u0026#34;:\u0026#34;UNAUTHORIZED\u0026#34;,\u0026#34;message\u0026#34;:\u0026#34;authentication required\u0026#34;,\u0026#34;detail\u0026#34;:[{\u0026#34;Type\u0026#34;:\u0026#34;registry\u0026#34;,\u0026#34;Class\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;Name\u0026#34;:\u0026#34;catalog\u0026#34;,\u0026#34;Action\u0026#34;:\u0026#34;*\u0026#34;}]}]} Build the Images Build and push the images to the Container Registry in the Kubernetes cluster by running this command:\nansible-playbook ansible/images_build.yaml\nAfter the images are built and pushed, the tunnel is no longer required and can be stopped.\nDeploy Oracle Backend for Spring Boot and Microservices Deploy the database and Microservices by running this command:\nansible-playbook ansible/k8s_apply.yaml -t full\nNotes VPN and Proxies If you are behind a Virtual Private Network (VPN) or proxy, click on the following URL for more details on additional tasks:\nhttps://minikube.sigs.k8s.io/docs/handbook/vpn_and_proxy/\nNext, go to the Oracle Linux 8 (x86) page to learn how to use the newly installed environment.\n","description":"On-Premises Installation - macOS Ventura (x86) This is description of installing On-Premises on a macOS Ventura desktop.\nRead On-Premises and ensure that your desktop meets the minimum system requirements.\nInstall Podman To install Podman, process these commands:\nbrew install podman PODMAN_VERSION=$(podman -v |awk \u0026#39;{print $NF}\u0026#39;) sudo /usr/local/Cellar/podman/${PODMAN_VERSION}/bin/podman-mac-helper install podman machine init --cpus 4 --disk-size 60 --memory 8192 --rootful --now podman system connection default podman-machine-default-root Download the Database/Oracle REST Data Services (ORDS) Images The Desktop installation provisions an Oracle Database into the Kubernetes cluster."},{"id":10,"href":"/microservices-datadriven/mbaas/azure/","title":"Microsoft Azure/OCI Multicloud Installation","parent":"","content":" Microsoft Azure/OCI Multicloud Installation The Oracle Backend for Parse Platform is available to install in Multicloud (Microsoft Azure and Oracle Cloud Infrastructure (OCI)). This installation deplpoys the Oracle Backend for Parse Platform in Azure with an Oracle Autonomous Database running in OCI.\nPrerequisites You must meet the following prerequisites to use the Oracle Backend for Spring Boot Multicloud (Microsoft Azure and OCI). You need:\nAn account on Microsoft Azure (Azure) An account on OCI Download Download Oracle Backend for Parse Server.\nSetup A few setup steps are required in both OCI and Azure to deploy the Oracle Backend for Parse Platform application.\nOracle Cloud Infrastructure (OCI) The Multicloud installation provisions an Oracle Autonomous Database in OCI using the OCI Service Operator for Kubernetes (OraOperator).\nTo allow the OraOperator access to OCI, an API key must be generated. Process these steps:\nLog in to OCI.\nOpen the Profile menu and click My profile.\nIn the Resources section at the lower left, click API Keys.\nClick Download Private Key and save the key as private_key.pem. You do not need to download the public key.\nClick Add.\nThe key is added and the Configuration File Preview is displayed. The file snippet includes the required parameters and values that you need. Copy and paste the configuration file snippet from the text box and save for later steps.\nMicrosoft Azure The Multicloud installation is done using the Azure Cloud Shell. The following steps are required in Azure to prepare for the installation.\nLog in to Azure.\nOpen the Azure Cloud Shell. For example:\nUpload the Oracle Backend for Spring Boot and Microservices stack. For example:\nUpload the API Private Key (private_key.pem).\nUnzip the stack to the following directory:\nunzip azure-mbaas_latest.zip -d obaas\nMove the private_key.pem file to:\nmv private_key.pem obaas/\nRun the configuration helper script, specifying the values from the API key. For example:\ncd ~/obaas ./obaas_configure.py Install Ansible Install Ansible to run the Configuration Management Playbook. The helper scripts create a Python virtual environment and installs Ansible and any additional modules. For example:\ncd ~/obaas/ansible ./setup_ansible.sh source ./activate.env Deploy the Infrastructure Deploy the infrastructure from the Azure Cloud Shell using these commands:\ncd ~/obaas terraform init terraform plan -out=multicloud.plan terraform apply \u0026#34;multicloud.plan\u0026#34; Next, go to the On-Premises Installation page to learn how to use the newly installed environment.\n","description":"Microsoft Azure/OCI Multicloud Installation The Oracle Backend for Parse Platform is available to install in Multicloud (Microsoft Azure and Oracle Cloud Infrastructure (OCI)). This installation deplpoys the Oracle Backend for Parse Platform in Azure with an Oracle Autonomous Database running in OCI.\nPrerequisites You must meet the following prerequisites to use the Oracle Backend for Spring Boot Multicloud (Microsoft Azure and OCI). You need:\nAn account on Microsoft Azure (Azure) An account on OCI Download Download Oracle Backend for Parse Server."},{"id":11,"href":"/microservices-datadriven/mbaas/on-premises/","title":"On-Premises Installation","parent":"","content":" On-Premises Installation The Oracle Backend for Parse Platform is available to install On-Premises. The On-Premises installation includes both a Desktop installation and an Estate installation.\nThe Desktop installation can be used to explore a non-Production environment, while the Estate installation is targeted for a Production infrastructure.\nPrerequisites You must meet the following prerequisites to use the Oracle Backend for Parse Platform On-Premises. You need access to:\nAn Oracle Database Enterprise Edition 19.3.0.0 A Container Repository A Kubernetes cluster Python 3+ When installing on a Desktop, the previously mentioned prerequisites are met through an additional setup task, but there are additional desktop system or software requirements. For example:\n2 CPUs or more 8 GB of free memory 60 GB of free disk space (40 GB Minikube and container images, 20 GB database) Internet connection Minikube Podman1 Oracle Single Sign-On (SSO) account to download the database image Download Download Oracle Backend for Parse Platform.\nSetup An On-Premises installation, whether Desktop or Estate, consists of defining the Parse application and infrastructure followed by running the Configuration Management Playbook to build images and deploy the Microservices.\nFor an Estate installation, you need a Kubernetes cluster and the kubectl command-line interface must be configured to communicate with the cluster.\nA Helper Playbook is provided for Desktop installations to assist in defining the infrastructure. Review the appropriate documentation for examples of installing and defining the Desktop installation.\nmacOS Ventura (x86) Oracle Linux 8 (x86) The Desktop Playbook is run as part of the Configuration Management Playbook.\nDownload the Database/Oracle REST Data Services (ORDS) Images (Desktop Installation) The Desktop installation provisions an Oracle Database into the Kubernetes cluster. The images must be downloaded from the Oracle Cloud Infrastructure Registry (Container Registry) before continuing.\nAfter installing Podman:\nLog in to the Container Registry:\npodman login container-registry.oracle.com\nPull the database image:\npodman pull container-registry.oracle.com/database/enterprise:19.3.0.0\nPull the ORDS image:\npodman pull container-registry.oracle.com/database/ords:21.4.2-gh\nDefining the Parse Application (Estate Installation) The application is defined in ansible/vars/mbaas.yaml. For example:\n--- mbaas_edition: \u0026#34;COMMUNITY\u0026#34; app_name: \u0026#34;MYAPP\u0026#34; app_id: \u0026#34;PiITzsu3RCc499RRDOYOBgWnyAlMm6695r1536y1\u0026#34; master_key: \u0026#34;Q5CP7MHpoZhSwbk39XpHxamp4rJJ4F3vPZ3NZ7ee\u0026#34; dashboard_username: \u0026#34;ADMIN\u0026#34; dashboard_password: \u0026#34;OZ0-mSt-27Evb-Qy\u0026#34; storage: \u0026#34;\u0026#34; access_key: \u0026#34;N/A\u0026#34; private_key: \u0026#34;N/A\u0026#34; ... You can use any arbitrary string as your app_name, app_id, and master_key. These are used by your clients to authenticate with the Parse Server. It is recommended to specify a unique dashboard_username and dashboard_password.\nDefining the Database (Estate Installation) The database is defined in ansible/roles/database/vars/main.yaml. For example:\n--- database_oracle_dbs: [\u0026#34;BAASPDB\u0026#34;] database_default_db: BAASPDB BAASPDB: # noqa: var-naming[pattern] username: \u0026#34;PDBADMIN\u0026#34; password: \u0026#34;Correct-horse-Battery-staple-35\u0026#34; service: \u0026#34;(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=localhost)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=BAASPDB)))\u0026#34; ocid: \u0026#34;\u0026#34; ... The oracle_dbs and default_db keys should be the name of your Pluggable Database (PDB). These keys are followed by the PDB and keys defining how to access the PDB. If using Mutual Transport Layer Security (mTLS) authentication, specify the full path of the wallet file.\nDefining the Container Repository (Estate Installation) The Container Repository is defined in ansible/roles/registry/vars/main.yaml. For example:\n--- registry_username: \u0026#34;oracle\u0026#34; registry_password: \u0026#34;Correct-horse-Battery-staple-35\u0026#34; registry_push_url: \u0026#34;docker.io/myorg\u0026#34; registry_push_auth: auths: docker.io/myorg: auth: \u0026#34;b3JhY2xlOjdaUVgxLXhhbFR0NTJsS0VITlA0\u0026#34; registry_pull_url: \u0026#34;docker.io/myorg\u0026#34; registry_pull_auth: auths: docker.io/myorg: auth: \u0026#34;b3JhY2xlOjdaUVgxLXhhbFR0NTJsS0VITlA0\u0026#34; ... Specify the URL or authentication credentials for your Container Repository in registry_pull_url, registry_push_url, registry_username, and registry_password.\nFor the registry_pull_auth and registry_push_auth sections, manually log into your repository and copy the values found in created file, located in $HOME/.config/containers/auth.json\nWhy is there duplication between the push and pull URL\u0026rsquo;s? The push URL is used from the deployment machine while the pull URL is used inside the pods. If you have a private registry inside the Kubernetes cluster, these URL\u0026rsquo;s could be different. This is the case for the Desktop installation. The push URL is localhost:5000, while the pull URL is \u0026lt;Registry Pod ClusterIP\u0026gt;:5000.\nConfiguration Management From the source package, run the Configuration Management Playbook.\nInstall Ansible Using Python, install Ansible to run the Configuration Management Playbook. The Helper scripts create a Python virtual environment and installs Ansible and any additional modules. For example:\n./setup_ansible.sh source ./activate.env Desktop Playbook If this is an Estate installation, the infrastructure should be manually defined as previously mentioned. If this is a Desktop installation, run the Helper Playbook to define the infrastructure. For example:\nansible-Playbook desktop-apply.yaml Build and Push Images to the Container Repository For the Desktop installation, start a new terminal and tunnel or port-forward to the Minikube cluster. Refer to the specific platform details for more information.\nFor both installations, run the Images Playbook on the original terminal. For example:\nansible-playbook ansible/images_build.yaml Install the Microservices To install Microservices, process this command:\nansible-Playbook ansible/k8s_apply.yaml -t full Next, go to the macOS Ventura (x86) page to learn how to use the newly installed environment.\nFootnotes Certification has been performed against Podman. However, other container or virtual machine managers are available and may be substituted. Experience is needed.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","description":"On-Premises Installation The Oracle Backend for Parse Platform is available to install On-Premises. The On-Premises installation includes both a Desktop installation and an Estate installation.\nThe Desktop installation can be used to explore a non-Production environment, while the Estate installation is targeted for a Production infrastructure.\nPrerequisites You must meet the following prerequisites to use the Oracle Backend for Parse Platform On-Premises. You need access to:\nAn Oracle Database Enterprise Edition 19."},{"id":12,"href":"/microservices-datadriven/mbaas/on-premises/ol8/","title":"Oracle Linux 8 (x86)","parent":"On-Premises Installation","content":" On-Premises Installation - Oracle Linux 8 (x86) This is a description of installing On-Premises on an Oracle Linux 8 desktop.\nRead On-Premises and ensure that your desktop meets the minimum system requirements.\nInstall Additional Operating System Packages As the root user, install the following operating system packages:\ndnf -y module install container-tools:ol8 dnf -y install conntrack podman curl dnf -y install oracle-database-preinstall-21c dnf -y install langpacks-en dnf module install -y python39 dnf -y update Set the default Python3 to Python 3.9:\nalternatives --set python3 /usr/bin/python3.9 Install MiniKube As the root user, install minikube:\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 install minikube-linux-amd64 /usr/local/bin/minikube Create a Non-Root User Create a new user. While any user name can be created, the rest of the documentation refers to the non-root user as obaas.\nAs root, process these commands:\nuseradd obaas echo \u0026#34;obaas ALL=(ALL) NOPASSWD: /bin/podman\u0026#34; \u0026gt;\u0026gt; /etc/sudoers Download the Database/Oracle REST Data Services (ORDS) Images The Desktop installation provisions an Oracle Database into the Kubernetes cluster. The images must be downloaded from Oracle Cloud Infrastructure Registry (Container Registry) before continuing.\nAs the obaas user, take these steps:\nLog in to the Container Registry:\npodman login container-registry.oracle.com\nPull the database image:\npodman pull container-registry.oracle.com/database/enterprise:19.3.0.0\nPull the ORDS image:\npodman pull container-registry.oracle.com/database/ords:21.4.2-gh\nStart Minikube As the obaas user, process these commands:\necho \u0026#34;PATH=\\$PATH:/usr/sbin\u0026#34; \u0026gt;\u0026gt; ~/.bashrc minikube config set driver podman minikube start --cpus max --memory 7900mb --disk-size=\u0026#39;40g\u0026#39; --container-runtime=cri-o minikube addons enable ingress Download Oracle Backend for Parse Server As the obaas user, download Oracle Backend for Parse Server and unzip into a new directory. For example:\nunzip onprem-mbaas_latest.zip -d ~/obaas Install Ansible As the obaas user, change to the source directory and install Ansible:\ncd ~/obaas ./setup_ansible.sh source ./activate.env Define the Infrastructure Use the Helper Playbook to define the infrastructure. This Playbook also:\nCreates additional namespaces for the Container Registry and database. Creates a private Container Registry in the Kubernetes cluster. Modifies the Microservices application to be desktop compatible. Assuming the source was unzipped to ~/obaas, as the obaas user, run this command:\nansible-playbook ~/obaas/ansible/desktop_apply.yaml\nOpen a Tunnel In order to push the images to the Container Registry in the Kubernetes cluster, open a new terminal and start a port-forward service.\nAs the obaas user, run these commands:\nsource ./activate.env kubectl port-forward service/private -n container-registry 5000:5000 \u0026amp;` Build the Images Build and push the images to the Container Registry in the Kubernetes cluster. Assuming the source was unzipped to ~/obaas, as the obaas user, run this command:\nansible-playbook ~/obaas/ansible/images_build.yaml\nAfter the images are built and pushed, the port-forward service is no longer required and can be stopped.\nDeploy Microservices Assuming the source was unzipped to ~/obaas, as the obaas user, run this command to deploy Microservices:\nansible-playbook ~/obaas/ansible/k8s_apply.yaml -t full\nNotes VPN and Proxies If you are behind a Virtual Private Network (VPN) or proxy, click on the following URL for more details on additional tasks:\nhttps://minikube.sigs.k8s.io/docs/handbook/vpn_and_proxy/\nNext, go to the Getting Started page to learn how to use the newly installed environment.\n","description":"On-Premises Installation - Oracle Linux 8 (x86) This is a description of installing On-Premises on an Oracle Linux 8 desktop.\nRead On-Premises and ensure that your desktop meets the minimum system requirements.\nInstall Additional Operating System Packages As the root user, install the following operating system packages:\ndnf -y module install container-tools:ol8 dnf -y install conntrack podman curl dnf -y install oracle-database-preinstall-21c dnf -y install langpacks-en dnf module install -y python39 dnf -y update Set the default Python3 to Python 3."},{"id":13,"href":"/microservices-datadriven/mbaas/release-notes/","title":"Release Notes","parent":"","content":" Release Notes Developer Preview 0.3.0, April 17, 2023 No components were added.\nThe following components were updated:\nComponent Version Description Oracle Database storage adapter for Parse 0.3.0 Enables the Parse Server to store data in Oracle Database. The following areas were improved in this release: Schema Field Validation, Schema Field Default Values, Create and Delete Indexes, Composite Indexes, and Schema Field Deletion.\nThere were no deprecations or removals.\nDeveloper Preview 0.2.0, February 27, 2023 No components were added.\nThe following components were updated:\nComponent Version Description Oracle Database storage adapter for Parse 0.2.0 Enables the Parse Server to store data in Oracle Database. Oracle Database storage adapter for Parse 0.2.0 includes a complete rearchitecture of the connection and pool handling which has resulted in a significant improvement in performance and stability over the previous release.\nThere were no deprecations or removals.\nDeveloper Preview 0.0.1, December 20, 2022 This release includes the following components:\nComponent Version Description Parse Server 5.2.7 Provides backend services for mobile and web applications. Parse Dashboard 5.0.0 Provides a web user interface for managing the Parse Server. Oracle Database storage adapter for Parse 0.0.1 Enables the Parse Server to store data in Oracle Database. ","description":"Release Notes Developer Preview 0.3.0, April 17, 2023 No components were added.\nThe following components were updated:\nComponent Version Description Oracle Database storage adapter for Parse 0.3.0 Enables the Parse Server to store data in Oracle Database. The following areas were improved in this release: Schema Field Validation, Schema Field Default Values, Create and Delete Indexes, Composite Indexes, and Schema Field Deletion.\nThere were no deprecations or removals.\nDeveloper Preview 0."},{"id":14,"href":"/microservices-datadriven/mbaas/sample-apps/","title":"Sample Applications","parent":"","content":" Sample Applications This page provides details of the sample applications:\nWalking History is a React Native application that uses the database and GeoPoints APIs. More coming soon!\n","description":"Sample Applications This page provides details of the sample applications:\nWalking History is a React Native application that uses the database and GeoPoints APIs. More coming soon!"},{"id":15,"href":"/microservices-datadriven/mbaas/setup/","title":"Setup","parent":"","content":"The Oracle Backend for Parse Platform is available to install from OCI Marketplace.\nPrerequisites You must meet the following prerequisites to use the Oracle Backend for Parse Platform. You need:\nAn Oracle Cloud Infrastructure (OCI) account in a tenancy with sufficient quota to create the following:\nAn OCI Container Engine for Kubernetes cluster (OKE cluster), plus a node pool with three worker nodes. A Virtual Cloud Network (VCN) with at least two public IP\u0026rsquo;s available. A public load balancer. An Oracle Autonomous Database Serverless instance. At least one free OCI auth token (note that the maximum is two per user).\nSetup To start the installation, take the following steps:\nVisit the OCI Marketplace listing for Oracle Backend for Parse Platform (see the following image).\nLog in to the OCI Console, if requested.\nChoose the target compartment.\nReview and accept the terms and conditions.\nClick Launch Stack.\nOn the Create Stack page:\na. Modify the suggested name, if desired.\nb. Add a description or tags, if desired.\nc. Click Next.\nOn the Configure variables page, in the Backend as a Service section (see the following image):\na. Specify an application name, if desired. If not specified, a randomized value is generated. This is the name of the Parse application.\nb. Specify an application ID, if desired. If not specified, a randomized value is generated. This is the Parse APPLICATION_ID.\nc. Specify a server master key, if desired. If not specified, a randomized value is generated. This is the Parse MASTER_KEY.\nd. Change the dashboard user name, if desired. Note that this is case-sensitive.\ne. Provide a dashboard password for the dashboard user. Oracle recommends using a strong password for security purposes.\nFor example:\nIn the Control Plane Options section, modify the Classless Inter-Domain Routing (CIDR) block, if desired. Note that you can only access the service from IP addresses in the specified CIDR block.\nIn the Node Pool section, you can customize the number of nodes and enable auto scaling, if desired.\nIn the Load Balancers Options section, you can customize the load balancer shape and the CIDR for client access. For simple testing, Oracle recommends using the default values.\nIn the Database Options section, you can customize the database shape and the CIDR for client access. Note that you cannot access Database Actions if you change the network access to PRIVATE_ENDPOINT_ACCESS.\nOnce you have completed customization, click Next.\nThe Review page is displayed. Check your settings and then click Create to create the stack and run the Terraform apply command to create all of the associated resources.\nYou can monitor the installation in the log. Installation takes approximately 20 minutes to complete. Most of this time is spent provisioning the Kubernetes cluster, its nodes, and the database.\nWhen the installation is finished, some important information is included at the end of the log. You need this information to access the newly created environment. For example:\napplication_id = \u0026#34;COOLAPPV100\u0026#34; dashboard_password = \u0026lt;sensitive\u0026gt; dashboard_uri = \u0026#34;http://1.2.3.4\u0026#34; dashboard_user = \u0026#34;ADMIN\u0026#34; kubeconfig_cmd = \u0026#34;oci ce cluster create-kubeconfig --cluster-id ocid1.cluster.oc1.iad.xxx --file $HOME/.kube/config --region us-ashburn-1 --token-version 2.0.0 --kube-endpoint PUBLIC_ENDPOINT\u0026#34; parse_endpoint = \u0026#34;1.2.3.4/parse\u0026#34; Next, go to the Microsoft Azure/OCI Multicloud Installation page to learn how to use the newly installed environment.\n","description":"The Oracle Backend for Parse Platform is available to install from OCI Marketplace.\nPrerequisites You must meet the following prerequisites to use the Oracle Backend for Parse Platform. You need:\nAn Oracle Cloud Infrastructure (OCI) account in a tenancy with sufficient quota to create the following:\nAn OCI Container Engine for Kubernetes cluster (OKE cluster), plus a node pool with three worker nodes. A Virtual Cloud Network (VCN) with at least two public IP\u0026rsquo;s available."},{"id":16,"href":"/microservices-datadriven/mbaas/tags/","title":"Tags","parent":"","content":"","description":""},{"id":17,"href":"/microservices-datadriven/mbaas/uninstall/","title":"Uninstall","parent":"","content":" Uninstall To remove the Oracle Backend for Parse Platform, in the OCI Console main menu, navigate to Developer Services then Resource Manager - Stacks. Make sure that you are in the correct region and compartment where you installed the Mobile Backend as a Service (MBaaS).\nClick on the link to open the detailed view for the MBaaS instance and click Destroy to clean up resources. For example:\nThe destroy job takes about 20 minutes to complete. You should review the logs at the end to make sure it completed succesfully. If there are any errors, run the destroy job again.\nNext, go to the Release Notes page to learn more.\n","description":"Uninstall To remove the Oracle Backend for Parse Platform, in the OCI Console main menu, navigate to Developer Services then Resource Manager - Stacks. Make sure that you are in the correct region and compartment where you installed the Mobile Backend as a Service (MBaaS).\nClick on the link to open the detailed view for the MBaaS instance and click Destroy to clean up resources. For example:\nThe destroy job takes about 20 minutes to complete."},{"id":18,"href":"/microservices-datadriven/mbaas/getting-started/identity/","title":"Users, Roles and ACLs","parent":"Getting Started","content":" Users, Roles and ACLs Creating Users You can create a user with this Representational State Transfer (REST) API. You must provide the correct APPLICATION_ID and endpoint for your environment. For example:\ncurl -X POST \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ -H \u0026#34;X-Parse-Revocable-Session: 1\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;username\u0026#34;:\u0026#34;newuser\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;newpassword\u0026#34;,\u0026#34;phone\u0026#34;:\u0026#34;415-392-0202\u0026#34;}\u0026#39; \\ http://1.2.3.4/parse/users # output (formatted): { \u0026#34;objectId\u0026#34;:\u0026#34;DrIxj80hAf\u0026#34;, \u0026#34;createdAt\u0026#34;:\u0026#34;2022-12-12T18:11:18.497Z\u0026#34;, \u0026#34;sessionToken\u0026#34;:\u0026#34;r:6cad2f1fcd7de36e68ed86e3d215d324\u0026#34; } NOTE: Email server integration is not available in this Developer Preview. Verifying email and the password reset functionality is not supported at this time.\nLearn more about users in the Parse Server documentation\nCreating Roles You can create a role with this REST API. You must provide the correct APPLICATION_ID and endpoint for your environment. For example:\ncurl -X POST \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;name\u0026#34;: \u0026#34;Moderators\u0026#34;,\u0026#34;ACL\u0026#34;: {\u0026#34;*\u0026#34;: {\u0026#34;read\u0026#34;: true}}}\u0026#39; \\ http://1.2.3.4/parse/roles # output (formatted): { \u0026#34;objectId\u0026#34;:\u0026#34;otUtMWXca3\u0026#34;, \u0026#34;createdAt\u0026#34;:\u0026#34;2022-12-12T18:46:27.341Z\u0026#34; } Learn more about roles in the Parse Server documentation\nUsing Access Control Lists (ACLs) Parse ACLs are implemented as part of the API and can be specified on most requests.\nThe following examples use the GameScore collection that you created earlier. Also, the examples focus on the delete function which requires the write permission.\nLearn more about ACLs in the Parse Server documentation\nGameScore With No ACLs Create a GameScore document using these commands:\ncurl -X POST \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;playerName\u0026#34;:\u0026#34;Mom Staples\u0026#34;,\u0026#34;cheatmode\u0026#34;:false, \u0026#34;score\u0026#34;:25}\u0026#39; \\ http://1.2.3.4/parse/classes/GameScore # output (formatted): { \u0026#34;objectId\u0026#34;:\u0026#34;BLxUYqfh6E\u0026#34;, \u0026#34;createdAt\u0026#34;:\u0026#34;2022-09-23T13:48:08.834Z\u0026#34; } This creates a document similar to the following:\n{ \u0026#34;playerName\u0026#34;: \u0026#34;Mom Staples\u0026#34;, \u0026#34;cheatmode\u0026#34;: false, \u0026#34;score\u0026#34;: 25, \u0026#34;updatedAt\u0026#34;: \u0026#34;2022-09-23T13:48:08.834Z\u0026#34;, \u0026#34;createdAt\u0026#34;: \u0026#34;2022-09-23T13:48:08.834Z\u0026#34;, \u0026#34;_id\u0026#34;: \u0026#34;BLxUYqfh6E\u0026#34; } Note that no ACLs are associated with this object.\nDelete GameScore without an ACL using these commands:\ncurl -X DELETE \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ http://1.2.3.4/parse/classes/GameScore/BLxUYqfh6E # output {} The document is deleted. You can verify this using the GET API, the dashboard, or by looking in the JavaScript Object Notation (JSON) collection in the database.\nGameScore With User ACL Create a GameScore document with a specific user that has read/write access. For example:\ncurl -X POST \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ http://1.2.3.4/parse/classes/GameScore \\ --data-binary @- \u0026lt;\u0026lt; EOF { \u0026#34;playerName\u0026#34;:\u0026#34;Pop Staples\u0026#34;, \u0026#34;cheatmode\u0026#34;:false, \u0026#34;score\u0026#34;:2500, \u0026#34;ACL\u0026#34;: { \u0026#34;*\u0026#34;: { \u0026#34;read\u0026#34;: true }, \u0026#34;E3t4Iid6XN\u0026#34;: { \u0026#34;read\u0026#34; :true, \u0026#34;write\u0026#34;: true } } } EOF # output (formatted): { \u0026#34;objectId\u0026#34;:\u0026#34;9xTZkqjTwB\u0026#34;, \u0026#34;createdAt\u0026#34;:\u0026#34;2022-09-23T13:55:58.787Z\u0026#34; } This creates a document similar to the following:\n{ \u0026#34;playerName\u0026#34;: \u0026#34;Pop Staples\u0026#34;, \u0026#34;cheatmode\u0026#34;: false, \u0026#34;score\u0026#34;: 2500, \u0026#34;updatedAt\u0026#34;: \u0026#34;2022-09-23T13:55:58.787Z\u0026#34;, \u0026#34;createdAt\u0026#34;: \u0026#34;2022-09-23T13:55:58.787Z\u0026#34;, \u0026#34;_id\u0026#34;: \u0026#34;9xTZkqjTwB\u0026#34;, \u0026#34;_wperm\u0026#34;: [ \u0026#34;E3t4Iid6XN\u0026#34; ], \u0026#34;_rperm\u0026#34;: [ \u0026#34;*\u0026#34;, \u0026#34;E3t4Iid6XN\u0026#34; ], \u0026#34;_acl\u0026#34;: { \u0026#34;E3t4Iid6XN\u0026#34;: { \u0026#34;w\u0026#34;: true, \u0026#34;r\u0026#34;: true }, \u0026#34;*\u0026#34;: { \u0026#34;r\u0026#34;: true } } } NOTE: Specifying an ACL creates the internal _rperm and _wperm. These are not accessible through the API and are Parse internal implementation data.\nDelete a GameScore document with a specific user that has read/write access.\nTo delete a document that has ACLs, a caller needs to specify the session token that is obtained by logging in. For example:\ncurl -X POST \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ -H \u0026#34;X-Parse-Revocable-Session: 1\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;username\u0026#34;:\u0026#34;nyg\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;password\u0026#34;}\u0026#39; \\ http://1.2.3.4/parse/login # output (formatted): { \u0026#34;username\u0026#34;:\u0026#34;nyg\u0026#34;, \u0026#34;phone\u0026#34;:\u0026#34;111-111-1111\u0026#34;, \u0026#34;updatedAt\u0026#34;:\u0026#34;2022-09-21T15:06:49.526Z\u0026#34;, \u0026#34;createdAt\u0026#34;:\u0026#34;2022-09-21T15:06:49.526Z\u0026#34;, \u0026#34;objectId\u0026#34;:\u0026#34;E3t4Iid6XN\u0026#34;, \u0026#34;ACL\u0026#34;:{ \u0026#34;*\u0026#34;:{ \u0026#34;read\u0026#34;:true }, \u0026#34;E3t4Iid6XN\u0026#34;:{ \u0026#34;read\u0026#34;:true, \u0026#34;write\u0026#34;:true } }, \u0026#34;sessionToken\u0026#34;:\u0026#34;r:e8256f575a826b64a91a18d6ad21911b\u0026#34; } As you can see, user nyg has ID E3t4Iid6XN which matches the _wperm in the document.\nTo delete the document, use the DELETE API with the sessionToken associated with the user. For example:\ncurl -X DELETE \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ -H \u0026#34;X-Parse-Session-Token: r:9431c553bb56f21c0a2853b18b5df37d\u0026#34; \\ http://1.2.3.4/parse/classes/GameScore/9xTZkqjTwB # output {} GameScore With Roles ACL Roles work in a similar fashion to Users. It is assumed that, for this example, the User bruce has been associated with the role Admins.\nCreate a GameScore document with a specific role that has read/write access. For example:\ncurl -X POST \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ http://1.2.3.4/parse/classes/GameScore \\ --data-binary @- \u0026lt;\u0026lt; EOF { \u0026#34;playerName\u0026#34;:\u0026#34;Aaron Judge\u0026#34;, \u0026#34;cheatmode\u0026#34;:false, \u0026#34;score\u0026#34;:64, \u0026#34;ACL\u0026#34;: { \u0026#34;*\u0026#34;: { \u0026#34;read\u0026#34;: true }, \u0026#34;role:Admins\u0026#34;: { \u0026#34;read\u0026#34; :true, \u0026#34;write\u0026#34;: true } } } EOF # output (formatted) { \u0026#34;objectId\u0026#34;:\u0026#34;LkTqWJKWw1\u0026#34;, \u0026#34;createdAt\u0026#34;:\u0026#34;2022-09-23T17:39:20.115Z\u0026#34; } This creates a document similar to the following:\n{ \u0026#34;playerName\u0026#34;: \u0026#34;Aaron Judge\u0026#34;, \u0026#34;cheatmode\u0026#34;: false, \u0026#34;score\u0026#34;: 64, \u0026#34;updatedAt\u0026#34;: \u0026#34;2022-09-23T17:39:20.115Z\u0026#34;, \u0026#34;createdAt\u0026#34;: \u0026#34;2022-09-23T17:39:20.115Z\u0026#34;, \u0026#34;_id\u0026#34;: \u0026#34;LkTqWJKWw1\u0026#34;, \u0026#34;_wperm\u0026#34;: [ \u0026#34;role:Admins\u0026#34; ], \u0026#34;_rperm\u0026#34;: [ \u0026#34;*\u0026#34;, \u0026#34;role:Admins\u0026#34; ], \u0026#34;_acl\u0026#34;: { \u0026#34;role:Admins\u0026#34;: { \u0026#34;w\u0026#34;: true, \u0026#34;r\u0026#34;: true }, \u0026#34;*\u0026#34;: { \u0026#34;r\u0026#34;: true } } } To delete this document, a caller must get the session token for a user that has the Admins role by logging in. For example:\ncurl -X POST \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ -H \u0026#34;X-Parse-Revocable-Session: 1\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;username\u0026#34;:\u0026#34;bruce\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;password\u0026#34;}\u0026#39; \\ http://1.2.3.4/parse/login # output (formatted) { \u0026#34;username\u0026#34;:\u0026#34;bruce\u0026#34;, \u0026#34;phone\u0026#34;:\u0026#34;222-222-2222\u0026#34;, \u0026#34;updatedAt\u0026#34;:\u0026#34;2022-09-21T16:26:32.948Z\u0026#34;, \u0026#34;createdAt\u0026#34;:\u0026#34;2022-09-21T16:26:32.948Z\u0026#34;, \u0026#34;objectId\u0026#34;:\u0026#34;tE8wEhXmJg\u0026#34;, \u0026#34;ACL\u0026#34;: { \u0026#34;*\u0026#34;: { \u0026#34;read\u0026#34;:true }, \u0026#34;tE8wEhXmJg\u0026#34;:{ \u0026#34;read\u0026#34;:true, \u0026#34;write\u0026#34;:true } }, \u0026#34;sessionToken\u0026#34;:\u0026#34;r:9805595b4a73c8d2135ae9e70bb885c6\u0026#34; } The session token must be supplied in the DELETE API call. For example:\ncurl -X DELETE \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ -H \u0026#34;X-Parse-Session-Token: r:9805595b4a73c8d2135ae9e70bb885c6\u0026#34; \\ http://1.2.3.4/parse/classes/GameScore/LkTqWJKWw1 # output {} Using the Master Key NOTE: Oracle does not recommended using the master key to avoid ACLs.\nUsing the master key in an API call turns off all ACL checking. For example:\ncurl -X DELETE \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ -H \u0026#34;X-Parse-Master-Key: MASTER_KEY\u0026#34; \\ http://1.2.3.4/parse/classes/GameScore/BLxUYqfh6E # output: {} This call deletes the specified document regardless of any ACLs present.\nNext, go to the Sample Applications page to learn how to use the Sample Applications.\n","description":"Users, Roles and ACLs Creating Users You can create a user with this Representational State Transfer (REST) API. You must provide the correct APPLICATION_ID and endpoint for your environment. For example:\ncurl -X POST \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ -H \u0026#34;X-Parse-Revocable-Session: 1\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;username\u0026#34;:\u0026#34;newuser\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;newpassword\u0026#34;,\u0026#34;phone\u0026#34;:\u0026#34;415-392-0202\u0026#34;}\u0026#39; \\ http://1.2.3.4/parse/users # output (formatted): { \u0026#34;objectId\u0026#34;:\u0026#34;DrIxj80hAf\u0026#34;, \u0026#34;createdAt\u0026#34;:\u0026#34;2022-12-12T18:11:18.497Z\u0026#34;, \u0026#34;sessionToken\u0026#34;:\u0026#34;r:6cad2f1fcd7de36e68ed86e3d215d324\u0026#34; } NOTE: Email server integration is not available in this Developer Preview."},{"id":19,"href":"/microservices-datadriven/mbaas/getting-started/dashboard/","title":"Using the Parse Dashboard","parent":"Getting Started","content":" Using the Parse Dashboard The Oracle Backend for Parse Platform includes a web user interface for managing your applications. To learn more, see the dashboard page.\nNext, go to the Users, Roles and ACLs page to learn more.\n","description":"Using the Parse Dashboard The Oracle Backend for Parse Platform includes a web user interface for managing your applications. To learn more, see the dashboard page.\nNext, go to the Users, Roles and ACLs page to learn more."},{"id":20,"href":"/microservices-datadriven/mbaas/sample-apps/walking-history/","title":"Walking History","parent":"Sample Applications","content":" Walking History The Walking History sample application uses the Parse database and GeoPoints APIs. It is a React Native application that allows you to walk around New York City (or simulate that in a device emulator) and it tells you about the closest attraction or point of interest.\nHere is what the Walking History application looks like running in the Android emulator:\nTry the Sample To try this sample application, you need the following:\nAn instance of Oracle Backend for Parse Platform deployed and running. Android Studio or Xcode, with the device emulator. For Android, use API level 30 and Android 11 for compatibilty with the version of React Native used in this sample. NodeJS to run the React Native Metro development server. Once you have the prerequisites, start cloning the source code for the application. For example:\ngit clone https://github.com/oracle/microservices-datadriven cd microservices-datadriven/developer-preview/walking-history This directory contains the source code for the application. In the source code, you need to update the file App.js to set the APPLICATION_ID and server URL to match your environment. Find these lines and update those two values. Note that the required values were provided in the output at the end of the log for the stack apply job during the installation. For example:\nconst App: () =\u0026gt; Node = () =\u0026gt; { const isDarkMode = useColorScheme() === \u0026#39;dark\u0026#39;; const Parse = require(\u0026#39;parse/react-native.js\u0026#39;); Parse.setAsyncStorage(AsyncStorage); Parse.initialize(\u0026#34;APPLICATION_ID\u0026#34;); // \u0026lt;-- update this Parse.serverURL = \u0026#39;http://1.2.3.4/parse\u0026#39;; // \u0026lt;-- update this Once you have made the updates, you can start the Metro development server by running this command:\nnpx react-native start NOTE: The following instructions are for Android. If you are using the iPhone operating system (iOS), process the equivalent steps in Xcode.\nOpen the android sub-directory as a project in Android Studio. Create an emulator if you have not already done so (noting the specific version requirements previously mentioned) and then click Run (or choose Run... from the Run menu) to start the application on the emulator.\nClick on the three dots symbol in the emulator menu to open the Extended Controls. On the Location page, create a new route from 33 Peck Slip, New York to 14 W 34th Street, New York. Set the playback speed to 4x and click on Play Route. Your emulator now silumates walking around New York City for several minutes.\nAs you \u0026ldquo;walk\u0026rdquo; around, you see that the application updates your location and the nearest point of interest changes.\nExplore the Parse API Usage in the Source Code In addition to the Parse initialization in the App.js file, you can review the file components\\Location.js which uses the Parse Query API and the GeoPoints API to find a list of points of interest that are near the current location of the device (emulator). For example:\n// find the closest attraction and update the state console.log(\u0026#34;querying parse server for nearby attractions\u0026#34;); let query = new Parse.Query(\u0026#39;POI\u0026#39;); query.near(\u0026#39;location\u0026#39;, new Parse.GeoPoint(currentPosition.coords.latitude, currentPosition.coords.longitude)); let results = await query.find().catch(err =\u0026gt; console.log(\u0026#34;OOPS \u0026#34; + JSON.stringify(err))); Next, go to the Firebase API Emulation page to learn more.\n","description":"Walking History The Walking History sample application uses the Parse database and GeoPoints APIs. It is a React Native application that allows you to walk around New York City (or simulate that in a device emulator) and it tells you about the closest attraction or point of interest.\nHere is what the Walking History application looks like running in the Android emulator:\nTry the Sample To try this sample application, you need the following:"},{"id":21,"href":"/microservices-datadriven/mbaas/getting-started/objects/","title":"Working with Objects","parent":"Getting Started","content":"The Oracle Backend for Parse Platform stores your data in objects. Each object is an instance of a named class. A class has certain properties or fields. You create a class by creating the first object in that class. You define the fields by using them. Once a class has a field with a certain type, you cannot change that field type while objects using it exist.\nCreating an Object The most basic operation that you can do is to create a new object in the database. The following examples use the Representational State Transfer (REST) API to access the Parse Server. To create an object, perform an HTTP POST to the Parse endpoint /parse/classes/ and append the name of the class of the object that you want to create. In this example, the object is GameScore. The content is provided in JavaScript Object Notation (JSON) format. Provide the correct APPLICATION_ID and update the endpoint address to match your environment. For example:\ncurl -X POST \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#39;{\u0026#34;score\u0026#34;:100000,\u0026#34;playerName\u0026#34;:\u0026#34;test user\u0026#34;,\u0026#34;cheatmode\u0026#34;:false}\u0026#39; \\ http://1.2.3.4/parse/classes/GameScore This command creates an entry for GameScore in the schema collection and creates or updates the GameScore collection with your new object. It returns the objectId for the newly created object. For example:\n{\u0026#34;objectId\u0026#34;:\u0026#34;Ts9B8JSBBX\u0026#34;,\u0026#34;createdAt\u0026#34;:\u0026#34;2022-12-12T14:47:28.431Z\u0026#34;} The objectId is the unique identifier for a document in the collection.\nRetrieving an Object To retrieve the newly created object, use the HTTP GET API as shown in the following example. Append the objectId to the end of the URL. Update the command with your APPLICATION_ID and endpoint address. For example:\ncurl -X GET \\ -H \u0026#34;X-Parse-Application-Id: COOLAPPV100\u0026#34; \\ http://1.2.3.4/parse/classes/GameScore/Ts9B8JSBBX # output (formatted): { \u0026#34;score\u0026#34;:100000, \u0026#34;playerName\u0026#34;:\u0026#34;test user\u0026#34;, \u0026#34;cheatmode\u0026#34;:false, \u0026#34;updatedAt\u0026#34;:\u0026#34;2022-12-12T14:47:28.431Z\u0026#34;, \u0026#34;createdAt\u0026#34;:\u0026#34;2022-12-12T14:47:28.431Z\u0026#34;, \u0026#34;objectId\u0026#34;:\u0026#34;Ts9B8JSBBX\u0026#34; } NOTE: You can use any arbitrary string as your APPLICATION_ID. These are used by your clients to authenticate with the Parse Server. During creation of the Oracle Backend for Parse Platform environment, you provided an application ID as a configuration option. If any call to the Parse Server does not use a valid application ID, the call is rejected and returns this error message:\n{\u0026#34;error\u0026#34;:\u0026#34;unauthorized\u0026#34;} More information Learn more about working with objects in the Parse Server documentation.\nNext, go to the Using the Parse Dashboard page to learn how to use the dashboard.\n","description":"The Oracle Backend for Parse Platform stores your data in objects. Each object is an instance of a named class. A class has certain properties or fields. You create a class by creating the first object in that class. You define the fields by using them. Once a class has a field with a certain type, you cannot change that field type while objects using it exist.\nCreating an Object The most basic operation that you can do is to create a new object in the database."}]