# Default values for obaas-app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  # TODO: Set your container image repository (e.g., us-phoenix-1.ocir.io/mytenancy/my-app)
  repository: "REPLACE_WITH_YOUR_IMAGE_REPOSITORY"
  # This sets the pull policy for images.
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  # TODO: Set your image tag/version
  tag: "REPLACE_WITH_YOUR_IMAGE_TAG"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
# TODO: Configure image pull secrets if using a private registry (uncomment and set secret name)
imagePullSecrets: []
#  - name: ocir  # For OCI Registry
#  - name: dockerhub  # For Docker Hub
#  - name: ghcr  # For GitHub Container Registry
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
# Note: metrics path will be set automatically based on framework type
podAnnotations:
  signoz.io/port: "8080"
  signoz.io/scrape: "true"
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8080

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  requests:
    cpu: 100m
  # Framework-specific resource recommendations:
  # Spring Boot: lighter resource usage, minimal requirements
  # Helidon: more explicit resource management recommended
  # limits:
  #   cpu: 500m
  #   memory: 512Mi
  # requests:
  #   cpu: 100m
  #   memory: 256Mi

# Health probes - automatically configured based on framework type
# Leave empty to use framework defaults, or override with custom configuration
livenessProbe: {}
readinessProbe: {}

# Example custom probe configuration (uncomment to override defaults):
# livenessProbe:
#   httpGet:
#     path: /custom/health/live
#     port: 8080
#   initialDelaySeconds: 30
#   periodSeconds: 10
#   timeoutSeconds: 2
#   failureThreshold: 3
# readinessProbe:
#   httpGet:
#     path: /custom/health/ready
#     port: 8080
#   initialDelaySeconds: 10
#   periodSeconds: 10
#   timeoutSeconds: 2
#   failureThreshold: 3
        

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

obaas:
  # TODO: Set to your OBaaS installation namespace
  namespace: REPLACE_WITH_OBAAS_NAMESPACE  # e.g., obaas-cdd, obaas-prod, etc.

  # Framework selection: SPRING_BOOT or HELIDON
  # TODO: Choose your framework (SPRING_BOOT or HELIDON)
  framework: REPLACE_WITH_FRAMEWORK  # Options: SPRING_BOOT or HELIDON

  database:
    enabled: true  # If true, database configuration will be injected
    # TODO: Set the name of your database credentials secret
    credentialsSecret: REPLACE_WITH_DB_CREDENTIALS_SECRET  # e.g., my-app-db-secrets
    # TODO: Set the name of your ADB wallet secret
    walletSecret: REPLACE_WITH_DB_WALLET_SECRET  # e.g., my-app-adb-wallet

  otel:
    enabled: true  # Enable OpenTelemetry tracing and metrics

  # MicroProfile LRA (Long Running Actions)
  mp_lra:
    enabled: false

  # Spring Boot applications (only applies when framework=SPRING_BOOT)
  springboot:
    enabled: false  # Set to true when using SPRING_BOOT framework

  # Helidon applications (only applies when framework=HELIDON)
  helidon:
    enabled: false  # Set to true when using HELIDON framework
    # Helidon-specific configurations
    datasource:
      # TODO: CRITICAL - Must match the datasource name in your Helidon application.yaml
      name: "REPLACE_WITH_DATASOURCE_NAME"  # e.g., "customer", "order", "inventory"
    server:
      host: "0.0.0.0"
    metrics:
      rest_request_enabled: false
    # Application-specific properties (customize for your app)
    app:
      greeting: "Hello"  # Example property - replace with your own

  eureka:
    enabled: true  # Enable Eureka service discovery
