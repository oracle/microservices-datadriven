"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[882],{8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>i});var t=a(6540);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}},9435:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"setup/secrets","title":"Create Required Secrets","description":"Create Required Secrets","source":"@site/docs/setup/secrets.md","sourceDirName":"setup","slug":"/setup/secrets","permalink":"/microservices-datadriven/obaas/docs/setup/secrets","draft":false,"unlisted":false,"editUrl":"https://github.com/oracle/microservices-datadriven/tree/main/docs-source/site/docs/setup/secrets.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Create Required Secrets","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Obtaining installation package","permalink":"/microservices-datadriven/obaas/docs/setup/obtaining"},"next":{"title":"Create Namespace(s) for OBaaS","permalink":"/microservices-datadriven/obaas/docs/setup/namespace"}}');var s=a(4848),r=a(8453);const o={title:"Create Required Secrets",sidebar_position:5},i=void 0,c={},l=[{value:"Create Required Secrets",id:"create-required-secrets",level:2},{value:"Image Pull Secrets",id:"image-pull-secrets",level:3},{value:"OBaaS Password Secrets",id:"obaas-password-secrets",level:3},{value:"Database Credentials Secret",id:"database-credentials-secret",level:3},{value:"OCI Credentials Secret",id:"oci-credentials-secret",level:3}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"create-required-secrets",children:"Create Required Secrets"}),"\n",(0,s.jsx)(n.p,{children:"You must create a few secrets before starting the installation of Helm charts. These secrets contain authentication information that will be needed by the Helm charts. If you're planning to use the External Secrets Operator it must be deployed and configured as part of the pre-requisites for installation."}),"\n",(0,s.jsx)(n.h3,{id:"image-pull-secrets",children:"Image Pull Secrets"}),"\n",(0,s.jsxs)(n.p,{children:["Create an image pull secret to allow pull access to your container repository. This is the repository where application images will be stored. If you are using the recommended OKE, this should be an OCI-R repository in the same compartment and region. This example assumes your tenancy is called ",(0,s.jsx)(n.strong,{children:"maacloud"}),", the region ",(0,s.jsx)(n.strong,{children:"phx.ocir.io"})," and that your tenancy uses IDCS authentication. Adjust the command to match your tenancy:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'kubectl create secret generic ocir \\\n  --from-literal=host=phx.ocir.io/maacloud \\\n  --from-literal=username=maacloud/oracleidentitycloudservice/bob.smith@oracle.com \\\n  --from-literal=password="xyz123xyz" \\\n  --from-literal=email=bob.smith@oracle.com\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"important",children:(0,s.jsx)(n.p,{children:"Your OCI-R password must be an Authentication Token, not the password you use to log into the OCI web console."})}),"\n",(0,s.jsx)(n.p,{children:"You can validate the token by performing a docker login using this command (with your own username and token):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker login phx.ocir.io \n  -u maacloud/oracleidentitycloudservice/bob.smith@company.com \n  -p 'xyz123xyz'\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can verify your secret using this command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl get secret ocir -o yaml\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\ndata:\n  email: bWF...\n  host: cGh...\n  password: KE4...\n  username: bWF...\nkind: Secret\nmetadata:\n  creationTimestamp: "2025-08-17T16:06:14Z"\n  name: ocir\n  namespace: default\n  resourceVersion: "9295"\n  uid: d5fe5b24-fcf1-42d2-a615-28d299acd645\n  type: Opaque\n'})}),"\n",(0,s.jsx)(n.p,{children:"Note that the values are base64 encoded."}),"\n",(0,s.jsx)(n.p,{children:"Create two additional secrets as shown below:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'kubectl create secret generic obaas-registry-login \\\n  --from-literal=registry.username="maacloud/oracleidentitycloudservice/mark.x.nelson@oracle.com" \\\n  --from-literal=registry.password="xyz123xyz" \\\n  --from-literal=registry.push_url="phx.ocir.io/maacloud/obaas-dev"\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'kubectl create secret docker-registry obaas-registry-pull-auth \\\n  --docker-server="phx.ocir.io/maacloud" \\\n  --docker-username="maacloud/oracleidentitycloudservice/mark.x.nelson@oracle.com" \\\n  --docker-password="xyz123xyz" \\\n  --docker-email="mark.x.nelson@oracle.com"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Note that the first secret contains the registry prefix for images that would be created by OBaaS Admin."}),"\n",(0,s.jsx)(n.p,{children:"Confirm you have the following secrets before moving on:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl get secrets\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-log",children:"NAME                      TYPE                            DATA  AGE\nobaas-registry-login      Opaque                          3     29s\nobaas-registry-pull-auth  kubernetes.io/dockerconfigjson  1      8s\nocir                      Opaque                          4     13m\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"If you are planning to install multiple OBaaS instances, AND you want to use different private repositories, you need to create a set of these secrets for EACH instance, and they must have different names."})}),"\n",(0,s.jsx)(n.h3,{id:"obaas-password-secrets",children:"OBaaS Password Secrets"}),"\n",(0,s.jsx)(n.p,{children:"These secrets are used to set the passwords for various OBaaS components. Note that these are not optional in M3. In the final 2.0.0 release, these will be optional, and if you omit them, each component will have a different random password set for it. If you want to use random passwords, see below."}),"\n",(0,s.jsx)(n.p,{children:"Create the secrets using these commands:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'kubectl create secret generic signoz \\\n  --from-literal=email="admin@nodomain.com" \\\n  --from-literal=password=Welcome-12345\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'kubectl create secret generic clickhouse \\\n  --from-literal=username="clickhouse_operator" \\\n  --from-literal=password=Welcome-12345\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'kubectl create secret generic alertmanager \\\n  --from-literal=username="admin" \\\n  --from-literal=password="Welcome-12345"\n'})}),"\n",(0,s.jsx)(n.p,{children:"To use random passwords, instead of specifying a password as shown above, use this form of the command instead:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'kubectl create secret generic signoz \\\n  --from-literal=email="admin@nodomain.com" \\\n  --from-literal=password=\\$(openssl rand -base64 16)\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"If you are planning to install multiple OBaaS instances, AND you want to use different passwords, you need to create a set of these secrets for EACH instance, and they must have different names."})}),"\n",(0,s.jsx)(n.h3,{id:"database-credentials-secret",children:"Database Credentials Secret"}),"\n",(0,s.jsxs)(n.p,{children:["Create a secret to provide OBaaS with the credentials for your database. This example assumes your database is called ",(0,s.jsx)(n.strong,{children:"demo1"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'kubectl create secret generic admin-user-authn \\\n  --from-literal=username=ADMIN \\\n  --from-literal=password="Welcome-12345" \\\n  --from-literal=service="demo1_tp" \\\n  --from-literal=dbname="demo1"\n'})}),"\n",(0,s.jsx)(n.p,{children:"Be careful to get the correct database name and service name, since these will be injected into applications that you deploy using the client side helm chart."}),"\n",(0,s.jsx)(n.p,{children:"Verify your secret looks like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl get secret admin-user-authn -o yaml\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\ndata:\n  dbname: ZGV\\...\n  password: V2V\\...\n  service: ZGV\\...\n  username: QUR\\...\nkind: Secret\nmetadata:\n  creationTimestamp: "2025-08-17T16:26:20Z"\n  name: admin-user-authn\n  namespace: default\n  resourceVersion: "14755"\n  uid: b71f045d-c2dc-4b25-ba6a-ab277ec2d00e\n  type: Opaque\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"If you are planning to install multiple OBaaS instances, AND you want to use different databases, you need to create one of these secrets for EACH instance, and they must have different names."})}),"\n",(0,s.jsx)(n.h3,{id:"oci-credentials-secret",children:"OCI Credentials Secret"}),"\n",(0,s.jsx)(n.p,{children:"Run the provided script to generate the appropriate command for you from your OCI configuration. Note: You must have a working OCI CLI configured with access to your tenancy and the region where you want to install, on the machine where you run this command. The python script generated a command that you need to execute. to create the key."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"python3 ./obaas-db/scripts/oci_config.py\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"echo 'apiVersion: v1\nkind: Secret\nmetadata:\n  name: oci-config-file\n  namespace: default\n  type: Opaque\ndata:\n  config: W0R\\...\n  oci_api_key.pem: LS0\\...\n' \\| kubectl apply -f -\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"important",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The Python script reads the OCI config file and looks for the ",(0,s.jsx)(n.code,{children:"DEFAULT"})," entry to determine the private key file."]}),"\n",(0,s.jsxs)(n.li,{children:["The OCI config file can not have more than one profile and needs to be named ",(0,s.jsx)(n.code,{children:"DEFAULT"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["This script requires your key file to be named ",(0,s.jsx)(n.strong,{children:"oci_api_key.pem"})," - if your key file has a different name, this script will produce an incorrect secret. In that case you would need to edit the name of the second key to make it ",(0,s.jsx)(n.strong,{children:"oci_api_key.pem"})," and update the value of the first key (config) to include that name. To update that value, you need to base64 decode it, update the plaintext, then base64 encode that."]}),"\n"]})}),"\n",(0,s.jsx)(n.p,{children:"Once you have the correct command, run that command to create the secret. Then check your secret looks correct using this command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"kubectl get secret oci-config-file -o yaml\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\ndata:\n  config: W0R\\...\n  oci_api_key.pem: LS0\\...\nkind: Secret\n...\n"})}),"\n",(0,s.jsx)(n.p,{children:"You should also base64 decode the values to check that they are correct. For example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'echo -n "W0R\\... " \\| base64 -d\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-log",children:"[DEFAULT]\nuser=ocid1.user.oc1..aaaaaaaaxyzxyzxyz\nfingerprint=d0:b5:60:bd:27:2b:...\ntenancy=ocid1.tenancy.oc1..aaaaaaaaxyzxyzxyz\nregion=us-phoenix-1\nkey_file=/app/runtime/.oci/oci_api_key.pem\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Important note"}),": We recommend taking extra care to ensure these are all correct before moving on to the next step. If there are any errors here, the injection of the Database configuration will fail."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),":  If you are planning to install multiple OBaaS instances, AND you want to use different OCI credentials, you need to create one of these secrets for EACH instance, and they must have different names."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);