"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[748],{2322:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>i});const s=JSON.parse('{"id":"deploy/dbaccess","title":"Application Database Access","description":"Application Database Access","source":"@site/docs/deploy/dbaccess.md","sourceDirName":"deploy","slug":"/deploy/dbaccess","permalink":"/microservices-datadriven/obaas/docs/deploy/dbaccess","draft":false,"unlisted":false,"editUrl":"https://github.com/oracle/microservices-datadriven/tree/main/docs-source/site/docs/deploy/dbaccess.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Application Database Access","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction and Installation Flow","permalink":"/microservices-datadriven/obaas/docs/deploy/introflow"},"next":{"title":"Build and Push the application","permalink":"/microservices-datadriven/obaas/docs/deploy/buildpushapp"}}');var t=a(4848),c=a(8453);const r={title:"Application Database Access",sidebar_position:2},o=void 0,l={},i=[{value:"Application Database Access",id:"application-database-access",level:2},{value:"Create the secret for the application",id:"create-the-secret-for-the-application",level:3},{value:"Create database user using <code>sqljob.yaml</code> k8s job",id:"create-database-user-using-sqljobyaml-k8s-job",level:3},{value:"Example <code>sqljob.yaml</code>",id:"example-sqljobyaml",level:4}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"application-database-access",children:"Application Database Access"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"This step is only necessary if your application is connecting to a database."})}),"\n",(0,t.jsx)(n.p,{children:"If your application needs database access, first obtain the database user credentials. Then create a Kubernetes secret containing those credentials. The secret is referenced in your application deployment."}),"\n",(0,t.jsx)(n.h3,{id:"create-the-secret-for-the-application",children:"Create the secret for the application"}),"\n",(0,t.jsx)(n.p,{children:"Create a secret with database access information. This secret is used by the application configuration and is injected during deployment."}),"\n",(0,t.jsx)(n.p,{children:"For example if you have the following information:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["name: ",(0,t.jsx)(n.code,{children:"Your database name"}),". For example ",(0,t.jsx)(n.code,{children:"helmdb"})]}),"\n",(0,t.jsxs)(n.li,{children:["username: ",(0,t.jsx)(n.code,{children:"Your database user name"}),". For example ",(0,t.jsx)(n.code,{children:"phonebook"})]}),"\n",(0,t.jsxs)(n.li,{children:["password: ",(0,t.jsx)(n.code,{children:"Your database user password"}),". For example ",(0,t.jsx)(n.code,{children:"Welcome-12345"})]}),"\n",(0,t.jsxs)(n.li,{children:["service: ",(0,t.jsx)(n.code,{children:"Your servicename"}),". For example ",(0,t.jsx)(n.code,{children:"helmdb_tp"})]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Create a Kubernetes secret (in this example, ",(0,t.jsx)(n.code,{children:"phonebook-db-secrets"})," in the ",(0,t.jsx)(n.code,{children:"obaas-dev"})," namespace):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl -n obaas-dev create secret generic phonebook-db-secrets \\\n  --from-literal=name=helmdb \\\n  --from-literal=username=phonebook \\\n  --from-literal=password=Welcome-12345 \\\n  --from-literal=service=helmdb_tp\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can verify the values by running the following command (this is for the ",(0,t.jsx)(n.code,{children:"username"})," value):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"kubectl -n obaas-dev get secret phonebook-sb-secrets -o jsonpath='{.data.username}' | base64 -d\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"create-database-user-using-sqljobyaml-k8s-job",children:["Create database user using ",(0,t.jsx)(n.code,{children:"sqljob.yaml"})," k8s job"]}),"\n",(0,t.jsx)(n.p,{children:"Use this job to run SQL statements against the database with the credentials stored in the secret above."}),"\n",(0,t.jsxs)(n.p,{children:["Set the namespace to where the ",(0,t.jsx)(n.code,{children:"obaas-db-secret"})," secret resides (example uses ",(0,t.jsx)(n.code,{children:"obaas-dev"}),"):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"metadata:\n  generateName: sqlcl-runner-job-\n  namespace: obaas-dev\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Update the ",(0,t.jsx)(n.code,{children:"args:"})," section with your SQL:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"args:\n  - |\n  export TNS_ADMIN=/etc/oracle/wallet\n\n  # Create the SQL script inline\n  cat > /tmp/run.sql << 'EOF'\n  SET SERVEROUTPUT ON;\n  WHENEVER SQLERROR EXIT SQL.SQLCODE;\n\n  <<SQL STATEMENTS>>\n\n  EXIT;\n  EOF\n\n  # Execute the SQL script\n  sql $(DB_USER)/$(DB_PASSWORD)@$(TNS_ALIAS) @/tmp/run.sql\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Update the ",(0,t.jsx)(n.code,{children:"env:"})," section to reference the correct secret and keys (here using ",(0,t.jsx)(n.code,{children:"obaas-db-secrets"}),"):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"env:\n- name: DB_USER\n  valueFrom:\n    secretKeyRef:\n      name: obaas-db-secret\n      key: db.username\n- name: DB_PASSWORD\n  valueFrom:\n    secretKeyRef:\n      name: obaas-db-secret\n      key: db.password\n- name: TNS_ALIAS\n  valueFrom:\n    secretKeyRef:\n      name: obaas-db-secret\n      key: db.service\n"})}),"\n",(0,t.jsx)(n.p,{children:"Set the TNS Admin wallet secret name to match your OBaaS installation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"volumes:\n- name: db-wallet-volume\n  secret:\n    secretName: obaas-adb-tns-admin-1\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Execute ",(0,t.jsx)(n.code,{children:"kubectl create -f sqljob.yaml"})," to create the kubernetes job."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-log",children:"job.batch/sqlcl-runner-job-2vcrq created\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can verify that the Job ran successfully by checking its logs."}),"\n",(0,t.jsxs)(n.h4,{id:"example-sqljobyaml",children:["Example ",(0,t.jsx)(n.code,{children:"sqljob.yaml"})]}),"\n",(0,t.jsxs)(n.p,{children:["This is an example of a kubernetes job that creates a ",(0,t.jsx)(n.code,{children:"phonebook"})," user and assigns roles to the user."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# The Job to run the SQLcl container with embedded SQL\napiVersion: batch/v1\nkind: Job\nmetadata:\n  generateName: sqlcl-runner-job-\n  namespace: obaas-dev\nspec:\n  backoffLimit: 2\n  template:\n    spec:\n      restartPolicy: Never\n      containers:\n      - name: sqlcl-container\n        image: container-registry.oracle.com/database/sqlcl:latest\n        command: ["/bin/sh", "-c"]\n        args:\n        - |\n          export TNS_ADMIN=/etc/oracle/wallet\n          \n          # Create the SQL script inline\n          cat > /tmp/run.sql << \'EOF\'\n          SET SERVEROUTPUT ON;\n          WHENEVER SQLERROR EXIT SQL.SQLCODE;\n          \n          create user if not exists phonebook identified by "Welcome-12345";\n          grant db_developer_role to phonebook;\n          grant unlimited tablespace to phonebook;\n          commit;\n\n          /\n          EXIT;\n          EOF\n          \n          # Execute the SQL script\n          sql $(DB_USER)/$(DB_PASSWORD)@$(TNS_ALIAS) @/tmp/run.sql\n        env:\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              name: obaas-db-secret\n              key: db.username\n        - name: DB_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: obaas-db-secret\n              key: db.password\n        - name: TNS_ALIAS\n          valueFrom:\n            secretKeyRef:\n              name: obaas-db-secret\n              key: db.service\n        volumeMounts:\n        - name: db-wallet-volume\n          mountPath: /etc/oracle/wallet\n          readOnly: true\n      volumes:\n      - name: db-wallet-volume\n        secret:\n          secretName: obaas-adb-tns-admin-1\n'})})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>o});var s=a(6540);const t={},c=s.createContext(t);function r(e){const n=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);