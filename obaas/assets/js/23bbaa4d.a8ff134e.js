"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[628],{4584:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"observability/configure","title":"Configure Applications for SigNoz","description":"Configure applications for SigNoz Observability","source":"@site/docs/observability/configure.md","sourceDirName":"observability","slug":"/observability/configure","permalink":"/microservices-datadriven/obaas/docs/observability/configure","draft":false,"unlisted":false,"editUrl":"https://github.com/oracle/microservices-datadriven/tree/main/docs-source/site/docs/observability/configure.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Configure Applications for SigNoz","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Pre-installed dashboards","permalink":"/microservices-datadriven/obaas/docs/observability/dashboards"},"next":{"title":"Oracle Database Metrics Exporter","permalink":"/microservices-datadriven/obaas/docs/observability/dbexporter"}}');var o=t(4848),i=t(8453);const a={title:"Configure Applications for SigNoz",sidebar_position:5},s=void 0,c={},d=[{value:"Configure applications for SigNoz Observability",id:"configure-applications-for-signoz-observability",level:2},{value:"Configure OpenTelemetry and Micrometer",id:"configure-opentelemetry-and-micrometer",level:3},{value:"Configure Datasource Observability",id:"configure-datasource-observability",level:3},{value:"Configure Spring Boot Actuator",id:"configure-spring-boot-actuator",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"configure-applications-for-signoz-observability",children:"Configure applications for SigNoz Observability"}),"\n",(0,o.jsx)(n.p,{children:"In order for SigNoz to be able to collect logs, metrics and traces from applications, some configurations are required to be added."}),"\n",(0,o.jsx)(n.h3,{id:"configure-opentelemetry-and-micrometer",children:"Configure OpenTelemetry and Micrometer"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://opentelemetry.io/docs/zero-code/java/spring-boot-starter/getting-started/",children:"OpenTelemetry zero-code instrumentation"})," enables adding observability to Spring Boot based applications without changing any code. Similarly ",(0,o.jsx)(n.a,{href:"https://docs.micrometer.io/micrometer/reference/observation/projects.html",children:"Micrometer"})," enables instrumentation of JVM based applications and can be configured using Spring Boot starters."]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"The versions in the below pom.xml might be outdated."})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:"<dependencies>\n    <dependency>\n        <groupId>io.micrometer</groupId>\n        <artifactId>micrometer-core</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>io.micrometer</groupId>\n        <artifactId>micrometer-registry-prometheus</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>io.micrometer</groupId>\n        <artifactId>micrometer-tracing-bridge-otel</artifactId>\n        <exclusions>\n            <exclusion>\n                <groupId>io.opentelemetry.instrumentation</groupId>\n                <artifactId>opentelemetry-instrumentation-api-incubator</artifactId>\n            </exclusion>\n        </exclusions>\n    </dependency>\n    <dependency>\n        <groupId>io.opentelemetry</groupId>\n        <artifactId>opentelemetry-exporter-otlp</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>io.micrometer</groupId>\n        <artifactId>micrometer-tracing</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>io.opentelemetry.instrumentation</groupId>\n        <artifactId>opentelemetry-spring-boot-starter</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>net.ttddyy.observation</groupId>\n        <artifactId>datasource-micrometer-spring-boot</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>com.oracle.database.spring</groupId>\n        <artifactId>oracle-spring-boot-starter-ucp</artifactId>\n        <type>pom</type>\n    </dependency>\n    <dependency>\n        <groupId>io.opentelemetry.instrumentation</groupId>\n        <artifactId>opentelemetry-oracle-ucp-11.2</artifactId>\n    </dependency>\n</dependencies>\n\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>io.opentelemetry.instrumentation</groupId>\n            <artifactId>opentelemetry-instrumentation-bom</artifactId>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.micrometer</groupId>\n            <artifactId>micrometer-tracing-bom</artifactId>\n            <version>${micrometer-tracing.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n"})}),"\n",(0,o.jsx)(n.h3,{id:"configure-datasource-observability",children:"Configure Datasource Observability"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://github.com/jdbc-observations/datasource-micrometer",children:"datasource-micrometer"})," and ",(0,o.jsx)(n.a,{href:"https://github.com/open-telemetry/opentelemetry-java-instrumentation/tree/main/instrumentation/oracle-ucp-11.2",children:"Oracle Universal Connection Pool Instrumentation"})," can be configured to enable observability for Database connections and queries."]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"The versions in the below pom.xml might be outdated."})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:"<dependencies>\n    <dependency>\n        <groupId>net.ttddyy.observation</groupId>\n        <artifactId>datasource-micrometer-spring-boot</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>io.opentelemetry.instrumentation</groupId>\n        <artifactId>opentelemetry-oracle-ucp-11.2</artifactId>\n    </dependency>\n</dependencies>\n"})}),"\n",(0,o.jsx)(n.h3,{id:"configure-spring-boot-actuator",children:"Configure Spring Boot Actuator"}),"\n",(0,o.jsx)(n.p,{children:"When you deploy an application with Oracle Backend for Microservices and AI CLI or Visual Code Extension, provided you included the Spring Actuator in your application, SigNoz will automatically find your application (using the annotations) and start collecting metrics. These metrics will be included in both the Spring Boot Observability dashboard and the Spring Boot Statistic dashboard automatically."}),"\n",(0,o.jsx)(n.p,{children:"To include the Actuator in your application, add the following dependencies to your Maven POM or equivalent:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You must also add the configuration similar to one given below, after customizing it for your application, to your Spring ",(0,o.jsx)(n.code,{children:"application.yaml"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'spring:\n  threads:\n    virtual:\n      enabled: true\n  jpa:\n    hibernate:\n      ddl-auto: validate\n    properties:\n      hibernate:\n        dialect: org.hibernate.dialect.OracleDialect\n        format_sql: true\n    show-sql: true\n\neureka:\n  instance:\n    hostname: ${spring.application.name}\n    preferIpAddress: true\n  client:\n    service-url:\n      defaultZone: ${eureka.service-url}\n    fetch-registry: true\n    register-with-eureka: true\n    enabled: true\n\nmanagement:\n  endpoint:\n    health:\n      show-details: always\n      show-components: always\n  endpoints:\n    web:\n      exposure:\n        include: "*"\n  metrics:\n    tags:\n      application: ${spring.application.name}\n    distribution:\n      percentiles[http.server.requests]: 0.5, 0.90, 0.95, 0.99\n      percentiles-histogram[http.server.requests]: true\n      slo[http.server.requests]: 100ms, 250ms, 500ms, 1s, 2s, 5s, 10s, 30s\n      percentiles[http.client.requests]: 0.5, 0.90, 0.95, 0.99\n      percentiles-histogram[http.client.requests]: true\n      slo[http.client.requests]: 100ms, 250ms, 500ms, 1s, 2s, 5s, 10s, 30s\n  health:\n    probes:\n      enabled: true\n  tracing:\n    sampling:\n      probability: 1.0\n  info:\n    os:\n      enabled: true\n    env:\n      enabled: true\n    java:\n      enabled: true\n  observations:\n    key-values:\n      app: ${spring.application.name}\n\nlogging:\n  level:\n    root: INFO\n    com.example: INFO\n    org.springframework.web.filter.AbstractRequestLoggingFilter: INFO\n\njdbc:\n  datasource-proxy:\n    query:\n      enable-logging: true\n      log-level: INFO\n    include-parameter-values: true\n'})}),"\n",(0,o.jsx)(n.p,{children:"The Oracle Backend for Microservices and AI platform adds following annotations to your application pods for SigNoz to start scraping the actuator endpoint for metrics."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'signoz.io/path: /actuator/prometheus\nsignoz.io/port: "8080"\nsignoz.io/scrape: "true"\n'})}),"\n",(0,o.jsxs)(n.p,{children:["It also adds the ",(0,o.jsx)(n.code,{children:"OTEL_EXPORTER_OTLP_ENDPOINT"})," to pod environment variables for the OpenTelemetry instrumentation libraries to access the the OpenTelemtry collector of SigNoz."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"- name: OTEL_EXPORTER_OTLP_ENDPOINT\n  value: http://obaas-signoz-otel-collector.observability:4318\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(6540);const o={},i=r.createContext(o);function a(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);