<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oracle Backend for Microservices and AI</title>
    <link>https://oracle.github.io/microservices-datadriven/spring/</link>
    <description>Recent content on Oracle Backend for Microservices and AI</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://oracle.github.io/microservices-datadriven/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Development Environment Setup</title>
      <link>https://oracle.github.io/microservices-datadriven/spring/development/setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/spring/development/setup/</guid>
      <description>&lt;p&gt;This page provides details on how to set up your development environment to work with Oracle Backend for Microservices and AI.&lt;/p&gt;&#xA;&lt;p&gt;The following platforms are recommended for a development environment:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Microsoft Windows 10 or 11, preferably with Windows Subsystem for Linux 2&lt;/li&gt;&#xA;&lt;li&gt;macOS (11 or later recommended) on Intel or Apple silicon&lt;/li&gt;&#xA;&lt;li&gt;Linux, for example Oracle Linux, Ubuntu, and so on.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The following tools are recommended for a development environment:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Oracle Spring Boot Starter for AQ/JMS</title>
      <link>https://oracle.github.io/microservices-datadriven/spring/starters/aqjms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/spring/starters/aqjms/</guid>
      <description>&lt;p&gt;This starter provides support for Oracle Transactional Event Queues (TxEventQ) and Oracle Advanced Queuing (AQ)&#xA;as Java Message Service (JMS) providers.  It depends on the Universal Connection Pool (UCP) starter.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: By default, the data Source and JMS Connection Factory that the starter injects into&#xA;your application share the same database transaction.  This means that you can start a&#xA;transaction, read from a queue, perform an update operation, and then commit or rollback that&#xA;whole unit of work, including the message consumption.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Oracle Spring Boot Starter for Universal Connection Pool</title>
      <link>https://oracle.github.io/microservices-datadriven/spring/starters/ucp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/spring/starters/ucp/</guid>
      <description>&lt;p&gt;This starter provides a connection (data source) to an Oracle Database using Universal Connection Pool, which provides an efficient way to use database connections.&lt;/p&gt;&#xA;&lt;p&gt;To add this starter to your project, add this Maven dependency:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.oracle.database.spring&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;oracle-spring-boot-starter-ucp&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;23.4.0&lt;span class=&#34;nt&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For Gradle projects, add this dependency:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gradle&#34; data-lang=&#34;gradle&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;com.oracle.database.spring:oracle-spring-boot-starter-ucp:23.4.0&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;An Oracle data source is injected into your application and can be used normally. You must configure the data source as shown below, and you should also add either Spring Data JDBC or Spring Data JPA to your project.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Oracle Spring Boot Starter for Wallet</title>
      <link>https://oracle.github.io/microservices-datadriven/spring/starters/wallet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/spring/starters/wallet/</guid>
      <description>&lt;p&gt;This starter provides support for wallet-based authentication for Oracle Database connections.  It depends&#xA;on the UCP starter.&lt;/p&gt;&#xA;&lt;p&gt;To add this starter to your project, add this Maven dependency:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.oracle.database.spring&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;oracle-spring-boot-starter-wallet&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;23.4.0&lt;span class=&#34;nt&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For Gradle projects, add this dependency:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gradle&#34; data-lang=&#34;gradle&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;com.oracle.database.spring:oracle-spring-boot-starter-wallet:23.4.0&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You need to provide the wallet to your application.  You can specify the location in the &lt;code&gt;spring.datasource.url&lt;/code&gt;&#xA;as shown in the following example.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jdbc:oracle:thin:@mydb_tp?TNS_ADMIN=/oracle/tnsadmin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that the location specified in the &lt;code&gt;sqlnet.ora&lt;/code&gt; must match the actual location of the file.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Predefined Variables</title>
      <link>https://oracle.github.io/microservices-datadriven/spring/development/envvars/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/spring/development/envvars/</guid>
      <description>&lt;p&gt;When you deploy a Spring Boot application using the Oracle Backend for Microservices and AI CLI or Visual Code extension, a number of predefined environment variables will be injected into the pod definition. You may reference any of these variables in your application.&lt;/p&gt;&#xA;&lt;p&gt;The predefined variables are as follows:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;app.container.port&lt;/code&gt;, for example &lt;code&gt;8080&lt;/code&gt;.&lt;br&gt;&#xA;This sets the listen port for the pod and service.  The Spring Boot application will listen on this port.  The default is &lt;code&gt;8080&lt;/code&gt;.  This can be set using the &lt;code&gt;--port&lt;/code&gt; parameter on the &lt;code&gt;deploy&lt;/code&gt; command in the CLI.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;spring.profiles.active&lt;/code&gt;, for example &lt;code&gt;default&lt;/code&gt;.&lt;br&gt;&#xA;This sets the Spring profiles that will be active in the application.  The default value is &lt;code&gt;default&lt;/code&gt;.  This can be changed set the &lt;code&gt;--service-profile&lt;/code&gt; parameter on the &lt;code&gt;deploy&lt;/code&gt; command in the CLI.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;spring.config.label&lt;/code&gt;, for example &lt;code&gt;0.0.1&lt;/code&gt;.&lt;br&gt;&#xA;This is a label that can be used with Spring Config to look up externalized configuration from Spring Config Server, along with the application name and the profile.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;eureka.instance.preferIpAddress&lt;/code&gt;, for example &lt;code&gt;true&lt;/code&gt;.&lt;br&gt;&#xA;This tells the Eureka discovery client to use the &lt;code&gt;preferIpAddress&lt;/code&gt; setting.  This is required in Kubernetes so that service discover will work correctly.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;eureka.instance.hostname&lt;/code&gt;, for example &lt;code&gt;customer32.application&lt;/code&gt;.&lt;br&gt;&#xA;This sets the hostname that Eureka will use for this application.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;MP_LRA_COORDINATOR_URL&lt;/code&gt;, for example &lt;code&gt;http://otmm-tcs.otmm.svc.cluster.local:9000/api/v1/lra-coordinator&lt;/code&gt;.&lt;br&gt;&#xA;This is the URL for the transaction manager which is required when using Eclipse Microprofile Long Running Actions in your application.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;MP_LRA_PARTICIPANT_URL&lt;/code&gt;, for example &lt;code&gt;http://customer32.application.svc.cluster.local:8080&lt;/code&gt;.&lt;br&gt;&#xA;This is the participant URL which is required when using Eclipse Microprofile Long Running Actions in your application.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;eureka.client.register-with-eureka&lt;/code&gt;, for example &lt;code&gt;true&lt;/code&gt;.&lt;br&gt;&#xA;This tells the Eureka discovery client to register with the Eureka server.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;eureka.client.fetch-registry&lt;/code&gt;, for example &lt;code&gt;true&lt;/code&gt;.&lt;br&gt;&#xA;This tells the Eureka discovery client to make a local copy of the registry by fetching it from the Eureka server.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;eureka.client.service-url.defaultZone&lt;/code&gt;, for example &lt;code&gt;http://eureka.eureka:8761/eureka&lt;/code&gt;.&lt;br&gt;&#xA;This is the default zone for the Eureka discovery client.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;zipkin.base-url&lt;/code&gt;, for example &lt;code&gt;http://jaegertracing-collector.observability.svc.cluster.local:9411/api/v2/spans&lt;/code&gt;.&lt;br&gt;&#xA;This is the URL of the Zipkin-compatible trace collector which can be used by your application to send trace data to the platform.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;otel.exporter.otlp.endpoint&lt;/code&gt;, for example &lt;code&gt;http://open-telemetry-opentelemetry-collector.open-telemetry:4318/v1/traces&lt;/code&gt;.&lt;br&gt;&#xA;This is the URL of the OpenTelemetry (OTLP protocol) trace collector which can be used by your application to send trace data to the platform.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;config.server.url&lt;/code&gt;, for example &lt;code&gt;http://config-server.config-server.svc.cluster.local:8080&lt;/code&gt;.&lt;br&gt;&#xA;This is the URL of the Spring Config Server provided by the platform.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;liquibase.datasource.username&lt;/code&gt;, for example set to the key &lt;code&gt;db.username&lt;/code&gt; in secret &lt;code&gt;admin-liquibasedb-secrets&lt;/code&gt;.&lt;br&gt;&#xA;This sets the (admin) user that should be used to run Liquibase, if used in your service.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;liquibase.datasource.password&lt;/code&gt;, for example set to the key &lt;code&gt;db.password&lt;/code&gt; in secret &lt;code&gt;admin-liquibasedb-secrets&lt;/code&gt;.&lt;br&gt;&#xA;This sets the (admin) user&amp;rsquo;s password that should be used to run Liquibase, if used in your service.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;spring.datasource.username&lt;/code&gt;, for example set to the key &lt;code&gt;db.username&lt;/code&gt; in secret &lt;code&gt;customer32-db-secrets&lt;/code&gt;.&lt;br&gt;&#xA;This sets the (regular) user for your application to use to connect to the database (if you use JPA or JDBC in your application).&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;spring.datasource.password&lt;/code&gt;:, for example set to the key &lt;code&gt;db.password&lt;/code&gt; in secret &lt;code&gt;customer32-db-secrets&lt;/code&gt;.&lt;br&gt;&#xA;This sets the (regular) user&amp;rsquo;s password for your application to use to connect to the database (if you use JPA or JDBC in your application).&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;DB_SERVICE&lt;/code&gt;, for example set to the key &lt;code&gt;db.service&lt;/code&gt; in secret &lt;code&gt;customer32-db-secrets&lt;/code&gt;.&lt;br&gt;&#xA;This sets the database service name (the TNS name) for your application to use to connect to the database (if you use JPA or JDBC in your application).&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;spring.datasource.url&lt;/code&gt;, for example &lt;code&gt;jdbc:oracle:thin:@$(DB_SERVICE)?TNS_ADMIN=/oracle/tnsadmin&lt;/code&gt;.&lt;br&gt;&#xA;This sets the data source URL for your application to use to connect to the database (if you use JPA or JDBC in your application).&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;CONNECT_STRING&lt;/code&gt;, for example &lt;code&gt;jdbc:oracle:thin:@$(DB_SERVICE)?TNS_ADMIN=/oracle/tnsadmin&lt;/code&gt;.&lt;br&gt;&#xA;This sets the data source URL for your application to use to connect to the database (if you use JPA or JDBC in your application).&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Project Structure</title>
      <link>https://oracle.github.io/microservices-datadriven/spring/development/project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/spring/development/project/</guid>
      <description>&lt;p&gt;To take advantage of the built-in platform services, Oracle recommends using the following project structure.&lt;/p&gt;&#xA;&lt;p&gt;Recommended versions:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Spring Boot 3.3.x&lt;/li&gt;&#xA;&lt;li&gt;Spring Cloud 2023.x.x&lt;/li&gt;&#xA;&lt;li&gt;Java 21 (or 17)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Table of Contents:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a&#xA;  class=&#34;gdoc-markdown__link&#34;&#xA;  href=&#34;#dependencies&#34;&#xA;&gt;Dependencies&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a&#xA;  class=&#34;gdoc-markdown__link&#34;&#xA;  href=&#34;#spring-application-configuration&#34;&#xA;&gt;Spring Application Configuration&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a&#xA;  class=&#34;gdoc-markdown__link&#34;&#xA;  href=&#34;#data-sources&#34;&#xA;&gt;Data Sources&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a&#xA;  class=&#34;gdoc-markdown__link&#34;&#xA;  href=&#34;#liquibase&#34;&#xA;&gt;Liquibase&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a&#xA;  class=&#34;gdoc-markdown__link&#34;&#xA;  href=&#34;#oracle-transaction-manager-for-microservices&#34;&#xA;&gt;Oracle Transaction Manager for Microservices&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a&#xA;  class=&#34;gdoc-markdown__link&#34;&#xA;  href=&#34;#spring-config-server&#34;&#xA;&gt;Spring Config Server&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a&#xA;  class=&#34;gdoc-markdown__link&#34;&#xA;  href=&#34;#tracing&#34;&#xA;&gt;Tracing&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;gdoc-page__anchorwrap&#34;&gt;&#xA;    &lt;h2 id=&#34;dependencies&#34;&gt;&#xA;        Dependencies&#xA;        &lt;a data-clipboard-text=&#34;https://oracle.github.io/microservices-datadriven/spring/development/project/#dependencies&#34; class=&#34;gdoc-page__anchor clip flex align-center&#34; title=&#34;Anchor to: Dependencies&#34; aria-label=&#34;Anchor to: Dependencies&#34; href=&#34;#dependencies&#34;&gt;&#xA;            &lt;svg class=&#34;gdoc-icon gdoc_link&#34;&gt;&lt;use xlink:href=&#34;#gdoc_link&#34;&gt;&lt;/use&gt;&lt;/svg&gt;&#xA;        &lt;/a&gt;&#xA;    &lt;/h2&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;Oracle recommends adding the following dependencies to your application so that it can take advantage of the built-in platform services. For example:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
