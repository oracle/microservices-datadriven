[{"id":0,"href":"/microservices-datadriven/spring/observability/tracing/","title":"Jaeger Tracing","parent":"Observability","content":"Jaeger is a distributed tracing system used for monitoring and troubleshooting Microservices. For more information on Jaeger, see the Jaeger website.\nView Application Traces in Jaeger Web User Interface Expose the Jaeger web user interface using this command:\nkubectl -n observability port-forward svc/jaegertracing-query 16686:16686 Open the Jaeger web user interface URL: http://localhost:16686\nJaeger UI In the Jaeger web user interface, click the Search tab to find tracings using various search criteria. For example, to find traces for the customer Microservice included in the Sample Applications:\na. If you deployed the Sample Applications, exposing the customer service through the Apache APISIX Gateway and called it at least once, you can find traces for it in Jaeger.\nb. Select the Service customer and the Operation /api/v1/customers .\nc. Click on Find Traces. Several traces appear (one for each time that you invoked the service).\n\u0026lt;!-- spellchecker-disable --\u0026gt; Jaeger Customer Tracing \u0026lt;!-- spellchecker-enable --\u0026gt; d. Click on any one of them to view the trace that includes multiple services and extends into Oracle Database and Oracle Advanced Queuing. For example:\n\u0026lt;!-- spellchecker-disable --\u0026gt; Jaeger Customer Tracing Details \u0026lt;!-- spellchecker-enable --\u0026gt; Next, go to the Security page to learn more.\n","description":"Jaeger is a distributed tracing system used for monitoring and troubleshooting Microservices. For more information on Jaeger, see the Jaeger website.\nView Application Traces in Jaeger Web User Interface Expose the Jaeger web user interface using this command:\nkubectl -n observability port-forward svc/jaegertracing-query 16686:16686 Open the Jaeger web user interface URL: http://localhost:16686\nJaeger UI In the Jaeger web user interface, click the Search tab to find tracings using various search criteria."},{"id":1,"href":"/microservices-datadriven/spring/development/","title":"Development","parent":"Oracle Backend for Spring Boot - Developer Preview","content":"","description":""},{"id":2,"href":"/microservices-datadriven/spring/on-premises/macos_ventura/","title":"Macos Ventura","parent":"On-Premises","content":" On-Premises Installation - macOS Ventura (x86) This is a discussion of an installation on a macOS Venture desktop.\nRead the On-Premises documentation and ensure that your desktop meets the minimum system requirements.\nInstall Podman To install Podman, process these commands:\nbrew install podman PODMAN_VERSION=$(podman -v |awk \u0026#39;{print $NF}\u0026#39;) sudo /usr/local/Cellar/podman/${PODMAN_VERSION}/bin/podman-mac-helper install podman machine init --cpus 4 --disk-size 60 --memory 8192 --rootful --now podman system connection default podman-machine-default-root Download the Database or Oracle REST Data Services (ORDS) Images The Desktop installation provisions an Oracle database into the Kubernetes cluster. The images must be downloaded from Oracle Cloud Infrastructure Registry (Container Registry) before continuing.\nLog in to the Container Registry. For example:\npodman login container-registry.oracle.com\nPull the database image. For example:\npodman pull container-registry.oracle.com/database/enterprise:21.3.0.0\nPull the ORDS image. For example:\npodman pull container-registry.oracle.com/database/ords:21.4.2-gh\nMinikube To install Minikube, process these commands:\nbrew install minikube minikube config set driver podman minikube start --cpus 4 --memory max --container-runtime=containerd minikube addons enable ingress If Minikube fails to start and returns this Failed kubeconfig update: could not read config error, process this command and retry:\nmv ~/.kube ~/.kube.bak\nDownload Oracle Backend for Spring Boot Download the Oracle Backend for Spring Boot and unzip into a new directory.\nInstall Ansible To install Ansible, process these commands:\n./setup_ansible.sh source ./activate.env Define the Infrastructure Use the Helper Playbook to define the infrastructure. This Playbook also:\nCreates additional namespaces for the Container Registry and the database. Creates a private Container Registry in the Kubernetes cluster. Modifies the Microservices application to be desktop compatible. Run this command:\nansible-playbook ansible/desktop_apply.yaml\nOpen a Tunnel In order to push the images to the Container Registry in the Kubernetes cluster, open a new terminal and start a tunnel by running this command:\nminikube tunnel\nTo test access to the registry, process this command:\ncurl -X GET -k https://localhost:5000/v2/_catalog\nThis curl command should result in the following:\n{\u0026#34;errors\u0026#34;:[{\u0026#34;code\u0026#34;:\u0026#34;UNAUTHORIZED\u0026#34;,\u0026#34;message\u0026#34;:\u0026#34;authentication required\u0026#34;,\u0026#34;detail\u0026#34;:[{\u0026#34;Type\u0026#34;:\u0026#34;registry\u0026#34;,\u0026#34;Class\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;Name\u0026#34;:\u0026#34;catalog\u0026#34;,\u0026#34;Action\u0026#34;:\u0026#34;*\u0026#34;}]}]} Build the Images Build and push the images to the Container Registry in the Kubernetes cluster by running this command:\nansible-playbook ansible/images_build.yaml\nAfter the images are built and pushed, the tunnel is no longer required and can be stopped.\nDeploy Oracle Backend for Spring Boot Deploy the database and Microservices by running this command:\nansible-playbook ansible/k8s_apply.yaml -t full\nNotes VPN and Proxies If you are behind a virtual private network (VPN) or proxy, see https://minikube.sigs.k8s.io/docs/handbook/vpn_and_proxy/ for more details on additional tasks.\nNext, go to the Oracle Linux 8 (x86) page to learn more.\n","description":"On-Premises Installation - macOS Ventura (x86) This is a discussion of an installation on a macOS Venture desktop.\nRead the On-Premises documentation and ensure that your desktop meets the minimum system requirements.\nInstall Podman To install Podman, process these commands:\nbrew install podman PODMAN_VERSION=$(podman -v |awk \u0026#39;{print $NF}\u0026#39;) sudo /usr/local/Cellar/podman/${PODMAN_VERSION}/bin/podman-mac-helper install podman machine init --cpus 4 --disk-size 60 --memory 8192 --rootful --now podman system connection default podman-machine-default-root Download the Database or Oracle REST Data Services (ORDS) Images The Desktop installation provisions an Oracle database into the Kubernetes cluster."},{"id":3,"href":"/microservices-datadriven/spring/platform/apigw/","title":"API Gateway","parent":"Platform Services","content":"Apache APISIX is an open source cloud native API platform that supports the full lifecycle of API management including publishing, traffic management, deployment strategies, and circuit breakers.\nDeploy and Secure Sample Application APIs using Apache APISIX Oracle Backend for Spring Boot deploys Apache APISIX Gateway and Dashboard in the apisix namespace. The gateway is exposed through the external load balancer and ingress controller. To access the Apache APISIX Dashboard, you must use the kubectl port-forward command to create a secure channel to service/apisix-dashboard. Process the following steps:\nTo expose the Apache APISIX Dashboard using this command:\nkubectl port-forward -n apisix svc/apisix-dashboard 8080:80 Open the Apache APISIX Dashboard URL: http://localhost:8080\nusername: admin password: admin NOTE: Oracle recommends that you change the default password when you log in the first time. Even though the dashboard is not accessible externally, Oracle still recommends using strong passwords to maximize security.\nAPISIX Login Exposing a Spring Application Through the API Gateway and Load Balancer Once you have your application deployed and running, you may want to expose it to the outside world. Some applications may not need to be exposed if they are only called by other applications in the platform. To expose your application, create a \u0026ldquo;route\u0026rdquo; in the Apache APISIX API Gateway by processing these steps:\nCreate a route to the service. For example:\na. In the Apache APISIX Dashboard, click Routes in the menu on the left side.\nAPISIX Routes b. Click Create to create a new route.\nc. Fill out the necessary details (anything not mentioned here can be left at the default value). For example, for the \u0026ldquo;slow service\u0026rdquo; to be included in the Sample Applications, provide these details:\nname = slow\npath = /fruit*\nmethod = get, options\nupstream type = service discovery\ndiscovery type = eureka\nservice name = SLOW (note that this is case sensitive, this is the key from the Eureka dashboard)\nNOTE: The API Gateway is pre-configured with both \u0026ldquo;Eureka\u0026rdquo; and \u0026ldquo;Kubernetes\u0026rdquo; discovery types. For Eureka, the service name is the key used to deploy the service in Eureka, which is normally the value from spring.application.name in the Spring Boot configuration file (src/main/resources/application.yaml), in uppercase characters. For Kubernetes, the service name is in the format namespace/service:port where namespace is the Kubernetes namespace in which the Spring Boot application is deployed, service is the name of the Kubernetes service for that application, and port is the name of the port in that service. If you deployed your Spring Boot application with the Oracle Backend for Spring Boot CLI, the port name will be spring. For example, an application called slow-service deployed in the my-apps namespace would be my-apps/slow-service:spring.\nAPISIX Routes Step1 APISIX Routes Step2 APISIX Routes Step3 d. Save the route that you created.\n\u0026lt;!-- spellchecker-disable --\u0026gt; APISIX Routes Step4 \u0026lt;!-- spellchecker-enable --\u0026gt; \u0026lt;/br\u0026gt; \u0026lt;!-- spellchecker-disable --\u0026gt; APISIX Routes Step5 \u0026lt;!-- spellchecker-enable --\u0026gt; \u0026lt;/br\u0026gt; Test a route to the service. For example:\na. Get the Apache APISIX Gateway external IP using this command:\n```shell kubectl -n ingress-nginx get svc ingress-nginx-controller ``` b. Call the API using the Apache APISIX Gateway address plus path. For example:\n```shell curl http://APISIX_IP/fruit ``` You should get \u0026ldquo;banana\u0026rdquo; or \u0026ldquo;fallback fruit is apple\u0026rdquo; back as the response.\nNext, go to the Service Discovery page to learn more.\n","description":"Apache APISIX is an open source cloud native API platform that supports the full lifecycle of API management including publishing, traffic management, deployment strategies, and circuit breakers.\nDeploy and Secure Sample Application APIs using Apache APISIX Oracle Backend for Spring Boot deploys Apache APISIX Gateway and Dashboard in the apisix namespace. The gateway is exposed through the external load balancer and ingress controller. To access the Apache APISIX Dashboard, you must use the kubectl port-forward command to create a secure channel to service/apisix-dashboard."},{"id":4,"href":"/microservices-datadriven/spring/azure/","title":"Azure/OCI Multicloud Installation","parent":"Oracle Backend for Spring Boot - Developer Preview","content":"The Oracle Backend for Spring Boot is available to install in Multicloud (Microsoft Azure (Azure) and Oracle Cloud Infrastructure (OCI)). This installation deploys the Oracle Backend for Spring Boot in Azure with an Oracle Autonomous Database running in OCI.\nPrerequisites You must meet the following prerequisites to use the Oracle Backend for Spring Boot Multicloud (Azure and OCI). You need:\nAn account on Azure. An account on OCI. Overview of the Setup Process Watch this video for a quick overview of the setup process.\nDownload Download Oracle Backend for Spring Boot.\nSetup A few setup steps are required in both OCI and Azure to deploy the Oracle Backend for Spring Boot application.\nOCI The Multicloud installation provisions an Oracle Autonomous Database in OCI using the Oracle Database Operator for Kubernetes (OraOperator).\nTo allow the OraOperator access to OCI, an API Key must be generated using these steps:\nLog in to OCI. Open the Profile menu and click User settings. In the Resources section at the lower left, click API Keys. Click Download Private Key and save the key as private_key.pem. You do not need to download the public key. Click Add. The key is added and the Configuration File Preview is displayed. The file snippet includes the required parameters and values. Copy and paste the configuration file snippet from the text box and save for later steps.\nAzure The Multicloud installation is done using the Azure Cloud Shell. The following steps are required in Azure to prepare for the installation:\nLog in to Azure.\nOpen the Azure Cloud Shell. For example:\nUpload the Oracle Backend for Spring Boot stack. For example:\nUpload the API Private Key (private_key.pem).\nUnzip the stack to a directory called obaas. For example:\nunzip azure-ebaas-platform_latest.zip -d /tmp/obaas\nMove the private_key.pem file to the obaas directory. For example:\nmv private_key.pem /tmp/obaas/\nRun the configuration Helper script using the values from the API Key. For example:\ncd /tmp/obaas ./obaas_configure.py Install Ansible Install Ansible to run the Configuration Management Playbook. The Helper script creates a Python virtual environment and installs Ansible and some additional modules. For example:\ncd /tmp/obaas/ansible ./setup_ansible.sh source ./activate.env Deploy the Infrastructure From the Azure Cloud Shell, run these commands to deploy the infrastructure:\ncd /tmp/obaas terraform init terraform plan -out=multicloud.plan terraform apply \u0026#34;multicloud.plan\u0026#34; Next, go to the On-Premises page to learn more.\n","description":"The Oracle Backend for Spring Boot is available to install in Multicloud (Microsoft Azure (Azure) and Oracle Cloud Infrastructure (OCI)). This installation deploys the Oracle Backend for Spring Boot in Azure with an Oracle Autonomous Database running in OCI.\nPrerequisites You must meet the following prerequisites to use the Oracle Backend for Spring Boot Multicloud (Azure and OCI). You need:\nAn account on Azure. An account on OCI. Overview of the Setup Process Watch this video for a quick overview of the setup process."},{"id":5,"href":"/microservices-datadriven/spring/platform/config/","title":"Configuration","parent":"Platform Services","content":"Oracle Backend for Spring Boot includes Spring Cloud Config which provides server- and client-side support for externalized configurations in a distributed system. The Spring Cloud Config server provides a central place to manage external properties for applications across all environments.\nThe Spring Cloud Config server is pre-configured to work with the Spring Boot Eureka service registry, and it is configured to store the configuration in the Oracle Autonomous Database, so it easily supports labelled versions of configuration environments, as well as being accessible to a wide range of tools for managing the content. Configuration is stored in the CONFIGSERVER schema in the PROPERTIES table.\nFor example, the Spring Cloud Config client\u0026rsquo;s Spring application.yaml configuration file could include:\nspring: config: import: optional:configserver:http://config-server.config-server.svc.cluster.local:8080 application: name: atael cloud: config: label: latest profile: dev This example fetches data where the application is atael, profile is dev and the label is latest.\nManaging the data for the Spring Cloud Config server should be done using the CLI. If you prefer, you can also work directly with the CONFIGSERVER.PROPERTIES table in the database.\nNext, go to the Workflow page to learn more.\n","description":"Oracle Backend for Spring Boot includes Spring Cloud Config which provides server- and client-side support for externalized configurations in a distributed system. The Spring Cloud Config server provides a central place to manage external properties for applications across all environments.\nThe Spring Cloud Config server is pre-configured to work with the Spring Boot Eureka service registry, and it is configured to store the configuration in the Oracle Autonomous Database, so it easily supports labelled versions of configuration environments, as well as being accessible to a wide range of tools for managing the content."},{"id":6,"href":"/microservices-datadriven/spring/database/","title":"Database Access","parent":"Oracle Backend for Spring Boot - Developer Preview","content":"The Oracle Backend for Spring Boot includes an Oracle database. An instance of Oracle Autonomous Database Serverless is created during installation.\nIf you chose the Secure Access from Anywhere option for your database during installation (or just accepted the default), then you can use the Database Actions web user interface to work with your database. If you chose the Private option, you need to use Bastion to access the database.\nUsing Database Actions To work with data in the database, you can use the Database Actions web user interface, which can be accessed from the Oracle Cloud Infrastructure Console (OCI Console). The Oracle database is created in the same compartments as OCI Container Engine for Kubernetes (OKE). In the OCI Console, navigate to Oracle Autonomous Database (ADB) in the main menu and select the database with the application name that you configured during installation with the suffix DB. For example, OBAASTSTPSDB.\nOracle Autonomous DB Cloud Portal Click on the link to access the Database Details page, and then click on Database Actions:\nOracle Autonomous DB Details This opens the Database Actions page where you have access to many database functions, including the ability to work with the schemas where your Oracle Backend for Spring Boot data is stored.\nAccessing the Database From a Local Machine After creating the Oracle Backend for Spring Boot environment, you have access to Oracle Autonomous Database. For example, you can access the CONFIGSERVER.PROPERTIES table where applications should add their properties. Also, each application can use the same database instance to host its data.\nIf you chose the Secure Access from Anywhere option for database access during installation (or accepted this default), then you can download the wallet to access the database from your local machine.\nIf you chose the Private option for database access during installation, the database is configured so that it is only accessible from the private Virtual Cloud Network (VCN), and access is only possible using the Bastion service provisioned during installation.\nProcess the following steps:\nCreate a Dynamic Port Forwarding (SOCKS5) Session using the Bastion service.\nStart with Autonomous Database (ADB) access that was created with private endpoint access only in accordance with security guide lines. For ADB to run SQL commands, you need to establish a session between your local machine and ADB using the Bastion service.\nA Dynamic Port Forwarding (SOCKS5) Session is created. For example:\nDownload ADB client credential After the session is created, you can establish the tunnel with your ADB instance by issuing an ssh command that you obtain by clicking on the three dots symbol on right side of the created session. For example:\nssh -i \u0026lt;privateKey\u0026gt; -N -D 127.0.0.1:\u0026lt;localPort\u0026gt; -p 22 ocid1.bastionsession.oc1.phx....@host.bastion.us-phoenix-1.oci.oraclecloud.com Connect with the ADB instance using the Oracle SQL Developer Command Line (SQLcl) interface. With the tunnel established, you can connect to the ADB instance:\na. First, export the Oracle Net port by processing this commmand:\n```shell export CUSTOM_JDBC=\u0026quot;-Doracle.net.socksProxyHost=127.0.0.1 -Doracle.net.socksProxyPort=\u0026lt;PORT\u0026gt; -Doracle.net.socksRemoteDNS=true\u0026quot; ``` b. Download the ADB client credentials (wallet files). For example:\n\u0026lt;!-- spellchecker-disable --\u0026gt; Download ADB client credential \u0026lt;!-- spellchecker-enable --\u0026gt; c. Connect with SQLcl by processing this command:\n```shell sql /nolog ```sql set cloudconfig \u0026lt;WALLET\u0026gt;.zip connect ADMIN@\u0026lt;TNS_NAME\u0026gt; ``` Next, go to the Kubernetes Access page to learn more.\n","description":"The Oracle Backend for Spring Boot includes an Oracle database. An instance of Oracle Autonomous Database Serverless is created during installation.\nIf you chose the Secure Access from Anywhere option for your database during installation (or just accepted the default), then you can use the Database Actions web user interface to work with your database. If you chose the Private option, you need to use Bastion to access the database."},{"id":7,"href":"/microservices-datadriven/spring/getting-started/","title":"Getting Started","parent":"Oracle Backend for Spring Boot - Developer Preview","content":"There are a number of demonstrations (videos) and hands-on labs (Live Lab) that show how to use Oracle Backend for Spring Boot (Spring Boot) and Oracle Backend for Parse Platform (Parse Platform).\nPrerequisites Deployed Oracle Backend for Spring Boot (and Parse Platform) Introduction Video Watch this video for more information.\nBuild a Spring Boot Application With the Oracle Spring Boot Starters for UCP and Wallet In this video (18 minutes), Andy shows you how to:\nBuild a Phonebook application using Spring Boot with the Oracle Spring Boot Starters for Universal Connection Pools (UCP) and wallet. Deploy the applications to the Oracle Backend for Spring Boot. Run tests. CloudBank - Building an Application with Spring Boot and Mobile APIs with Oracle Database and Kubernetes In this workshop (~ 2 hours), you learn how to build Microservices using Spring Boot and deploy them to the Oracle Backend for Spring Boot. You learn about accessing the database using the Java Persistence API (JPA), service discovery, exposing services with the API Gateway, managing transactions across Microservices, workflow, and using observability tools to monitor your services and diagnose issues. You also learn about building a web and mobile user interface for your services using Flutter and Parse Platform.\nIf you have already deployed Oracle Backend for Spring Boot, you can skip Lab 1 (Provision an Instance).\nMore Learning There are more channels to learn about Oracle Backend for Spring Boot (and Parse Platform):\nCheck out our blogs Join our Youtube Channel Next, go to the Platform Services page to learn more.\n","description":"There are a number of demonstrations (videos) and hands-on labs (Live Lab) that show how to use Oracle Backend for Spring Boot (Spring Boot) and Oracle Backend for Parse Platform (Parse Platform).\nPrerequisites Deployed Oracle Backend for Spring Boot (and Parse Platform) Introduction Video Watch this video for more information.\nBuild a Spring Boot Application With the Oracle Spring Boot Starters for UCP and Wallet In this video (18 minutes), Andy shows you how to:"},{"id":8,"href":"/microservices-datadriven/spring/cluster-access/","title":"Kubernetes Access","parent":"Oracle Backend for Spring Boot - Developer Preview","content":"The Oracle Backend for Spring Boot setup creates a Kubernetes cluster where the server and dashboard components are deployed. At the end of setup, you are provided with a command in the log for the apply job to create a Kubernetes configuration file to access that cluster:\nTip For more information about working with the Kubernetes cluster, see Setting Up Cluster Access in the Oracle Cloud Infrastructure documentation. kubeconfig_cmd = \u0026#34;oci ce cluster create-kubeconfig --cluster-id ocid1.cluster.oc1.iad.xxx --file $HOME/.kube/config --region us-ashburn-1 --token-version 2.0.0 --kube-endpoint PUBLIC_ENDPOINT\u0026#34; NOTE: The generated kubeconfig file works if you are using the DEFAULT profile in your Oracle Cloud Infrastructure (OCI) CLI configuration file. If you are using a different OCI CLI profile, you must add --profile \u0026lt;PROFILE-NAME\u0026gt; to the command. For example:\nkubeconfig_cmd = \u0026#34;oci ce cluster create-kubeconfig --cluster-id ocid1.cluster.oc1.iad.xxx --file $HOME/.kube/config --region us-ashburn-1 --token-version 2.0.0 --kube-endpoint PUBLIC_ENDPOINT\u0026#34; --profile \u0026lt;PROFILE-NAME\u0026gt; You must also edit the the generated Kubernetes configuration file and add the following lines:\n- name: user-xxxx user: exec: apiVersion: client.authentication.k8s.io/v1beta1 args: - ce - cluster - generate-token - --cluster-id - ocid1.cluster....xxxx - --region - us-ashburn-1 - --profile - \u0026lt;PROFILE-NAME\u0026gt; command: oci Using OCI Cloud Shell A simple alternative is to use the OCI Cloud Shell, which is provided in the OCI Console. You can open the OCI Cloud Shell by clicking Developer Tools in the upper right corner of the OCI Console. For example:\nOCI Cloud Shell icon Run the provided command to create your Kubernetes configuration file after which you can access the Kubernetes cluster. For example, you can list the Pods in your cluster:\nWelcome to Oracle Cloud Shell. Update: Cloud Shell will now use Oracle JDK 11 by default. To change this, see Managing Language Runtimes in the Cloud Shell documentation. Your Cloud Shell machine comes with 5GB of storage for your home directory. Your Cloud Shell (machine and home directory) are located in: US East (Ashburn). You are using Cloud Shell in tenancy xxxx as an OCI user xxxx Type `help` for more info. user@cloudshell:~ (us-ashburn-1)$ oci ce cluster create-kubeconfig --cluster-id ocid1.cluster.oc1.iad.xxx --file $HOME/.kube/config --region us-ashburn-1 --token-version 2.0.0 --kube-endpoint PUBLIC_ENDPOINT Existing Kubeconfig file found at /home/user/.kube/config and new config merged into it user@cloudshell:~ (us-ashburn-1)$ kubectl get pods -A NAMESPACE NAME READY STATUS RESTARTS AGE ingress-nginx ingress-nginx-controller-7d45557d5c-bqwwp 1/1 Running 0 4h18m ingress-nginx ingress-nginx-controller-7d45557d5c-klgnb 1/1 Running 0 4h18m ingress-nginx ingress-nginx-controller-7d45557d5c-l4d2m 1/1 Running 0 4h18m kube-system coredns-746957c9c6-hwnm8 1/1 Running 0 4h27m kube-system csi-oci-node-kqf5x 1/1 Running 0 4h23m kube-system kube-dns-autoscaler-6f789cfb88-7mptd 1/1 Running 0 4h27m kube-system kube-flannel-ds-hb6ld 1/1 Running 1 (4h22m ago) 4h23m kube-system kube-proxy-v5qwm 1/1 Running 0 4h23m kube-system proxymux-client-vpnh7 1/1 Running 0 4h23m ......... user@cloudshell:~ (us-ashburn-1)$ Next, go to the Uninstall page to learn about uninstalling Oracle Backend for Spring Boot.\n","description":"The Oracle Backend for Spring Boot setup creates a Kubernetes cluster where the server and dashboard components are deployed. At the end of setup, you are provided with a command in the log for the apply job to create a Kubernetes configuration file to access that cluster:\nTip For more information about working with the Kubernetes cluster, see Setting Up Cluster Access in the Oracle Cloud Infrastructure documentation. kubeconfig_cmd = \u0026#34;oci ce cluster create-kubeconfig --cluster-id ocid1."},{"id":9,"href":"/microservices-datadriven/spring/observability/metrics/","title":"Metrics","parent":"Observability","content":" Metrics The Oracle Backend for Spring Boot metrics stack automates metrics aggregation and consists of Prometheus and Grafana components. Metrics sources expose system and application metrics. The Prometheus components retrieve and store the metrics and Grafana provides dashboards to visualize them.\nMetrics View Metrics From the Application in Prometheus Prometheus is an open source monitoring and alerting system. Prometheus collects and stores metrics as time series data with the timestamp of the time that they are recorded, and optional Key/Value pairs called labels.\nExpose the Prometheus user interface (UI) using this command:\nkubectl port-forward -n prometheus svc/prometheus 9090:9090 Open the Prometheus web user interface URL: http://localhost:9090\nPrometheus UI In the Prometheus web user interface, search for metrics:\nIn the search bar, search for application_ready_time_seconds and click on Execute. You should see metrics for the Sample Applications. For example:\nPrometheus Metrics In the Prometheus web user interface, Status allows you to view the targets being monitored by Prometheus:\nIn the top menu, choose Status and then Targets. Notice that the targets \u0026ldquo;slow\u0026rdquo;, \u0026ldquo;customer\u0026rdquo; and others are in UP status and others are in DOWN status. Prometheus Targets View Details of the Application in Grafana Grafana open source software enables you to query, visualize, alert, and explore your metrics, logs, and traces wherever they are stored. Grafana open source software provides tools that turn your time series database (TSDB) data into insightful graphs and visualizations. Take the following steps:\nExpose Grafana using this command:\nkubectl -n grafana port-forward svc/grafana 8080:80 Open the Grafana web user interface URL: http://localhost:8080\nusername: admin\nTo get the password, run this command:\nkubectl -n grafana get secret grafana -o jsonpath=\u0026#39;{.data.admin-password}\u0026#39; | base64 -d NOTE: If you do not have base64, leave off the last part (| base64 -d) in the command, then copy the output, and use this website to decode it: https://www.base64decode.org/.\nThe password is a long string of characters that might be similar to 210BAqNzYkrcWjd58RKC2Xzerx9c0WkZi9LNsG4c. For example:\nGrafana Login Set up the Prometheus data source:\na. At the lower left, click on the system setup symbol and choose Data Sources. b. Click on the second data source called Prometheus and in the address (be careful to get the address field, not the name field), change the address from http://prometheus:9090 to http://prometheus.prometheus.svc.cluster.local:9090. c. At the bottom of the page, click Save \u0026amp; Test and wait for 2-3 seconds for the green icon which indicates that the data source is working.\nGrafana Datasource Set up the dashboard:\na. In the upper left, find and click the dasbhoards link. b. Click on the blue button to the right to add a new dashboard. In the pull down menu, select Import. c. In the field for the Grafana dashboard ID, paste this value: 10280 . d. Click Next. e. In the data source field, select Prometheus. f. Click Save.\nGrafana Import Dashboard Navigate the Spring Boot dashboard:\na. You should see the new dashboard in the list called Spring Boot Dashboard 2.1. Click on it to open. b. You should automatically see details for the Sample Applications in the dashboard. c. Invoke the service. For example, use a curl command to create some traffic and observe the dashboard. You may need to repeat the curl command. There is a refresh symbol in the top right corner that enables automatic refresh every 5 seconds (or, for whatever length of time that you choose).\nGrafana Dashboard Next, go to the Tracing page to learn more.\n","description":"Metrics The Oracle Backend for Spring Boot metrics stack automates metrics aggregation and consists of Prometheus and Grafana components. Metrics sources expose system and application metrics. The Prometheus components retrieve and store the metrics and Grafana provides dashboards to visualize them.\nMetrics View Metrics From the Application in Prometheus Prometheus is an open source monitoring and alerting system. Prometheus collects and stores metrics as time series data with the timestamp of the time that they are recorded, and optional Key/Value pairs called labels."},{"id":10,"href":"/microservices-datadriven/spring/development/cli/","title":"OBaaS CLI","parent":"Development","content":"The Oracle Backend for Spring Boot offers a command-line interface (CLI), oractl. The CLI commands simplify the deployment of Microservices applications as well as bindings with the resources that they use. Download the CLI here. The platform-specific binary can be renamed to oractl for convenience.\nUsing the CLI Expose the Oracle Backend for Spring Boot Admin server that the CLI calls using this command:\nkubectl port-forward services/obaas-admin -n obaas-admin 8080:8080 Start the CLI in interactive mode by running oractl from your terminal window. For example:\noractl Available Commands Short descriptions for the available commands can be viewed by issuing the help command and detailed help for any individual commands can be viewed by issuing help [commandname]. For example:\noractl:\u0026gt;help AVAILABLE COMMANDS Admin Server Commands change-password: Change password for OBaaS Spring Cloud admin user. connect: Connect to the OBaaS Spring Cloud admin console. Application/Namespace Commands create: Create an application/namespace. delete: Delete a service or entire application/namespace. Built-In Commands help: Display help about available commands stacktrace: Display the full stacktrace of the last error. clear: Clear the shell screen. quit, exit: Exit the shell. history: Display or save the history of previously run commands version: Show version info script: Read and execute commands from a file. Informational Commands list: list/show details of application services. Service Commands bind: Create a schema/user and bind it to service deployment. config: View and modify application configuration. deploy: Deploy a service. oractl:\u0026gt; An application is a namespace encompassing related Microservices. For example, a \u0026ldquo;cloudbank\u0026rdquo; application may have \u0026ldquo;banktransfer\u0026rdquo; and \u0026ldquo;frauddetection\u0026rdquo; Microservices deployed within it.\nThe create command results in the creation of an application namespace.\nThe bind command results in the automatic creation of a database schema for a given service or user and binds the information for that schema or database in the environment of the Microservice. The option of a prefix for the bound environment properties is also returned. For example, most Spring Boot Microservices use spring.datasource.\nThe deploy command takes service-name, app-name, and artifact-path as the main arguments (image-version and java-version options are also provided). When the deploy command is issued, the Microservice JAR file is uploaded to the backend and a container image is created for the JAR or Microservice, and various Kubernetes resources such as Deployment and Service are also created. This is all done automatically to simplify the development process and the management of the Microservices by the backend.\nThe list command shows the details of the deployed Microservice.\nThe config command can also be used to add, view, update, and delete configurations managed by the Spring Cloud Config server.\nA common development workflow pattern is to connect, change-password (only if necessary), create (once per application or namespace), config, bind (only if necessary), deploy, and list.\nFurther development and redeployment of the service can then be repeated issuing the deploy and list commands.\nThe following is an example development workflow using the CLI:\nMake a connection to the Oracle server-side Spring Boot Admin using these commands:\noractl:\u0026gt;help connect NAME connect - Connect to the OBaaS Spring Cloud admin console. SYNOPSIS connect --url String --username String OPTIONS --url String admin server URL [Optional, default = http://localhost:8080] --username String username (will be prompted for password) [Optional, default = admin] oractl:\u0026gt;connect password (defaults to oractl): using default value... connect successful server version:0.3.0 Create an application namespace with the create command. This namespace contains the Microservices that are deployed later. For example:\noractl:\u0026gt;help create NAME create - Create an application/namespace. SYNOPSIS create [--app-name String] --help OPTIONS --app-name String application/namespace [Mandatory] --help or -h help for create [Optional] oractl:\u0026gt;create --app-name myapp application/namespace created successfully and image pull secret (registry-auth) created successfully and database TNSAdmin/wallet secret created successfully Use the bind command to create a database schema or user for the service (if one has not already been created). These commands also create the Kubernetes secret and binding environment entries for the schema. These are set in the Kubernetes deployment created with the deploy command. For example:\noractl:\u0026gt;help bind NAME bind - Create a schema/user and bind it to service deployment. SYNOPSIS bind --app-name String [--service-name String] --binding-prefix String --help OPTIONS --app-name String application/namespace [Optional, default = application] --service-name String Service Name/Database User [Mandatory] --binding-prefix String spring binding prefix [Optional, default = spring.datasource] --help or -h help for bind [Optional] oractl:\u0026gt;bind --app-name myapp --service-name myserv database password/servicePassword (defaults to Welcome12345): ************ database secret created successfully and schema created successfully for myserv Use the Microservice JAR deploy command to create, build, and push an image for the Microservice and create the necessary deployment, service, and secret Kubernetes resources for the Microservice. For example:\noractl:\u0026gt;help deploy NAME deploy - Deploy a service. SYNOPSIS deploy --redeploy boolean --bind String --app-name String [--service-name String] [--image-version String] --service-profile String --port String --java-version String --add-health-probe boolean [--artifact-path String] --help OPTIONS --redeploy boolean whether the service has already been deployed or not [Optional, default = false] --bind String automatically create and bind resources. possible values are [jms] [Optional] --app-name String application/namespace [Optional, default = application] --service-name String Service Name [Mandatory] --image-version String Image Version [Mandatory] --service-profile String Service Profile [Optional] --port String Service Port [Optional, default = 8080] --java-version String Java Container Base Image [ghcr.io/graalvm/jdk:ol9-java17-22.3.1] [Optional] --add-health-probe boolean Inject or not Health probes to service. [Optional, default = false] --artifact-path String Service jar location [Mandatory] --help or -h help for deploy [Optional] oractl:\u0026gt;deploy --app-name myapp --service-name myserv --image-version 0.0.1 --port 8081 --bind jms --add-health-probe true --artifact-path obaas/myserv/target/demo-0.0.1-SNAPSHOT.jar uploading: obaas/myserv/target/demo-0.0.1-SNAPSHOT.jar building and pushing image... binding resources... successful creating deployment and service... successfully deployed Use the list command to show details of the Microservice deployed in the previous step. For example:\noractl:\u0026gt;help list NAME list - list/show details of application services. SYNOPSIS list --app-name String --help OPTIONS --app-name String application/namespace [Optional, default = application] --help or -h help for list [Optional] oractl:\u0026gt;list --app-name myapp name:myserv-c46688645-r6lhl status:class V1ContainerStatus { containerID: cri-o://6d10194c5058a8cf7ecbd5e745cebd5e44c5768c7df73053fa85f54af4b352b2 image: \u0026lt;region\u0026gt;.ocir.io/\u0026lt;tenancy\u0026gt;/obaas03/myapp-myserv:0.0.1 imageID: \u0026lt;region\u0026gt;.ocir.io/\u0026lt;tenancy\u0026gt;/obaas03/myapp-myserv@sha256:99d4bbe42ceef97497105218594ea19a9e9869c75f48bdfdc1a2f2aec33b503c lastState: class V1ContainerState { running: null terminated: null waiting: null } name: myserv ready: true restartCount: 0 started: true state: class V1ContainerState { running: class V1ContainerStateRunning { startedAt: 2023-04-13T01:00:51Z } terminated: null waiting: null } }name:myserv kind:null Use the config command to view and update the configuration managed by the Spring Cloud Config server. More information about the configuration server can be found at this link:\nSpring Config Server\noractl:\u0026gt;help config NAME config - View and modify Service configuration. SYNOPSIS config [--action CommandConstants.ConfigActions] --service-name String --service-label String --service-profile String --property-key String --property-value String --artifact-path String --help OPTIONS --action CommandConstants.ConfigActions possible actions: add, list, update, or delete [Mandatory] --service-name String Service Name [Optional] --service-label String label for config [Optional] --service-profile String Application Profile [Optional] --property-key String the property key for the config [Optional] --property-value String the value for the config [Optional] --artifact-path String the context [Optional] --help or -h help for config [Optional] Use the config add command to add the application configuration to the Spring Cloud Config server using one of the two following options:\nAdd a specific configuration using the set of parameters --service-name, --service-label, --service-profile, --property-key, and --property-value. For example:\noractl:\u0026gt;config add --service-name myserv --service-label 0.0.1 --service-profile default --property-key k1 --property-value value1 Property added successfully. Add a set of configurations based on a configuration file using these commands:\n{ \u0026#34;application\u0026#34;: \u0026#34;myserv\u0026#34;, \u0026#34;profile\u0026#34;: \u0026#34;obaas\u0026#34;, \u0026#34;label\u0026#34;: \u0026#34;0.0.1\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;spring.datasource.driver-class-name\u0026#34;: \u0026#34;oracle.jdbc.OracleDriver\u0026#34;, \u0026#34;spring.datasource.url\u0026#34;: \u0026#34;jdbc:oracle:thin:@$(db.service)?TNS_ADMIN=/oracle/tnsadmin\u0026#34; } } oractl:\u0026gt;config add --artifact-path /obaas/myserv-properties.json 2 property(s) added successfully. oractl:\u0026gt;config list --service-name myserv --service-profile obaas --service-label 0.0.1 [ { \u0026#34;id\u0026#34; : 222, \u0026#34;application\u0026#34; : \u0026#34;myserv\u0026#34;, \u0026#34;profile\u0026#34; : \u0026#34;obaas\u0026#34;, \u0026#34;label\u0026#34; : \u0026#34;0.0.1\u0026#34;, \u0026#34;propKey\u0026#34; : \u0026#34;spring.datasource.driver-class-name\u0026#34;, \u0026#34;value\u0026#34; : \u0026#34;oracle.jdbc.OracleDriver\u0026#34;, \u0026#34;createdOn\u0026#34; : \u0026#34;2023-04-13T01:29:38.000+00:00\u0026#34;, \u0026#34;createdBy\u0026#34; : \u0026#34;CONFIGSERVER\u0026#34; }, { \u0026#34;id\u0026#34; : 223, \u0026#34;application\u0026#34; : \u0026#34;myserv\u0026#34;, \u0026#34;profile\u0026#34; : \u0026#34;obaas\u0026#34;, \u0026#34;label\u0026#34; : \u0026#34;0.0.1\u0026#34;, \u0026#34;propKey\u0026#34; : \u0026#34;spring.datasource.url\u0026#34;, \u0026#34;value\u0026#34; : \u0026#34;jdbc:oracle:thin:@$(db.service)?TNS_ADMIN=/oracle/tnsadmin\u0026#34;, \u0026#34;createdOn\u0026#34; : \u0026#34;2023-04-13T01:29:38.000+00:00\u0026#34;, \u0026#34;createdBy\u0026#34; : \u0026#34;CONFIGSERVER\u0026#34; } ] Use the config list command, without any parameters, to list the services that have at least one configuration inserted in the Spring Cloud Config server. For example:\noractl:\u0026gt;config list [ { \u0026#34;name\u0026#34; : \u0026#34;apptest\u0026#34;, \u0026#34;label\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;profile\u0026#34; : \u0026#34;\u0026#34; }, { \u0026#34;name\u0026#34; : \u0026#34;myapp\u0026#34;, \u0026#34;label\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;profile\u0026#34; : \u0026#34;\u0026#34; }, […] Use the config list [parameters] command to list the parameters using parameters as filters. For example:\n--service-name : Lists all of the parameters from the specified service. --service-label : Filters by label. --service-profile : Filters by profile. --property-key : Lists a specific parameter filter by key. For example:\noractl:\u0026gt;config list --service-name myserv --service-profile default --service-label 0.0.1 [ { \u0026#34;id\u0026#34; : 221, \u0026#34;application\u0026#34; : \u0026#34;myserv\u0026#34;, \u0026#34;profile\u0026#34; : \u0026#34;default\u0026#34;, \u0026#34;label\u0026#34; : \u0026#34;0.0.1\u0026#34;, \u0026#34;propKey\u0026#34; : \u0026#34;k1\u0026#34;, \u0026#34;value\u0026#34; : \u0026#34;value1\u0026#34;, \u0026#34;createdOn\u0026#34; : \u0026#34;2023-04-13T01:10:16.000+00:00\u0026#34;, \u0026#34;createdBy\u0026#34; : \u0026#34;CONFIGSERVER\u0026#34; } ] Use the config update command to update a specific configuration using the set of parameters:\n--service-name --service-label --service-profile --property-key --property-value For example:\noractl:\u0026gt;config list --service-name myserv --service-profile obaas --service-label 0.1 --property-key k1 [ { \u0026#34;id\u0026#34; : 30, \u0026#34;application\u0026#34; : \u0026#34;myserv\u0026#34;, \u0026#34;profile\u0026#34; : \u0026#34;obaas\u0026#34;, \u0026#34;label\u0026#34; : \u0026#34;0.1\u0026#34;, \u0026#34;propKey\u0026#34; : \u0026#34;k1\u0026#34;, \u0026#34;value\u0026#34; : \u0026#34;value1\u0026#34;, \u0026#34;createdOn\u0026#34; : \u0026#34;2023-03-23T18:02:29.000+00:00\u0026#34;, \u0026#34;createdBy\u0026#34; : \u0026#34;CONFIGSERVER\u0026#34; } ] oractl:\u0026gt;config update --service-name myserv --service-profile obaas --service-label 0.1 --property-key k1 --property-value value1Updated Property successful modified. oractl:\u0026gt;config list --service-name myserv --service-profile obaas --service-label 0.1 --property-key k1 [ { \u0026#34;id\u0026#34; : 30, \u0026#34;application\u0026#34; : \u0026#34;myserv\u0026#34;, \u0026#34;profile\u0026#34; : \u0026#34;obaas\u0026#34;, \u0026#34;label\u0026#34; : \u0026#34;0.1\u0026#34;, \u0026#34;propKey\u0026#34; : \u0026#34;k1\u0026#34;, \u0026#34;value\u0026#34; : \u0026#34;value1Updated\u0026#34;, \u0026#34;createdOn\u0026#34; : \u0026#34;2023-03-23T18:02:29.000+00:00\u0026#34;, \u0026#34;createdBy\u0026#34; : \u0026#34;CONFIGSERVER\u0026#34; } ] Use the config delete command to delete the application configuration from the Spring Cloud Config server using one of the following two options: Delete all configurations from a specific service using the filters --service-name, --service-profile and --service-label. The CLI tracks how many configurations are present in the Spring Cloud Config server and confirms the completed deletion. For example:\noractl:\u0026gt;config delete --service-name myserv [obaas] 7 property(ies) found, delete all (y/n)?: Delete a specific configuration using the parameters --service-name, --service-label, --service-profile and --property-key. For example:\noractl:\u0026gt;config list --service-name myserv --service-profile obaas --service-label 0.1 --property-key ktest2 [ { \u0026#34;id\u0026#34; : 224, \u0026#34;application\u0026#34; : \u0026#34;myserv\u0026#34;, \u0026#34;profile\u0026#34; : \u0026#34;obaas\u0026#34;, \u0026#34;label\u0026#34; : \u0026#34;0.1\u0026#34;, \u0026#34;propKey\u0026#34; : \u0026#34;ktest2\u0026#34;, \u0026#34;value\u0026#34; : \u0026#34;value2\u0026#34;, \u0026#34;createdOn\u0026#34; : \u0026#34;2023-04-13T01:52:11.000+00:00\u0026#34;, \u0026#34;createdBy\u0026#34; : \u0026#34;CONFIGSERVER\u0026#34; } ] oractl:\u0026gt;config delete --service-name myserv --service-profile obaas --service-label 0.1 --property-key ktest2 [obaas] property successfully deleted. oractl:\u0026gt;config list --service-name myserv --service-profile obaas --service-label 0.1 --property-key ktest2 400 : \u0026#34;Couldn\u0026#39;t find any property for submitted query.\u0026#34; Next, go to the Vault page to learn more.\n","description":"The Oracle Backend for Spring Boot offers a command-line interface (CLI), oractl. The CLI commands simplify the deployment of Microservices applications as well as bindings with the resources that they use. Download the CLI here. The platform-specific binary can be renamed to oractl for convenience.\nUsing the CLI Expose the Oracle Backend for Spring Boot Admin server that the CLI calls using this command:\nkubectl port-forward services/obaas-admin -n obaas-admin 8080:8080 Start the CLI in interactive mode by running oractl from your terminal window."},{"id":11,"href":"/microservices-datadriven/spring/observability/","title":"Observability","parent":"Oracle Backend for Spring Boot - Developer Preview","content":" Observability Oracle Backend for Spring Boot includes a number of common open source components to provide application observability including Prometheus, Grafana, Jaeger, and OpenTelemetry Collector.\nFor more details, read the following:\nMetrics Tracing ","description":" Observability Oracle Backend for Spring Boot includes a number of common open source components to provide application observability including Prometheus, Grafana, Jaeger, and OpenTelemetry Collector.\nFor more details, read the following:\nMetrics Tracing "},{"id":12,"href":"/microservices-datadriven/spring/on-premises/","title":"On-Premises","parent":"Oracle Backend for Spring Boot - Developer Preview","content":" On-Premises Installation The Oracle Backend for Spring Boot is available to install On-Premises. The On-Premises installation includes both a Desktop installation and an Estate installation.\nThe Desktop installation can be used to explore in a non-production environment, while the Estate installation is targeted for the production infrastructure.\nPrerequisites You must meet the following prerequisites to use the Oracle Backend for Spring Boot On-Premises. You need:\nAccess to Oracle Database Enterprise Edition 21.3.0.0 Access to a Container Repository Access to a Kubernetes cluster Python 3+ When installing on a Desktop, the previously mentioned pre-requisites are met through an additional Setup task, but there are additional desktop system or software requirements. For example:\n2 CPUs or more 8 GB of free memory 60 GB of free disk space (40 GB minikube and container images, 20 GB database) Internet connection Minikube Podman1 Oracle Single Sign-On (SSO) account to download the database image Download Download Oracle Backend for Spring Boot.\nSetup An On-Premises installation, whether Desktop or Estate, consists of defining the infrastructure followed by running the Configuration Management Playbook to build images and deploy the Microservices.\nFor an Estate installation, you need to have a Kubernetes cluster and the kubectl command-line interface must be configured to communicate with your cluster.\nA Helper Playbook has been provided for the Desktop installations to assist in defining the infrastructure. Review the appropriate documentation for examples of installing and defining the Desktop installation. For example:\nmacOS Ventura (x86) Oracle Linux 8 (x86) The Desktop playbook is run as part of the Configuration Management Playbook.\nDownload the Database or Oracle REST Data Services (ORDS) Images (Desktop Installation) The Desktop installation provisions an Oracle database to the Kubernetes cluster. The images must be downloaded from Oracle\u0026rsquo;s Container Registry before continuing.\nAfter installing Podman, process these steps:\nLog in to Oracle Cloud Infrastructure Registry (Container Registry). For example:\npodman login container-registry.oracle.com\nPull the database image. For example:\npodman pull container-registry.oracle.com/database/enterprise:21.3.0.0\nPull the ORDS image. For example:\npodman pull container-registry.oracle.com/database/ords:21.4.2-gh\nDefining the Database (Estate Installation) The database is defined in ansible/roles/database/vars/main.yaml. For example:\n--- oracle_dbs: [\u0026#39;BAASPDB\u0026#39;] default_db: BAASPDB BAASPDB: username: \u0026#39;PDBADMIN\u0026#39; password: \u0026#39;Correct-horse-Battery-staple-35\u0026#39; service: \u0026#39;(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=localhost)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=BAASPDB)))\u0026#39; ocid: \u0026#39;\u0026#39; ... The oracle_dbs and default_db key values should be the name of your Pluggable Database (PDB). These are followed by the PDB name and Key/Values defining how to access the PDB. If using Mutual Transport Layer Security (mTLS) authentication, specify the full path of the wallet file.\nDefining the Container Repository (Estate Installation) The Container Repository is defined in ansible/roles/registry/vars/main.yaml. For example:\n--- registry_username: \u0026#39;oracle\u0026#39; registry_password: \u0026#39;Correct-horse-Battery-staple-35\u0026#39; push_registry_url: \u0026#39;docker.io/myorg\u0026#39; push_registry_auth: auths: docker.io/myorg: auth: \u0026#39;b3JhY2xlOjdaUVgxLXhhbFR0NTJsS0VITlA0\u0026#39; pull_registry_url: \u0026#39;docker.io/myorg\u0026#39; pull_registry_auth: auths: docker.io/myorg: auth: \u0026#39;b3JhY2xlOjdaUVgxLXhhbFR0NTJsS0VITlA0\u0026#39; ... Specify the URL or authentication credentials for your Container Repository in pull_registry_url, push_registry_url, registry_username and registry_password.\nFor the registry_auth section, manually log in to your repository and copy the values found in the previously created file, which is often found in $HOME/.config/containers/auth.json\nThere may be duplication between the push and pull URL\u0026rsquo;s. The pull URL is used inside the Pods while the push URL is used from the deployment machine. If you have a private registry inside the Kubernetes cluster, these URL\u0026rsquo;s could be different. This is the case for the Desktop installation. For example, the push URL is localhost:5000, while the pull URL is \u0026lt;Registry Pod ClusterIP\u0026gt;:5000.\nConfiguration Management Playbook From the source package, run the Configuration Management Playbook.\nInstall Ansible Using Python, install Ansible to run the Configuration Management Playbook. The Helper script creates a Python virtual environment and installs Ansible along with other additional modules. For example:\n./setup_ansible.sh source ./activate.env Desktop Playbook If this is an Estate installation, the infrastructure should be manually defined as previously stated.\nIf this is a Desktop installation, run the Helper Playbook to define the infrastructure. For example:\nansible-playbook ansible/desktop-apply.yaml Build and Push Images to the Container Repository For the Desktop installation, start a new terminal and tunnel or port-forward to the Minikube cluster. Refer to the specific platform details for more information.\nFor both installations, run the Images Playbook on the original terminal. For example:\nansible-playbook ansible/images_build.yaml Install the Microservices Install the Microservices by running this command:\nansible-playbook ansible/k8s_apply.yaml -t full Next, go to the macOS Ventura page to learn more.\nFootnotes Certification has been performed against Podman. However, other container or virtual machine managers are available and may be substituted.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","description":"On-Premises Installation The Oracle Backend for Spring Boot is available to install On-Premises. The On-Premises installation includes both a Desktop installation and an Estate installation.\nThe Desktop installation can be used to explore in a non-production environment, while the Estate installation is targeted for the production infrastructure.\nPrerequisites You must meet the following prerequisites to use the Oracle Backend for Spring Boot On-Premises. You need:\nAccess to Oracle Database Enterprise Edition 21."},{"id":13,"href":"/microservices-datadriven/spring/","title":"Oracle Backend for Spring Boot - Developer Preview","parent":"","content":"Oracle Backend for Spring Boot allows developers to build Microservices in Spring Boot and provisions a backend as a service with Oracle Database and other infrastructure components that operate on multiple clouds. This service vastly simplifies the task of building, testing, and operating Microservices platforms for reliable, secure, and scalable enterprise applications.\nTo learn more, watch this short introductory video:\nIn addition to an Oracle Autonomous Database Serverless instance, the following software components are deployed in an Oracle Cloud Infrastructure (OCI) Container Engine for Kubernetes cluster (OKE cluster):\nApache APISIX API Gateway and Dashboard Spring Eureka service registry Spring Boot Admin dashboard Spring Cloud Config server Netflix Conductor Prometheus Grafana OpenTelemetry Collector Jaeger HashiCorp Vault Apache Kafka Coherence Developers also have access to development or build time services and libraries including:\nA command-line interface (CLI) to manage service deployment and configuration, including database schema management. Spring Data (Java Persistence API (JPA) and Oracle JDBC) to access Oracle Database. Oracle Java Database Connectivity (Oracle JDBC) drivers. Spring Cloud Config client. Spring Eureka service discovery client. Spring Cloud OpenFeign. OpenTelemetry Collector (including automatic instrumentation). Interested in Mobile or web apps too? Check out Oracle Backend for Parse Platform! Developer Preview This release is a Developer Preview. This means that not all functionality is complete. In this release, most of the planned services and components are provided. However, additional configuration options and components may be provided in a future release. We are releasing this as a Developer Preview to allow interested developers to try it and provide feedback.\n","description":"Oracle Backend for Spring Boot allows developers to build Microservices in Spring Boot and provisions a backend as a service with Oracle Database and other infrastructure components that operate on multiple clouds. This service vastly simplifies the task of building, testing, and operating Microservices platforms for reliable, secure, and scalable enterprise applications.\nTo learn more, watch this short introductory video:\nIn addition to an Oracle Autonomous Database Serverless instance, the following software components are deployed in an Oracle Cloud Infrastructure (OCI) Container Engine for Kubernetes cluster (OKE cluster):"},{"id":14,"href":"/microservices-datadriven/spring/platform/vscode-plugin/","title":"Oracle Backend for Spring Boot Visual Studio Code Extension","parent":"Platform Services","content":"Developer Preview 0.3.9 - July, 2023\nOracle Backend for Spring Boot Visual Studio Code (VS Code) plugin is an extension to browse and deploy applications on the Oracle Backend for Spring Boot platform. This plugin inspects the content of an Oracle Backend for Spring Boot deployment, in terms of applications, services, and related configurations. It simplifies access to the installed platform services (like Grafana, Spring, Apache APISIX, Eureka, and Jaeger) creating ssh tunnels on-demand and providing access to their respective web administrator consoles. It adds credentials to access and bind services to the Oracle Autonomous Database included in the Oracle Backend for Spring Boot deployment. This plugin replicates the functionalities available in OBaas CLI and simplifies access to Oracle Backend for Spring Boot deployments from an integrated development environment (IDE) like VS Code.\nSee the Oracle Free Use Terms and Conditions License.\nPrerequisites You must have already installed and configured the following which required for the Oracle Backend for Spring Boot Setup:\nKubernetes command-line interface (kubectl) Oracle Cloud Infrastructure command-line interface Installation Download the plug-in from here.\nOn the VS Code left menu bar, click on the Extensions symbol:\nFrom the upper right menu, select Install from VSIX\u0026hellip; and upload the plugin binaries that were previously downloaded:\nRestart VS Code to make the plugin fully operational.\nIf you do not see the plugin in the left menu bar, with the Oracle logo (as shown here), click on Additional Views to select the eBaaS Explorer:\nUsing VS Code Plugin After selecting the plugin from the left menu bar, the Oracle Backend for Spring Boot VS Code plugin asks you to specify the full path for the Kubernetes configuration file. For example:\nBy default, it shows the path in the user\u0026rsquo;s Home directory .kube/config in which kubectl stores all of the information regarding the configured K8s clusters. You can set the full path of another Kubernetes configuration file. If the file is correctly loaded, the plugin shows the list of contexts available from which you can select one:\nIf successful, you should see a tree view with one node and the selected context. For example:\nIf the file path has not been correctly set, it returns an error message. For example:\nTo restart the plugin and proceed with setting the Kubernetes configuration file, process a window reload in the command palette:\nHow to Access the Cluster Until you create a dedicated ssh tunnel to the Kubernetes cluster, and if you do not connect to Oracle Backend for Spring Boot adminstrative services, you cannot browse resources included in the Oracle Backend for Spring Boot deployment. To do this, follow these steps:\nSelect the cluster and click on the system setup symbol to set the credentials. For example:\nOn the top menu, the Oracle Backend for Spring Boot administrator password is required. For example:\nSpecify admin for the Oracle Backend for Spring Boot user for deployment. For example:\nTwo dialog boxes confirm that the credentials have been set correctly. For example:\nNOTE: If you do not process these steps and try to expand the Kubernetes context, you receive this informational message:\nSelect the cluster again and right-click on Create tunnel. VS Code opens a new terminal that tries to open a tunnel to the Kubernetes cluster on a local port, starting from 8081. For example:\nBefore proceeding to the connection, wait until the tunnel is established and the terminal shows a message similar to this:\nNOTE: If the K8s cluster is not related to an Oracle Backend for Spring Boot deployment, the tunnel creation fails. In this case, process a window reload to chose another cluster from the command palette. If you have any problem with the connection, start another tunnel. The plugin tries to connect to the cluster on another local port.\nSelect the cluster again and right-click Connect. This creates a session with the credentials set up in the first step.\nExplore Resources When the steps to create the tunnel are complete and you are connected to the backend, it is possible to expand or refresh the tree related to the deployment. For example:\nYou see four top classes of resources that can be expanded in underlying items:\napplications : The list of applications deployed and the holding services. ADB database : In this release, there is one Autonomous Database (ADB) in which the configuration and schema related to deployed services are stored. platformServices : The list of Oracle Backend for Spring Boot deployed services, like Grafana, Spring, Apache APISIX, Eureka, and Jaeger. oBaasConf : The list of keys defined by the application, stored in the Autonomous Database, that are provisioned and available to share configuration information among services in each application. Applications Let\u0026rsquo;s look at the operations that you can do on each item of the browse tree:\nOpen the list by clicking on the arrow to the left of application:\nExpand the application to see the list of included services:\nAt the root level, right-click on application, and select Add application to create a new application. A VS Code command palette appears, prompting for the application name that is to be created. For example:\nTo show the updated list, click on the Refresh symbol to the right of application. For example:\nOn each application, you can Add service -\u0026gt; upload .jar or Delete Application.\nAdd Service The Add service command uploads a Spring Boot Microservice to an application. Click Add service -\u0026gt; upload .jar for a specific application. For example:\nThe VS Code command palette prompts for the required the parameters, in this order:\nA popup dialog box opens to select the local Spring Boot .jar file\nYou need to bind the service to a user or schema in the database. For example:\nService Name\nDB User Password : Set this only if you have chosen to bind a schema on the database for the service that you are deploying. For example:\nSpring Binding prefix (Default: spring.datasource)\nImage Version (Default: 0.1)\nJava image (Default: ghcr.io/graalvm/jdk:ol7-java17-22.2.0)\nRedeploy (Default: false)\nAdd Health probe (Default: false)\nService Port (Default: 8080)\nService Profile (Default: obaas)\nAt the end of the parameters collection, the binding and upload process that generates a sequence of messages showing the status starts. These messages end with \u0026ldquo;Service deployed successfully!\u0026rdquo; or \u0026ldquo;Deploy failed\u0026rdquo;. The size and network constraints determine the amount of time for the process to terminate.\nDelete Service You can either delete an existing service or delete one that you have deployed from the VS Code extension. In either case, you have to select the service and right-click to select the only command available Delete service. Refresh the tree at the application level to update the view. You may need to refresh more than once.\nDelete Application This command removes the application and all of the services included. At the end of process, you see one of two messages: \u0026ldquo;Delete successful\u0026rdquo; or \u0026ldquo;Delete application failed!\u0026rdquo;. Refresh the tree at the single application level and then at the applications level. The termination of Pods and applications is not a synchronous operation. You may have to refresh more than one time for a clean view.\nAutonmous Database (ADB) For each Oracle Backend for Spring Boot, an Oracle Autonomous Transaction Processing database is provisioned to hold the schema for the Spring Boot services and configuration details. To store the administrator database password, click the system setup symbol shown next to ADB database. The VS Code command palette prompts for the password. For example:\nplatformServices The platformServices option can be expanded to show the services available in the Oracle Backend for Spring Boot platform. For each service, right-click on the symbol to open an ssh tunnel to the service on a specific local port that is automatically chosen. A link opens in the default web browser for the administrator console of each platform service.\nFor example, by right-clicking on grafana monitor, a tunnel opens with a message and a button to open a web browser on the administrator\u0026rsquo;s Grafana console. For example:\nNOTE: If the port is already used or the connection times out, open another ssh tunnel. It automatically opens on another port.\noBaasConf Configuration With Oracle Backend for Spring Boot, developers can store the metadata and configurations between Pods in an application. The VS Code plugin can browse the content of this Key/Value store and add, update and delete keys as needed. Expand oBaasConf configuration to see the applications that are deployed and, expanding each of them, the Key/Value pair. For example:\nHover the mouse over each Key/Value pair to see the other metadata related to the key, profile and label. The key spring.datasource.url: with the value \u0026lsquo;jdbc:oracle:thin:@$(db.service)\u0026hellip;\u0026rsquo; has the property application coming from the root (that is, cloudbank, profile=1.0 and label=kube).\nYou can process the following operations:\nAdd key : By right-clicking oBaasConf configuration or one of the service-conf options in the VS Code command palette, you can request the following:\nService name\nLabel\nProfile\nPropKey\nValue\nNOTE: You can add configuration properties for a service that is not yet deployed. In some cases, it is mandatory to prepare properties before deploying services in order to correctly start them.\nEdit key : Right-click on a selected key in the VS Code command palette to update the current content of Value.\nDelete key : Right-click on a selected key to delete it.\nNext, go to the Observability page to learn more.\n","description":"Developer Preview 0.3.9 - July, 2023\nOracle Backend for Spring Boot Visual Studio Code (VS Code) plugin is an extension to browse and deploy applications on the Oracle Backend for Spring Boot platform. This plugin inspects the content of an Oracle Backend for Spring Boot deployment, in terms of applications, services, and related configurations. It simplifies access to the installed platform services (like Grafana, Spring, Apache APISIX, Eureka, and Jaeger) creating ssh tunnels on-demand and providing access to their respective web administrator consoles."},{"id":15,"href":"/microservices-datadriven/spring/on-premises/ol8/","title":"Oracle Linux 8 (x86)","parent":"On-Premises","content":" On-Premises Installation - Oracle Linux 8 (x86) This is an description of installing on a Oracle Linux 8 desktop.\nRead the On-Premises documentation and ensure that your desktop meets the minimum system requirements.\nInstall Additional Operating System Packages Install additional operating system packages by executing these commands:\nsudo dnf -y module install container-tools:ol8 sudo dnf -y install conntrack podman curl sudo dnf -y install oracle-database-preinstall-21c sudo dnf -y install langpacks-en sudo dnf module install python39 Set the default Python3 to Python 3.9 by running this command:\nsudo alternatives --set python3 /usr/bin/python3.9 Create a Non-Root User Create a new user. While any user name can be created, the rest of this documentation refers to the non-root user as obaas:\nAs root, process the following:\nuseradd obaas echo \u0026#34;obaas ALL=(ALL) NOPASSWD: /bin/podman\u0026#34; \u0026gt;\u0026gt; /etc/sudoers Download the Database or Oracle REST Data Services (ORDS) Images The Desktop installation provisions an Oracle database into the Kubernetes cluster. The images must be downloaded from Oracle Cloud Infrastructure Registry (Container Registry) before continuing. As the obaas user, process these steps:\nLog in to the Container Registry. For example:\npodman login container-registry.oracle.com\nPull the database image. For example:\npodman pull container-registry.oracle.com/database/enterprise:19.19.0.0\nPull the ORDS image. For example:\npodman pull container-registry.oracle.com/database/ords:21.4.2-gh\nInstall and Start Minikube Install and start Minikube by running these commands as the root user:\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 install minikube-linux-amd64 /usr/local/bin/minikube As the obaas user, run these commands:\necho \u0026#34;PATH=\\$PATH:/usr/sbin\u0026#34; \u0026gt;\u0026gt; ~/.bashrc minikube config set driver podman minikube start --cpus max --memory 7900mb --disk-size=\u0026#39;40g\u0026#39; --container-runtime=cri-o minikube addons enable ingress Download Oracle Backend for Spring Boot Download Oracle Backend for Spring Boot and unzip into a new directory.\nAs the obaas user, run these commands:\nunzip onprem-ebaas_latest.zip -d ~/obaas Install Ansible As the obaas user, change to the source directory and install Ansible by running these commands:\ncd ~/obaas ./setup_ansible.sh source ./activate.env Define the Infrastructure Use the Helper Playbook to define the infrastructure. This Playbook also:\nCreates additional namespaces for the Container Registry and database. Creates a private Container Registry in the Kubernetes cluster. Modifies the Microservices application to be desktop compatible. Assuming the source was unzipped to ~/obaas, run the following command as the obaas user:\nansible-playbook ~/obaas/ansible/desktop_apply.yaml\nOpen a Tunnel In order to push the images to the Container Registry in the Kubernetes cluster, open a new terminal and process this command as the obaas user:\nkubectl port-forward service/private -n container-registry 5000:5000 \u0026amp;\nTo test access to the registry, run this command:\ncurl -X GET -k https://localhost:5000/v2/_catalog\nThis curl should result in the following:\n{\u0026#34;errors\u0026#34;:[{\u0026#34;code\u0026#34;:\u0026#34;UNAUTHORIZED\u0026#34;,\u0026#34;message\u0026#34;:\u0026#34;authentication required\u0026#34;,\u0026#34;detail\u0026#34;:[{\u0026#34;Type\u0026#34;:\u0026#34;registry\u0026#34;,\u0026#34;Class\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;Name\u0026#34;:\u0026#34;catalog\u0026#34;,\u0026#34;Action\u0026#34;:\u0026#34;*\u0026#34;}]}]} Build the Images Build and push the images to the Container Registry in the Kubernetes cluster.\nAssuming the source was unzipped to ~/obaas, run the following command as the obaas user:\nansible-playbook ~/obaas/ansible/images_build.yaml\nAfter the images are built and pushed, the port-forward is no longer required and can be stopped.\nDeploy Microservices Assuming the source was unzipped to ~/obaas, run this command as the obaas user:\nansible-playbook ~/obaas/ansible/k8s_apply.yaml -t full\nNotes config-server and obaas-admin Pod Failures The Pods in the config-server and obaas-admin namespaces rely on the database that is created in the oracle-database-operator-system. During the initial provisioning, these Pods start well before the database is available resulting in initial failures. They resolve themselves once the database becomes available.\nYou can check on the status of the database by running this command:\nkubectl get singleinstancedatabase baas -n oracle-database-operator-system -o \u0026quot;jsonpath={.status.status}\u0026quot;\nVPN and Proxies If you are behind a Virtual Private Network (VPN) or proxy, see https://minikube.sigs.k8s.io/docs/handbook/vpn_and_proxy/ for more details on additional tasks.\nNext, go to the Getting Started page to learn more.\n","description":"On-Premises Installation - Oracle Linux 8 (x86) This is an description of installing on a Oracle Linux 8 desktop.\nRead the On-Premises documentation and ensure that your desktop meets the minimum system requirements.\nInstall Additional Operating System Packages Install additional operating system packages by executing these commands:\nsudo dnf -y module install container-tools:ol8 sudo dnf -y install conntrack podman curl sudo dnf -y install oracle-database-preinstall-21c sudo dnf -y install langpacks-en sudo dnf module install python39 Set the default Python3 to Python 3."},{"id":16,"href":"/microservices-datadriven/spring/platform/","title":"Platform Services","parent":"Oracle Backend for Spring Boot - Developer Preview","content":"Oracle Backend for Spring Boot includes a number of Spring platform components that provide services to applications deployed to the platform.\nFor more details, read about:\nAPI Gateway Service Discovery Configuration Workflow Spring Admin Using the CLI Vault ","description":"Oracle Backend for Spring Boot includes a number of Spring platform components that provide services to applications deployed to the platform.\nFor more details, read about:\nAPI Gateway Service Discovery Configuration Workflow Spring Admin Using the CLI Vault "},{"id":17,"href":"/microservices-datadriven/spring/blogs/","title":"Read our blogs!","parent":"Oracle Backend for Spring Boot - Developer Preview","content":"Our team members post blog articles and other content on various sites including Medium, LinkedIn (Corrado de Bari, Doug Drechsel), RedStack, DZone, Andy Tael and the Oracle Developers Blog. We\u0026rsquo;d love you to check them out. This page acts as an index/aggregator for some of our featured content.\nAnd be sure to subscribe to our YouTube channel \u0026ldquo;The Converged Database\u0026rdquo; for more great content!\nCoding for Observability in the Oracle Backend for Spring Boot\nCorrado shows how to configure a Spring Boot application to allow Prometheus to collect metrics and show them in a Grafana dashboard.\nCorrado de Bari - 7/25/2023\nChat with the Oracle DB\nCorrado shows how to leverage OpenAI models to make text-to-SQL translation on Oracle DB.\nCorrado de Bari - 7/19/2023\nOracle Backend for Spring Boot multi-cloud install on Azure\nJohn shows us how to install Oracle Backend for Spring Boot on Azure.\nJohn Lathouwers - 6/15/2023\nHow to use ChatGPT/OpenAI APIs from Oracle Backend for Spring Boot/Parse\nCorrado demonstrates how to use OpenAI APIs to provide AI application services to mobile clients through the Parse Platform.\nCorrado de Bari - 6/5/2023\nSpring Boot integration with Parse Platform\nCorrado and Doug show us how to use WebHooks in Parse Platform to expose Spring Boot microservices to mobile apps.\nCorrado de Bari - 6/1/2023\nExample: Use Liquibase with Spring Boot in Kubernetes\nJohn shows us how to use Liquibase with Spring Boot.\nJohn Lathouwers - 6/1/2023\nExample: Use SQLcl \u0026#43; Liquibase in Kubernetes initContainers\nJohn shows us how to use SQLcl and Liquibase in Kubernetes initContainers for effective Schema Change Management during deployments of microservices applications in Kubernetes that use Oracle Database.\nJohn Lathouwers - 5/26/2023\nKafka interoperability in Oracle Database 23c\nMark provides an overview of the Kafka compatibility features in Oracle Database 23c Free - Developer Release including the Java and REST APIs and the connectors.\nMark Nelson - 5/22/2023\nLearn how to build and deploy a Spring Boot application to Oracle Backend for Spring Boot using Spring starters for UCP and Wallet\nAndy shows us how to build a Phonebook application using Spring Boot with the Oracle Spring Boot Starters for Universal Connection Pools and wallet, and deploys the applications to the Oracle Backend for Spring Boot and tests it.\nAndy Tael - 5/17/2023\nStart up an Oracle Database in Kubernetes with Oracle REST Data Services and Database Actions in no time at all!\nMark demonstrates how easy it is to get an instance of Oracle up and running in Kubernetes, with Oracle REST Data Services and Database Actions using the Oracle Database Operator for Kubernetes.\nMark Nelson - 5/1/2023\nNew 23c version of Kafka-compatible Java APIs for Transactional Event Queues published\nMark demonstrates how to use the new 23c version of the Kafka-compatible Java APIs for Transactional Event Queues, available in Maven Central, which allow you to use the standard Kafka Java API with Transactional Event Queues acting as the Kafka broker. The only things that you would need to change are the broker address, and you need to use the Oracle versions of KafkaProducer and KafkaConsumer – other than that, your existing Kafka Java code should just work!\nMark Nelson - 5/1/2023\nSpring Boot Starters for Oracle updated\nAn example of how to use the new Spring Boot Starter for UCP for Spring 3.0.x.\nMark Nelson - 4/24/2023\nI have deployed Oracle Backend for Spring Boot (Developer preview). Now what?\nAndy shows us how easy it is to build a Spring Boot Phone Book application, deploy it to Oracle Backend for Spring Boot using the CLI, and create a route in APISIX Gateway to expose the REST endpoints.\nAndy Tael - 4/20/2023\nOracle Backend for Spring and Parse Video\nThis video introduces the Oracle Backend for Spring Boot (and Parse Platform) which makes it super easy to develop, run and manage Spring Boot microservices and mobile applications leveraging all the power of Oracle’s converged database.\nAndy Tael - 4/20/2023\nLong Running Actions\nPaul Parkinson demonstrates a Spring Boot microservices application that implements the Saga pattern with Long Running Actions using the Oracle Transaction Manager for Microservices to manage data consistency across microservices.\nPaul Parkinson - 4/18/2023\nOracle Mobile Backend As A Service\nMobile Backend As A Service (MBaaS) is a cloud service that an app developer can immediately start development against with just an endpoint. Doug finds out how far he can get developing a phone application without interacting with the server in any way other than the API endpoint.\nDoug Drechsel - 4/14/2023\nIntroducing Cloud Bank\nAnd introduction to the Cloud Bank sample application which showcases Spring Boot microservices, long running actions/sagas and a Flutter mobile application built with the Oracle Backend for Spring Boot.\nMark Nelson - 4/6/2023\nDeveloping Saga Participant Code For Compensating Transactions\nA detailed comparison of the saga pattern with XA (2PC) comparing the pros and cons of each approach to provide data integrity between multiple services and for potentially long running transactions.\nPaul Parkinson - 3/27/2023\nOracle Backend for Spring Boot is LIVE! (Developer Preview)\nAn introduction to the Oracle Backend for Spring Boot.\nAndy Tael - 3/25/2023\nA First Spring Boot Service with Oracle\nA detailed guide to building a Spring Boot microservice from scratch that uses Spring Data JPA to manage data in the Oracle Database and exposes various endpoints to access the data.\nMark Nelson - 2/3/2023\nReact Native and Oracle MBaaS – a beginner’s tutorial\nA step-by-step guide to building a React Native mobile application using the Parse APIs and Oracle Backend for Parse Platform.\nCorrado de Bari - 1/5/2023\nOracle Mobile Backend as a Service (MBaaS)\nAn introduction and walk-through of the Oracle Backend for Parse Platform, including installation, using the dashboard, getting started with application development and integration with the Oracle Autonomous Database.\nDoug Drechsel - 12/23/2022\nReact.JS on Oracle MBaaS\nA step-by-step guide to implement a simple ReactJS app leveraging Oracle MBaaS.\nCorrado de Bari - 12/22/2022\nTwo new Backend as a Service offerings live now!\nA brief announcement and introduction to our Developer Preview releases of Oracle Backend for Spring Boot and Parse Platform.\nMark Nelson - 12/21/2022\nDevelopment Environment Setup with Spring Boot For Oracle\nA detailed guide to setting up a development environment to build Spring Boot microservices with the Oracle Database.\nMark Nelson - 12/8/2022\nBackend-as-a-Service (BaaS) and Oracle Database (Video) OCW Teaser\nErin Dawson, DevRel Communications Manager talks with Mark about the Oracle CloudWorld 2022 presentations and hands-on labs for Oracle Backend for Spring Boot and Parse Platform.\nMark Nelson - 10/12/2022\nOracle REST Data Services 22.3 bring new REST APIs for Transactional Event Queues\nAn announcement and several example that show how to use the new REST APIs for Transactional Event Queues.\nMark Nelson - 10/11/2022\nGetting Started with the New Observability Exporter for Oracle Database\nA simple step-by-step getting started example that shows you how to use the Observability Exporter for Oracle Database to expose data from the Oracle Database as Prometheus metrics.\nMark Nelson - 9/27/2022\nDevelop React \u0026#43; GraphQL \u0026#43; Spring Data JPA \u0026#43; UCP \u0026#43; Oracle\nA a succinct description and example of a modern full stack microservice app including a React frontend service that conducts GraphQL queries against a Spring Boot Data JPA backend service that in turn maps to an Oracle database.\nPaul Parkinson - 9/18/2022\nUnified Observability Exporters: Metrics, Logs, and Tracing\nA deep dive into metrics, logs and tracing exporters for the Oracle Database and how to configure them with Grafana to provide unified observability for microservices and the Oracle Database.\nPaul Parkinson - 8/11/2022\nLet the Oracle Database Operator for Kubernetes Do the Job\nAn introduction to and overview of the Oracle Database Operator for Kubernetes.\nPaulo Simoes - 1/6/2022\nHow to use Vaults and Wallets for Simple Secure Connectivity\nProvides details on how to secure connections in Java, JavaScript, Python, .NET, and Go as well as convenience integration features that are provided by microservice frameworks, specifically Helidon and Micronaut.\nPaul Parkinson - 12/18/2021\nDeveloping Event Driven Microservices in Java, Javascript, PL/SQL, Go, Python\nLearn about developing Event-Driven Microservices in Java, JavaScript, Python, .NET, and Go with AQ/TEQ in the Oracle Database.\nPaul Parkinson - 12/17/2021\nApache Kafka vs Oracle Transactional Event Queues for Event Driven Microservices\nComparing transactional and message delivery behavior, as it relates to microservice architectures (event mesh, event sourcing, etc.) Kafka and Oracle Transaction Event Queues.\nPaul Parkinson - 9/23/2021\n","description":"Our team members post blog articles and other content on various sites including Medium, LinkedIn (Corrado de Bari, Doug Drechsel), RedStack, DZone, Andy Tael and the Oracle Developers Blog. We\u0026rsquo;d love you to check them out. This page acts as an index/aggregator for some of our featured content.\nAnd be sure to subscribe to our YouTube channel \u0026ldquo;The Converged Database\u0026rdquo; for more great content!\nCoding for Observability in the Oracle Backend for Spring Boot"},{"id":18,"href":"/microservices-datadriven/spring/release-notes/","title":"Release Notes","parent":"Oracle Backend for Spring Boot - Developer Preview","content":" Developer Preview 0.7.0, July 24, 2023 Notes:\nContinued incremental improvements to Oracle Database Adapter for Parse Server. The following components were added:\nComponent Version Description Coherence 3.2.11 Provides in-memory data grid. The following components were updated:\nComponent New Version Replaced Version Oracle Backend for Spring Boot Visual Studio Code extension 0.3.9 0.3.8 HashiCorp Vault 1.14.0 v1.11.3 Oracle Database Operator for Kubernetes 1.0 0.6.1 Parse Server 6.2.0 5.2.7 Parse Dashboard 5.1.0 5.0.0 Oracle Transaction Manager for Microservices 22.3.2 22.3.1 There were no component deprecations or removals.\nDeveloper Preview 0.3.1, June 14, 2023 Notes:\nImprovements to Oracle Cloud Infrastructure (OCI) installation process. Continued incremental improvements to Oracle Database Adapter for Parse Server. No components were added.\nThe following components were updated:\nComponent New Version Replaced Version Oracle Backend for Spring Boot CLI 0.3.1 0.3.0 Oracle Backend for Spring Boot Visual Studio Code extension 0.3.8 0.3.7 There were no component deprecations or removals.\nDeveloper Preview 0.3.0, April 17, 2023 Notes:\nOracle Backend for Spring Boot now includes the option to install in a Multicloud (OCI/Azure) environment. The Oracle Database Operator for Kubernetes is bound to the existing Oracle Autonomous Database (ADB) created by infrastructure as code (IaC) in an all-OCI installation and provisions the ADB in the Multicloud installation. Improvements to On-Premises and desktop installation processes. The following components were added:\nComponent New Version Description Oracle Backend for Spring Boot Visual Studio Code extension 0.3.7 Allows Visual Studio Code users to manage the platform, deployments and configuration. The following components were updated:\nComponent New Version Replaced Version Oracle Backend for Spring Boot CLI 0.3.0 0.1.0 There were no component deprecations or removals.\nDeveloper Preview 0.2.3, March 8, 2023 Notes:\nOracle Backend for Spring Boot now includes the option to also install Parse Platform in the same deployment. Oracle Backend for Spring Boot CLI 0.2.3 includes a number of bug fixes and adds support for custom listening ports for services. Apache APISIX is now pre-configured for both Eureka and Kubernetes service discovery. The following components were added:\nComponent Version Description Oracle Database Operator for Kubernetes 0.6.1 Helps reduce the time and complexity of deploying and managing Oracle databases. Parse Server 5.2.7 Provides backend services for mobile and web applications. Parse Dashboard 5.0.0 Uses a web user interface for managing Parse Server. Oracle Database Adapter for Parse Server 0.2.0 Enables the Parse Server to store data in an Oracle database. The following components were updated:\nComponent New Version Replaced Version Oracle Backend for Spring Boot CLI 0.2.3 0.1.0 cert-manager 1.11.0 1.10.1 NGINX Ingress Controller 1.6.4 1.5.1 Jaeger Tracing 1.39.0 1.37.0 Apache APISIX 3.1.1 2.15.1 Spring Boot Eureka service registry 2.0.1 2021.0.3 There were no deprecations or removals.\nDeveloper Preview 0.2.0, February 27, 2023 The following components were added:\nComponent Version Description Oracle Transaction Manager for Microservices 22.3.1 Manages distributed transactions to ensure consistency across Microservices. Strimzi-Apache Kafka Operator 0.33.1 Manages Apache Kafka clusters. Apacha Kafka 3.2.0 - 3.3.2 Allows distributed event streaming. There were no deprecations or removals.\nDeveloper Preview 0.1.0, January 30, 2023 The following components were added:\nComponent Version Description HashiCorp Vault v1.11.3 Provides a way to store and tightly control access to sensitive data. Oracle Backend for Spring Boot CLI 0.1.0 Provides a command-line interface to manage application deployment and configuration. Netflix Conductor OSS 3.13.2 Provides workflow orchestration for Microservices. On-premises installer 0.1.0 Allows installation of a self-hosted stack. There were no deprecations or removals.\nDeveloper Preview 0.0.1, December 20, 2022 This release includes the following components:\nComponent Version Description cert-manager 1.10.1 Automates the management of certificates. NGINX Ingress Controller 1.5.1 Provides a traffic management solution for cloud native applications in Kubernetes. Prometheus 2.40.2 Provides event monitoring and alerting. Prometheus operator 0.60.1 Provides management for Prometheus monitoring tools. OpenTelemetry Collector 0.66.0 Collects process and export telemetry data. Grafana 9.2.5 Examines, analyzes, and monitors metrics. Jaeger Tracing 1.37.0 Provides a distributed tracing system for monitoring and troubleshooting distributed systems. Apache APISIX 2.15.1 Provides full lifecycle API management. Spring Cloud Admin server 2.7.5 Manages and monitors Spring Boot applications. Spring Cloud Config server 2.7.5 Provides server-side support for externalized configuration. Spring Boot Eureka service registry 2021.0.3 Provides service discovery capabilities. ","description":"Developer Preview 0.7.0, July 24, 2023 Notes:\nContinued incremental improvements to Oracle Database Adapter for Parse Server. The following components were added:\nComponent Version Description Coherence 3.2.11 Provides in-memory data grid. The following components were updated:\nComponent New Version Replaced Version Oracle Backend for Spring Boot Visual Studio Code extension 0.3.9 0.3.8 HashiCorp Vault 1.14.0 v1.11.3 Oracle Database Operator for Kubernetes 1.0 0.6.1 Parse Server 6.2.0 5.2.7 Parse Dashboard 5."},{"id":19,"href":"/microservices-datadriven/spring/sample-apps/","title":"Sample Applications","parent":"Oracle Backend for Spring Boot - Developer Preview","content":"There are a number of demonstrations (videos) and hands on labs (Live Lab) that demonstrate how to use Oracle Backend for Spring Boot (and Parse Platform).\nPrerequisites Deployed Oracle Backend for Spring Boot (and Parse Platform) Introduction Video Watch this introductory video.\nBuild a Spring Boot Application With the Oracle Spring Boot Starters for UCP and Wallet In this video (18 minutes), Andy shows you how to build a Phonebook application using Spring Boot with the Oracle Spring Boot Starters for Universal Connection Pools (UCP) and wallet, and deploys the applications to the Oracle Backend for Spring Boot and tests it.\nCloudBank - Building an Application With Spring Boot and Mobile APIs With Oracle Database and Kubernetes In this workshop (~ 2 hours) you learn how to build Microservices using Spring Boot and deploy them to the Oracle Backend for Spring Boot. You learn about accessing the database using the Java Persistence API (JPA), service discovery, exposing services with the API Gateway, managing transactions across Microservices, workflow, and using observability tools to monitor your services and diagnose issues. You also learn about building a web and mobile user interface for your services using Flutter and Parse Platform.\nIf you already have deployed Oracle Backend for Spring Boot, you can skip Lab 1 (Provision an Instance).\nMore Learning There are more channels to learn about Oracle Backend for Spring Boot (and Parse Platform):\nCheck out our blogs Join our Youtube Channel ","description":"There are a number of demonstrations (videos) and hands on labs (Live Lab) that demonstrate how to use Oracle Backend for Spring Boot (and Parse Platform).\nPrerequisites Deployed Oracle Backend for Spring Boot (and Parse Platform) Introduction Video Watch this introductory video.\nBuild a Spring Boot Application With the Oracle Spring Boot Starters for UCP and Wallet In this video (18 minutes), Andy shows you how to build a Phonebook application using Spring Boot with the Oracle Spring Boot Starters for Universal Connection Pools (UCP) and wallet, and deploys the applications to the Oracle Backend for Spring Boot and tests it."},{"id":20,"href":"/microservices-datadriven/spring/security/","title":"Security","parent":"Oracle Backend for Spring Boot - Developer Preview","content":"The Oracle Backend for Spring Boot has the following security characteristics:\nAll access to the database is done using the Mutual Transport Layer Security (mTLS) database wallet. The user name, password, and URL are stored in Kubernetes secrets.\nAccessing the dashboards can only be done using port-forwarding.\nThe only \u0026ldquo;public\u0026rdquo; exposure is the Apache APISIX Gateway (note that the dashboard is not exposed publicly).\nServices deployed to the platform are not exposed through the Apache APISIX Gateway automatically. If you want to expose the service through the gateway, you must define a route in the Apache APISIX dashboard.\nThe deployed platform services are using using self-signed certificates.\nA customer application can only access services running in the platform using the Apache APISIX Gateway. The IP address for the gateway can be determined by using this command:\nkubectl -n ingress-nginx get svc ingress-nginx-controller The customer application can be secured using Spring Security (for example, Spring OAuth 2.0 Resource Server). An external authorization server is recommended (for example Okta or Auth0).\nThe following diagram provides an overview of the Spring Security architecture:\nNext, go to the Database Access page to learn more.\n","description":"The Oracle Backend for Spring Boot has the following security characteristics:\nAll access to the database is done using the Mutual Transport Layer Security (mTLS) database wallet. The user name, password, and URL are stored in Kubernetes secrets.\nAccessing the dashboards can only be done using port-forwarding.\nThe only \u0026ldquo;public\u0026rdquo; exposure is the Apache APISIX Gateway (note that the dashboard is not exposed publicly).\nServices deployed to the platform are not exposed through the Apache APISIX Gateway automatically."},{"id":21,"href":"/microservices-datadriven/spring/platform/eureka/","title":"Service Discovery","parent":"Platform Services","content":"Oracle Backend for Spring Boot includes the Spring Boot Eureka service registry, which is an application that stores information about client services or applications. Typically, each Microservice registers with the Eureka server at startup and the Eureka server maintains a list of all active instances of the service, including their ports and IP addresses. This information can be accessed by other services using a well-known key. This allows services to interact with each other without needing to know the other addresses at development or deployment time.\nAccess the Eureka Web User Interface To access the Eureka web user interface, process these steps:\nExpose the Eureka web user interface using this command:\nkubectl port-forward -n eureka svc/eureka 8761:8761 Open the Eureka web user interface URL http://localhost:8761\nEureka web user interface On the web page, you see all of the services registered with Eureka. If you deployed the sample applications, look for an entry called SLOW. The presence of this entry confirms that the application successfully registered itself with the service registry.\nYou should also see the CONFIG-SERVER and ADMIN-SERVER applications. These applications are deployed as part of the platform.\nNext, go to the Configuration page to learn more.\n","description":"Oracle Backend for Spring Boot includes the Spring Boot Eureka service registry, which is an application that stores information about client services or applications. Typically, each Microservice registers with the Eureka server at startup and the Eureka server maintains a list of all active instances of the service, including their ports and IP addresses. This information can be accessed by other services using a well-known key. This allows services to interact with each other without needing to know the other addresses at development or deployment time."},{"id":22,"href":"/microservices-datadriven/spring/setup/","title":"Setup","parent":"Oracle Backend for Spring Boot - Developer Preview","content":"Oracle Backend for Spring Boot is available in the OCI Marketplace.\nPrerequisites You must meet the following prerequisites to use Oracle Backend for Spring Boot. You need:\nAn Oracle Cloud Infrastructure (OCI) account in a tenancy with sufficient quota to create the following:\nAn OCI Container Engine for Kubernetes cluster (OKE cluster), plus a node pool with three worker nodes. A virtual cloud network (VCN) with at least two public IP\u0026rsquo;s available. A public load balancer. An Oracle Autonomous Database Serverless instance. At least one free OCI auth token (note that the maximum is two per user).\nOn a local machine, you need:\nThe Kubernetes command-line interface (kubectl). Oracle Cloud Infrastructure command-line interface (CLI). Oracle Backend for Spring Boot command-line interface (oractl). Summary of Components Oracle Backend for Spring Boot setup installs the following components:\nComponent Version Description cert-manager 1.11.0 Automates the management of certificates. NGINX Ingress Controller 1.6.4 Provides traffic management solution for cloud‑native applications in Kubernetes. Prometheus 2.40.2 Provides event monitoring and alerts. Prometheus Operator 0.63.0 Provides management for Prometheus monitoring tools. OpenTelemetry Collector 0.66.0 Collects process and export telemetry data. Grafana 9.2.5 Provides the tool to examine, analyze, and monitor metrics. Jaeger Tracing 1.39.0 Provides distributed tracing system for monitoring and troubleshooting distributed systems. Apache APISIX 3.2.0 Provides full lifecycle API management. Spring Boot Admin server 2.7.5 Manages and monitors Spring Cloud applications. Spring Cloud Config server 2.7.5 Provides server-side support for an externalized configuration. Spring Eureka service registry 3.1.4 Provides service discovery capabilities. HashiCorp Vault 1.14.0 Provides a way to store and tightly control access to sensitive data. Oracle Database operator 1.0 Helps reduce the time and complexity of deploying and managing Oracle databases. Oracle Transaction Manager for Microservices 22.3.1 Manages distributed transactions to ensure consistency across Microservices. Strimzi-Apache Kafka operator 0.33.1 Manages Apache Kafka clusters. Apacha Kafka 3.2.0 - 3.3.2 Provides distributed event streaming. Coherence 3.2.11 Provides in-memory data grid. Parse Server (optional) 6.2.0 Provides backend services for mobile and web applications. Parse Dashboard (optional) 5.1.0 Provides web user interface for managing the Parse Server. Oracle Database storage adapter for Parse (optional) 0.2.0 Enables the Parse Server to store data in Oracle Database. Conductor Server 3.13.2 Provides a Microservice orchestration platform. Overview of the Setup Process This video provides a quick overview of the setup process.\nSet Up the OCI Environment To set up the OCI environment, process these steps:\nGo to the OCI Marketplace listing for Oracle Backend for Spring Boot.\nMarketplace Listing Choose the target compartment, agree to the terms, and click Launch Stack. This starts the wizard and creates the new stack. On the first page, choose a compartment to host your stack and select Next.\nCreate Stack Fill in the following configuration variables as needed and select Next:\nCompartment : Select the compartment where you want to install Oracle Backend for Spring Boot. Application Name (optional) : A random name that will be used as the application name if left empty. Compartment and Application Name Fill in the following for the Parse Server:\nApplication ID (optional) : Leave blank to auto-generate.\nServer Master Key (optional) : Leave blank to auto-generate.\nDashboard Username : The user name of the user to whom access to the dashboard is granted.\nDashboard Password : The password of the dashboard user (a minimum of 12 characters).\nParse Server Options Fill in the following for the OKE Control Plane options:\nPublic Control Plane : This option allows access to the OKE Control Plane from the internet (public IP). If not selected, access can only be from a private virtual cloud network (VCN).\nControl Plane Access Control : The Classless Inter-Domain Routing (CIDR) IP range allows access to the Control Plane. Oracle recommends that you set this variable to be as restrictive as possible.\nEnable Horizontal Pod Scaling? : The Horizontal Pod Autoscaler helps applications scale out to meet increased demand, or scale in when resources are no longer needed.\nNode Pool Workers : The number of Kubernetes worker nodes (virtual machines) attached to the OKE cluster.\nNode Pool Worker Shape : The shape of the node pool workers.\nNode Workers OCPU : The initial number of Oracle Compute Units (OCPUs) for the node pool workers.\nCreate Stack Wizard Config Variables Fill in the following for the Load Balancers options:\nEnable Public Load Balancer : This option allows access to the load balancer from the internet (public IP). If not selected, access can only be from a private VCN. Public Load Balancer Ports Exposed : The ports exposed from the load balancer. Minimum bandwidth : The minimum bandwidth that the load balancer can achieve. Maximum bandwidth : The maximum bandwidth that the load balancer can achieve. Fill in the following Vault options. You have the option of creating a new OCI Vault or using an existing OCI Vault. Fill in the following information if you want to use an existing OCI Vault:\nVault Compartment (Optional) : Select a compartment for the OCI Vault. Existing Vault (Optional) : Select an existing OCI Vault. Existing Vault Key (Optional) : Select an existing OCI Vault key. Maximum bandwidth : The maximum bandwidth that the load balancer can achieve. If you unselect Enable Vault, the HashiCorp Vault is installed in Development mode.\nWarning Never run a Development mode server in a production environment. It is insecure and will lose data on every restart (since it stores data in-memory). It is only intended for development or experimentation. Create Stack Wizard Config Variables Fill in the following Database options. If you check Show Database Options, you can modify the following values:\nAutonomous Database Network Access : Choose the Autonomous Database network access. Autonomous Database CPU Core Count : The number of initial OCPUs used for the Oracle Autonomous Database Serverless (ADB-S) instance. Allow Autonomous Database OCPU Auto Scaling : Turn on ADB-S auto scaling. Autonomous Database Data Storage Size : The initial data storage size in terabytes (TB) for ADB-S. Autonomous Database License Model : The Autonomous Database license model. Database Options Now you can review the stack configuration and save the changes. Oracle recommends that you do not check the Run apply option. This gives you the opportunity to run the \u0026ldquo;plan\u0026rdquo; first and check for issues.\nCreate Stack Wizard Config Review Apply the stack.\nAfter you create the stack, you can test the plan, edit the stack, and apply or destroy the stack.\nOracle recommends that you test the plan before applying the stack in order to identify any issues before you start creating resources. Testing a plan does not create any actual resources. It is just an exercise to tell you what would happen if you did apply the stack.\nCreate Stack Plan You can test the plan by clicking on Plan and reviewing the output. You can fix any issues (for example, you may find that you do not have enough quota for some resources) before proceeding.\nWhen you are happy with the results of the test, you can apply the stack by clicking on Apply. This creates your Oracle Backend as a Service (OBaas) for a Spring Cloud environment. This takes about 20 minutes to complete. Much of this time is spent provisioning the Kubernetes cluster, worker nodes, and database. You can watch the logs to follow the progress of the operation.\nCreate Stack Apply The OCI Resource Manager applies your stack and generates the execution logs. The apply job takes approximately 45 minutes.\nCreate Stack Apply Logs Collect the OKE access information by clicking on Outputs.\nCreate Stack Outputs Click on Copy for the variable named kubeconfig_cmd. Save this information because it is needed to access the OKE cluster.\nGet Kube Config Cmd Set Up the Local Machine To set up the local machine, process these steps:\nSet up cluster access.\nTo access a cluster, use the kubectl command-line interface that is installed (see the Kubernetes access) locally. If you have not already done so, do the following:\nInstall the kubectl command-line interface (see the kubectl documentation).\nGenerate an API signing key pair. If you already have an API signing key pair, go to the next step. If not:\na. Use OpenSSL commands to generate the key pair in the required P-Early-Media (PEM) format. If you are using Windows, you need to install Git Bash for Windows in order to run the commands. See How to Generate an API Signing Key.\nb. Copy the contents of the public key to the clipboard to paste the value into the Console later.\nAdd the public key value of the API signing key pair to the User Settings for your user name. For example:\na. In the upper right corner of the OCI Console, open the Profile menu (User menu symbol) and click User Settings to view the details.\nb. Click Add Public Key.\nc. Paste the value of the public key into the window and click Add.\nThe key is uploaded and its fingerprint is displayed (for example, d1:b2:32:53:d3:5f:cf:68:2d:6f:8b:5f:77:8f:07:13).\nInstall and configure the Oracle Cloud Infrastructure CLI. For example:\na. Install the Oracle Cloud Infrastructure CLI version 2.6.4 (or later). See Quickstart.\nb. Configure the Oracle Cloud Infrastructure CLI. See Configuring the CLI.\nInstall the Oracle Backend for Spring Boot command-line.\nThe Oracle Backend for Spring Boot command-line interface, oractl, is available for Linux and Mac systems. Download the binary that you want from the Releases page and add it to your PATH environment variable. You can rename the binary to remove the suffix.\nIf your environment is a Linux or Mac machine, run chmod +x on the downloaded binary. Also, if your environment is a Mac, run the following command. Otherwise, you get a security warning and the CLI does not work:\nsudo xattr -r -d com.apple.quarantine \u0026lt;downloaded-file\u0026gt;\nNext, go to the Azure/OCI Multicloud Installation page to learn how to install Multicloud.\n","description":"Oracle Backend for Spring Boot is available in the OCI Marketplace.\nPrerequisites You must meet the following prerequisites to use Oracle Backend for Spring Boot. You need:\nAn Oracle Cloud Infrastructure (OCI) account in a tenancy with sufficient quota to create the following:\nAn OCI Container Engine for Kubernetes cluster (OKE cluster), plus a node pool with three worker nodes. A virtual cloud network (VCN) with at least two public IP\u0026rsquo;s available."},{"id":23,"href":"/microservices-datadriven/spring/platform/spring-admin/","title":"Spring Boot Admin","parent":"Platform Services","content":" View Application Details Using the Spring Boot Admin Dashboard Spring Boot Admin is a web application used for managing and monitoring Spring Boot applications. Applications are discovered from the service registry. Most of the information displayed in the web user interface comes from the Spring Boot Actuator endpoints exposed by the applications:\nExpose the Spring Boot Admin dashboard using this command:\nkubectl -n admin-server port-forward svc/admin-server 8989:8989 Open the Spring Boot Admin dashboard URL: http://localhost:8989\nusername: admin password: admin NOTE: Oracle recommends that you change the default password when you log in for the first time. Even though the dashboard is not accessible externally, Oracle still recommends using strong passwords to maximize security.\nSpring Admin DashboardI On the web page, navigate to the Applications tab:\nIf you deployed the Sample Applications, find and click the SLOW entry to expand it. Click on the instance of the service. Notice that you can see details about the service instance, metrics, configuration, and so on. Spring Admin Service Details Next, go to the OBaaS CLI page to learn more.\n","description":"View Application Details Using the Spring Boot Admin Dashboard Spring Boot Admin is a web application used for managing and monitoring Spring Boot applications. Applications are discovered from the service registry. Most of the information displayed in the web user interface comes from the Spring Boot Actuator endpoints exposed by the applications:\nExpose the Spring Boot Admin dashboard using this command:\nkubectl -n admin-server port-forward svc/admin-server 8989:8989 Open the Spring Boot Admin dashboard URL: http://localhost:8989"},{"id":24,"href":"/microservices-datadriven/spring/tags/","title":"Tags","parent":"Oracle Backend for Spring Boot - Developer Preview","content":"","description":""},{"id":25,"href":"/microservices-datadriven/spring/uninstall/","title":"Uninstall","parent":"Oracle Backend for Spring Boot - Developer Preview","content":"To remove Oracle Backend for Spring Boot, navigate to Developer Services then Resource Manager - Stacks in the Oracle Cloud Infrastructure Console (OCI Console) main menu. Ensure that you are in the correct region and compartment where you installed the Oracle Backend as a Service (OBaaS).\nClick on the link to open the detailed view for the Oracle Backend for Spring Boot instance and click Destroy to clean up resources. For example:\nOCI Stack Destroy The OCI Resource Manager uses the stack definition to destroy all resources. For example:\nOCI Stack Destroy Logs The destroy job takes about 20 minutes to complete. Review the logs when the job is done to ensure that it completed successfully. If there are any errors, run the Destroy job again.\nNext, go to the Release Notes page to learn more.\n","description":"To remove Oracle Backend for Spring Boot, navigate to Developer Services then Resource Manager - Stacks in the Oracle Cloud Infrastructure Console (OCI Console) main menu. Ensure that you are in the correct region and compartment where you installed the Oracle Backend as a Service (OBaaS).\nClick on the link to open the detailed view for the Oracle Backend for Spring Boot instance and click Destroy to clean up resources. For example:"},{"id":26,"href":"/microservices-datadriven/spring/platform/vault/","title":"Vault","parent":"Platform Services","content":"Oracle Backend as a Service for Spring Cloud includes HashiCorp Vault to secure, store and tightly control access to tokens, passwords, certificates, encryption keys for protecting secrets, and other sensitive data using a user interface (UI), command-line interface (CLI), or Hypertext Transfer Protocol (HTTP) API. The Vault can be deployed in two different ways. See the Setup:\nDevelopment mode Production mode Warning Never run a Development mode server in production. It is insecure and will lose data on every restart (since it stores data in-memory). It is only intended for development or experimentation. Tip For more information about working with the HashiCorp Vault, see the HashiCorp Vault Documentation and Tutorials Library. Setup Information Vault uses the following Oracle Cloud Infrastructure (OCI) services when running in Production mode. When running in Development mode, only the OCI Container Engine for Kubernetes (OKE) is used.\nObject storage for storing Vault data. OCI Vault to automatically unseal the Vault. OCI Container Engine for Kubernetes for running the Vault server. When running in Production mode, the Vault is unsealed using the OCI Key Management Service (KMS) key. The root token can be accessed using the kubectl command-line interface. The root token in Development mode is root.\nThe following Vault services are enabled during deployment. Other services can be enabled using the vault command and the web user interface:\nToken Authentication Method. The token authentication method is built-in and automatically available. It allows users to authenticate using a token, as well as create new tokens, revoke secrets by token, and more. AppRole Authentication Method. The approle authentication method allows machines or applications to authenticate with Vault-defined roles. Kubernetes Authentication Method. The kubernetes authentication method can be used to authenticate with Vault using a Kubernetes service account token. This method of authentication makes it easy to introduce a Vault token into a Kubernetes Pod. Userpass Authentication Method. The userpass authentication method allows users to authenticate with Vault with a user name and password combination. Key/Value Secrets Engine Version 2. The Key/Value secrets engine is a generic Key/Value store used to store arbitrary secrets. Accessing the root Token Production Mode root tokens have the root policy attached to them. root tokens can do anything in Vault and are useful in Development mode but should be restricted in Production mode. In fact, the Vault team recommends that root tokens only be used for the initial setup. Be sure to save the initial root token in a secure way. For example:\nkubectl get secret vault-root-token -n vault --template=\u0026#34;{{index .data \\\u0026#34;root.token\\\u0026#34; | base64decode}}\u0026#34; Accessing the root Token Development Mode The root token is set to root in Development mode. There are no recovery keys when running in Development mode.\nAccessing Vault Recovery Keys Production Mode Vault is configured to automatically unseal (auto unseal) using OCI Vault. Initializing with auto unseal creates five recovery keys that are stored in K8s Secrets. They MUST be retrieved and stored in a second location.\nTo extract the five recovery keys, use the following commands:\n% kubectl get secret vault-recovery-keys -n vault --template=\u0026#34;{{index .data \\\u0026#34;recovery.key.1\\\u0026#34; }}\u0026#34; % kubectl get secret vault-recovery-keys -n vault --template=\u0026#34;{{index .data \\\u0026#34;recovery.key.2\\\u0026#34; }}\u0026#34; % kubectl get secret vault-recovery-keys -n vault --template=\u0026#34;{{index .data \\\u0026#34;recovery.key.3\\\u0026#34; }}\u0026#34; % kubectl get secret vault-recovery-keys -n vault --template=\u0026#34;{{index .data \\\u0026#34;recovery.key.4\\\u0026#34; }}\u0026#34; % kubectl get secret vault-recovery-keys -n vault --template=\u0026#34;{{index .data \\\u0026#34;recovery.key.5\\\u0026#34; }}\u0026#34; Accessing Vault Using kubectl To access the Vault using the kubectl command-line interface, you need to set up Access Kubernetes Cluster.\nTest access to the Vault.\nVault Documentation contains all of the commands that you can use with the Vault CLI. For example, this command returns the current status of Vault:\nkubectl exec pod/vault-0 -n vault -it -- vault status The output looks similar to this:\nKey Value --- ----- Recovery Seal Type shamir Initialized true Sealed false Total Recovery Shares 5 Threshold 3 Version 1.11.3 Build Date 2022-08-26T10:27:10Z Storage Type oci Cluster Name vault-cluster-28535f69 Cluster ID 993662ee-b3ee-2a13-3354-97adae01e1ca HA Enabled true HA Cluster https://vault-0.vault-internal:8201 HA Mode active Active Since 2023-01-26T16:14:32.628291153Z Get the token and log in to the Vault.\nTo interact with the Vault in Production mode, you need to log in using a token that is stored in a K8s Secret. Get the token by running the following command. The output is the root token. It is very important that the token is saved in multiple places. Losing the token can result in loss of access to the Vault. In Development mode, the root token is root.\nGet the token with this command:\nkubectl get secret vault-root-token -n vault --template=\u0026#34;{{index .data \\\u0026#34;root.token\\\u0026#34; | base64decode}}\u0026#34; Log in to the Vault and provide the token with this command:\nkubectl exec pod/vault-0 -n vault -it -- vault login The following is sample output from logging in as the root user which should only be done during the initial set up. As an administrator, you must generate separate tokens and access control lists (ACLs) for the users that need access to the Vault. See Vault Documentation. For example:\nKey Value --- ----- token hvs....... token_accessor Hcx....... token_duration ∞ token_renewable false token_policies [\u0026#34;root\u0026#34;] identity_policies [] policies [\u0026#34;root\u0026#34;] To display the enabled secret engines, process this command:\nkubectl exec pod/vault-0 -n vault -it -- vault secrets list The output looks similar to this:\nPath Type Accessor Description ---- ---- -------- ----------- cubbyhole/ cubbyhole cubbyhole_a07a59ec per-token private secret storage identity/ identity identity_8b1e1a80 identity store kv-v2/ kv kv_06acc397 n/a sys/ system system_df5c39a8 system endpoints used for control, policy and debugging To display the enabled authentication methods, process this command:\nkubectl exec pod/vault-0 -n vault -it -- vault auth list The output looks similar to this:\nPath Type Accessor Description ---- ---- -------- ----------- approle/ approle auth_approle_00ffb93b n/a kubernetes/ kubernetes auth_kubernetes_c9bb0698 n/a token/ token auth_token_68b0beb2 token based credentials userpass/ userpass auth_userpass_afb2fb02 n/a Create a secret at path kv-v2/customer/acme with a customer_name and a customer_email. For example:\nkubectl exec pod/vault-0 -n vault -it -- vault kv put -mount=kv-v2 \\ customer/acme customer_name=\u0026#34;ACME Inc.\u0026#34; contact_email=\u0026#34;john.smith@acme.com\u0026#34; The output looks similar to this:\n====== Secret Path ====== kv-v2/data/customer/acme ======= Metadata ======= Key Value --- ----- created_time 2023-01-30T15:53:41.85529383Z custom_metadata \u0026lt;nil\u0026gt; deletion_time n/a destroyed false version 1 Retrieve the created secret:\nkubectl exec pod/vault-0 -n vault -it -- vault kv get -mount=kv-v2 customer/acme The output looks similar to this:\n====== Secret Path ====== kv-v2/data/customer/acme ======= Metadata ======= Key Value --- ----- created_time 2023-01-30T15:53:41.85529383Z custom_metadata \u0026lt;nil\u0026gt; deletion_time n/a destroyed false version 1 ======== Data ======== Key Value --- ----- contact_email john.smith@acme.com customer_name ACME Inc. For more information about the Key/Value secrets engine, see the Key/Value Documentation and Versioned Key/Value Secrets Engine Tutorial.\nAccessing the Vault Using the Web User Interface To access the Vault, process these steps:\nExpose the Vault web user interface (UI) using this command:\nkubectl port-forward -n vault svc/vault 8200:8200 Get the root token.\nTo interact with the Vault in Production mode, you need to log in using a token that is stored in a K8s Secret. Get the token by running the following command. The output is the root token. It is very important that the token is saved in multiple places. Losing the token can result in loss of access to the Vault. In Development mode, the root token is root. For example:\nkubectl get secret root-token -n vault --template=\u0026#34;{{index .data \\\u0026#34;root.token\\\u0026#34; | base64decode}}\u0026#34; Open the Vault web user interface URL: https://localhost:8200\nVault Web User Interface Log in using the root token. As an administrator, you must generate separate tokens and access control lists (ACLs) for the users that need access to the Vault. See Vault Documentation.\nYou are presented with the Home screen showing the installed secret engines. For example:\nVault Home Page Create a Key/Value secret.\na. Click on the k2-v2 link on the Home page:\nVault K/V V2 Home b. Click on the Create Secret link:\nVault Create Secret c. Create a secret:\nVault Secret d. View the secret content by clicking on the eye symbol next to each value:\nVault Show Secret Next, go to the VS Code Plugin page to learn more.\n","description":"Oracle Backend as a Service for Spring Cloud includes HashiCorp Vault to secure, store and tightly control access to tokens, passwords, certificates, encryption keys for protecting secrets, and other sensitive data using a user interface (UI), command-line interface (CLI), or Hypertext Transfer Protocol (HTTP) API. The Vault can be deployed in two different ways. See the Setup:\nDevelopment mode Production mode Warning Never run a Development mode server in production. It is insecure and will lose data on every restart (since it stores data in-memory)."},{"id":27,"href":"/microservices-datadriven/spring/platform/conductor/","title":"Workflow","parent":"Platform Services","content":"Oracle Backend as a Service for Spring Cloud includes the Netflix Conductor Server. Conductor is a popular workflow solution that works with Spring Boot Microservices and Oracle Database.\nDocumentation on Conductor can be found here:\nNetflix Conductor Documentation Accessing the Server User Interface (UI) Expose the Oracle Spring Cloud Admin server that the CLI calls by using this command:\nkubectl port-forward services/conductor-server -n conductor-server 8080:8080 Access the Conductor server UI at this URL:\nhttp://localhost:8080 Access the Swagger documentation at this URL:\nhttp://localhost:8080/swagger-ui/index.html API Specification The API Specification can be found here:\nAPI Specification Next, go to the Spring Boot Admin page to learn more.\n","description":"Oracle Backend as a Service for Spring Cloud includes the Netflix Conductor Server. Conductor is a popular workflow solution that works with Spring Boot Microservices and Oracle Database.\nDocumentation on Conductor can be found here:\nNetflix Conductor Documentation Accessing the Server User Interface (UI) Expose the Oracle Spring Cloud Admin server that the CLI calls by using this command:\nkubectl port-forward services/conductor-server -n conductor-server 8080:8080 Access the Conductor server UI at this URL:"}]