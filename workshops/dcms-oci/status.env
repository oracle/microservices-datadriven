#!/bin/bash
# Copyright (c) 2021 Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

# Make sure this is run via source or .
if ! (return 0 2>/dev/null); then
  echo "ERROR: Usage 'source status.env'"
  exit
fi


# Get the code location
MSDD_CODE="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../.." &> /dev/null && pwd )"
# Double check we have the right location
if ! test -d $MSDD_CODE/../microservices-datadriven; then
  echo "ERROR: This script is in the wrong location and cannot be sourced"
  return 1
fi
source $MSDD_CODE/common/source.env


# Source our environment
source $MSDD_WORKSHOP_CODE/$DCMS_WORKSHOP/source.env


# Banner
echo "$DCMS_WORKSHOP workshop setup status:"

# Check if we have started the setup
if ! test -d $DCMS_STATE; then
  echo "- Setup has not been run yet"
  return
fi


# Check the workshop apply
PID_FILE=$DCMS_STATE/PID
if test -f $DCMS_STATE/output.env; then
  echo "- The setup has completed"
  return
fi


if ! test -f $DCMS_STATE/PROVISIONING_PHASE; then
  echo "- The workshop is in an unknown phase"
  return
fi

PHASE=$(<$DCMS_STATE/PROVISIONING_PHASE)
if test $PHASE == "applying"; then
  RUNNING=setup
elif test $PHASE == "destroying"; then 
  RUNNING=teardown
elif test $PHASE == "destroyed"; then
  echo "- Workshop teardown has completed"
  return
fi


# Check the state store
STATE_STORE=$DCMS_INFRA_STATE/state_store
if ! test -d $STATE_STORE; then
  echo "- There is no state store"
  return
fi


# Check the vault
VAULT=$DCMS_INFRA_STATE/vault
if ! test -d $VAULT; then
  echo "- There is no vault"
  return
fi


# Check the background builds
if ! test -d $DCMS_STATE/background-builds; then
  # Background builds have not been started
  echo "- Background build was never started"
else
  PID_FILE=$DCMS_STATE/background-builds/PID
  if state_done POLYGLOT_BUILDS; then
    echo "- The background build has completed"
  elif test -f $PID_FILE && ps -fp $(<$PID_FILE)>/dev/null; then
    if state_done JAVA_BUILDS; then
      echo "- The background build is executing the polyglot builds"
    else
      echo "- The background build is executing the java builds"
    fi
  else
    echo "- The background build has failed, see log $DCMS_LOG_DIR/background-builds.log"
  fi
fi


# Check main setup or teardown
PID_FILE=$DCMS_STATE/PID
if test -f $PID_FILE && ps -fp $(<$PID_FILE)>/dev/null; then
  echo "- The $RUNNING is running"
else
  echo "- The $RUNNING has failed.  See log $DCMS_LOG_DIR/$RUNNING.log"
fi


# Check the background threads
THREADS="db build-prep k8s grabdish"
for t in $THREADS; do
  THREAD_STATE=$DCMS_THREAD_STATE/$t
  if ! test -d $THREAD_STATE; then
    # The thread has not been started
    echo "- Thread $t has not been started"
  else
    PID_FILE=$THREAD_STATE/PID
    if test -f $THREAD_STATE/output.env; then
      echo "- Thread $t apply has completed"
    elif test $PHASE == destroying && ! test -f $THREAD_STATE/state.env; then
      echo "- Thread $t destroy has completed"
    elif test -f $PID_FILE && ps -fp $(<$PID_FILE)>/dev/null; then
      echo "- Thread $t $PHASE is running"
      tail -1 $DCMS_LOG_DIR/$t-thread.log
      echo
    else
      echo "- Thread $t $PHASE has failed.  See log $DCMS_LOG_DIR/$t-thread.log"
    fi
  fi
done