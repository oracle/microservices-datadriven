#!/bin/bash
# Copyright (c) 2021 Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

# Make sure this is run via source
if ! (return 0 2>/dev/null) ; then
  echo "ERROR: Usage 'source setup.env <COMPARTMEMT> <PARENT COMPARTMENT OCID>'"
  exit
fi


# Get the code location
MSDD_CODE="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../.." &> /dev/null && pwd )"
# Double check we have the right location
if ! test -d $MSDD_CODE/../microservices-datadriven; then
  echo "ERROR: This script is in the wrong location and cannot be sourced"
  return 1
fi
source $MSDD_CODE/common/source.env


# Source our environment
source $MSDD_WORKSHOP_CODE/$DCMS_WORKSHOP/source.env


if test -f $DCMS_STATE/output.env; then
  # Setup has completed, nothing to do
  echo "Setup has already completed successfully"
  return
fi


if ! test -f $DCMS_STATE/state.env; then
  # First time setup
  mkdir -p $DCMS_STATE
  mkdir -p $DCMS_LOG_DIR

  # Check that the prerequisite utils are installed
  for util in oci kubectl terraform docker mvn ssh sqlplus helm; do
    exec=`which $util`
    if test -z "$exec"; then
      echo "ERROR: $util is not installed"
      return 1
    fi
  done

  # Check that the OCI CLI is configured
  if ! test -f "$OCI_CLI_CONFIG_FILE" && ! test -f ~/.oci/config; then
    echo "ERROR: The OCI CLI is not configured"
    return 1
  fi

  HOME_REGION=`oci iam region-subscription list --query 'data[?"is-home-region"]."region-name" | join('\'' '\'', @)' --raw-output`

  # Run Type
  if [[ "$HOME" =~ /home/ll[0-9]{1,5}_us ]]; then
    # Green Button (hosted by Live Labs)
    RUN_TYPE="LL"
  else
    # Own Tenancy
    RUN_TYPE="OT"
  fi

  # Create or validate the compartment
  while true; do
    if test "$RUN_TYPE" == "LL"; then
      # The compartment is already created.  Ask for the OCID
      read -p "Please enter your OCI compartment's OCID: " COMPARTMENT_OCID
      if ! oci iam compartment get --compartment-id "$COMPARTMENT_OCID" 2>&1 >$DCMS_LOG_DIR/comp_ocid_err; then
        echo "ERROR: The compartment $COMPARTMENT_OCID does not exist.  Please retry."
        cat $DCMS_LOG_DIR/comp_ocid_err
        continue
      fi     

    elif test -z "$1"; then
      echo "ERROR: No compartment specified"
      return 1
    
    elif [[ "$1" =~ ocid1.* ]]; then
      # An existing compartment
      COMPARTMENT_OCID="$1"
      if ! oci iam compartment get --compartment-id "$COMPARTMENT_OCID" 2>&1 >$DCMS_LOG_DIR/comp_ocid_err; then
        echo "ERROR: The compartment $COMPARTMENT_OCID does not exist."
        cat $DCMS_LOG_DIR/comp_ocid_err
        return 1
      fi     

    elif [[ "$1" =~ ^[a-zA-Z][a-zA-Z0-9]{0,12}$ ]]; then
      # We have the compartment name
      if [[ "$2" =~ ocid1.* ]]; then
        # We have the parent compartment's OCID
        PARENT_COMPARTMENT_OCID="$2"
      else
        # Assume parent compartment is the root compartment (= TENANCY OCID)
        if ! test -z "$OCI_TENANCY"; then
          PARENT_COMPARTMENT_OCID="$OCI_TENANCY"
        else
          # Get the tenancy OCID
          while true; do
            read -p "Please enter your OCI tenancy OCID: " OCI_TENANCY
            if oci iam tenancy get --tenancy-id "$OCI_TENANCY" 2>&1 >$DCMS_LOG_DIR/tenancy_ocid_err; then
              PARENT_COMPARTMENT_OCID="$OCI_TENANCY"
              break
            else
              echo "The tenancy OCID $OCI_TENANCY could not be validated.  Please retry."
              cat $DCMS_LOG_DIR/tenancy_ocid_err
            fi
          done
        fi
      fi

      # Check to see if a compartment of this name already exists
      COMPARTMENT_OCID=`oci iam compartment list --compartment-id "$PARENT_COMPARTMENT_OCID" --name "$1" --query 'data[0].id' --raw-output`
      if [[ ! "$COMPARTMENT_OCID" =~ ocid1.* ]]  ; then
        # It does not already exist and so create it
        COMPARTMENT_OCID=`oci iam compartment create --region $HOME_REGION --compartment-id "$PARENT_COMPARTMENT_OCID" --name "$1" --description "GrabDish Workshop" --query 'data.id' --raw-output`
      fi
 
    else
      echo "ERROR: Invalid compartment name $1.  It must be between 1 and 13 characters,"
      echo "containing only letters or numbers, starting with a letter."
      return 1
    fi

    # Wait for the compartment to become active
    while ! test `oci iam compartment get --compartment-id "$COMPARTMENT_OCID" --query 'data."lifecycle-state"' --raw-output 2>/dev/null`"" == 'ACTIVE'; do
      echo "Waiting for the compartment to become ACTIVE"
      sleep 2
    done
    
    break
  done
  cat >$DCMS_STATE/input.env <<!
TENANCY_OCID='$OCI_TENANCY'
COMPARTMENT_OCID='$COMPARTMENT_OCID'
!

fi # End first time setup


# Run the setup
cd $DCMS_STATE
if ! provisioning-apply "$MSDD_WORKSHOP_CODE/dcms-oci/config" 2>&1 ; then
  echo "ERROR: Provisioning failed"
  return 1
fi | tee -a $DCMS_LOG_DIR/setup.log


# Source our environment (again)
source $MSDD_WORKSHOP_CODE/$DCMS_WORKSHOP/source.env


cd $MSDD_CODE/$DCMS_APP