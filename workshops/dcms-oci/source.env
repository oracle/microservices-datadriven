#!/bin/bash
# Copyright (c) 2021 Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

export VIRTUAL_ENV=''
export USER=''
# set -eu

# Make sure this is run via source or .
if ! (return 0 2>/dev/null); then
  echo "ERROR: Usage 'source setup.sh'"
  return 0
fi


# Get the code location
MSDD_CODE="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../.." &> /dev/null && pwd )"
# Double check we have the right location
if ! test -d $MSDD_CODE/../microservices-datadriven; then
  echo "ERROR: This script $MSDD_CODE is in the wrong location and cannot be sourced"
  return 0
fi
export MSDD_CODE


# Get OS
DCMS_SETUP_OS=`uname`
case "$DCMS_SETUP_OS" in
  Linux | Darwin)
    ;;
  *)
    echo "Unsupported operating system $DCMS_SETUP_OS for setup"
    return 0
    ;;
esac


# Source the common variables and utils
source $MSDD_CODE/common/source.env


# Set the workshop variables
export DCMS_APP='grabdish'
export DCMS_WORKSHOP='dcms-oci'


function status() {
  $MSDD_WORKSHOP_CODE/$DCMS_WORKSHOP/status.sh "${1-0}"
  source $MSDD_WORKSHOP_CODE/$DCMS_WORKSHOP/source.env
}
export -f status

# Create setup, status, teardown and kill-all functions
function setup() {
  $MSDD_WORKSHOP_CODE/$DCMS_WORKSHOP/setup.sh
  source $MSDD_WORKSHOP_CODE/$DCMS_WORKSHOP/source.env
  status 10
  source $MSDD_WORKSHOP_CODE/$DCMS_WORKSHOP/source.env
}
export -f setup

function teardown() {
  $MSDD_WORKSHOP_CODE/$DCMS_WORKSHOP/teardown.sh
  source $MSDD_WORKSHOP_CODE/$DCMS_WORKSHOP/source.env
  status 10
}
export -f teardown

function kill-all() {
  cd $DCMS_STATE
  for f in `find . -name PID`; do
    kill $(<$f);
  done
}
export -f kill-all


# Find workshop run state
cd $MSDD_CODE/..
export DCMS_RUN_DIR=$PWD/${DCMS_WORKSHOP}-run
export DCMS_STATE_STORE=$DCMS_RUN_DIR/state_store
export DCMS_VAULT=$DCMS_RUN_DIR/vault
export DCMS_BACKGROUND_BUILDS=$DCMS_RUN_DIR/background_builds
export DCMS_STATE=$DCMS_RUN_DIR/state
export DCMS_LOG_DIR=$DCMS_RUN_DIR/log
export GRABDISH_HOME=$MSDD_CODE/$DCMS_APP
export GRABDISH_LOG=$DCMS_LOG_DIR

mkdir -p $DCMS_STATE_STORE $DCMS_STATE $DCMS_VAULT $DCMS_BACKGROUND_BUILDS $DCMS_LOG_DIR

# Setup background build lists
export LABS_WITH_BUILDS="Lab2 Lab3 Lab7"
export LAB2_JAVA_BUILDS="frontend-helidon order-helidon supplier-helidon-se inventory-helidon"
export LAB2_NON_JAVA_BUILDS="foodwinepairing-python"
export LAB3_JAVA_BUILDS="inventory-springboot inventory-micronaut inventory-quarkus inventory-helidon-se"
export LAB3_NON_JAVA_BUILDS="inventory-python inventory-nodejs inventory-dotnet inventory-go inventory-plsql"
export LAB7_JAVA_BUILDS="order-mongodb-kafka inventory-postgres-kafka"
export LAB7_NON_JAVA_BUILDS=""

# Construct list of all lab builds
export ALL_LAB_BUILDS=''
for lab in $LABS_WITH_BUILDS; do
  lab_upper=`echo $lab | tr '[:lower:]' '[:upper:]'`
  JAVA_BUILDS_VAR="${lab_upper}_JAVA_BUILDS"
  NON_JAVA_BUILDS_VAR="${lab_upper}_NON_JAVA_BUILDS"
  ALL_LAB_BUILDS="$ALL_LAB_BUILDS ${!NON_JAVA_BUILDS_VAR} ${!JAVA_BUILDS_VAR} "
done

# Get the state store
if test "$(provisioning-get-status $DCMS_STATE_STORE)" == "applied"; then
  source $DCMS_STATE_STORE/output.env
else
  return 0
fi


# Get the vault
if test "$(provisioning-get-status $DCMS_VAULT)" == "applied"; then
  source $DCMS_VAULT/output.env
else
  return 0
fi


# Get the setup output
if test "$(provisioning-get-status $DCMS_STATE)" == "applied"; then
  source $DCMS_STATE/output.env
else
  return 0
fi


# Setup Grabdish Environment
source $GRABDISH_HOME/source.env
cd $GRABDISH_HOME
