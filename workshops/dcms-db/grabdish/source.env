#!/bin/bash
# Copyright (c) 2021 Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

# Make sure this is run via source or .
if ! (return 0 2>/dev/null); then
  echo "ERROR: Usage 'source source.env'"
  return 0
fi

# Collect ADB-S DB password
# Use the environment variable TEST_DB_PASSWORD if set
function collect_adbs_db_password {
  local PW
  while true; do
    if test -z "${TEST_DB_PASSWORD-}"; then
      echo
      echo 'Database passwords must be 12 to 30 characters and contain at least one uppercase letter,'
      echo 'one lowercase letter, and one number. The password cannot contain the double quote (")'
      echo 'character or the word "admin".'
      echo

      read -s -r -p "Enter the password to be used for the database: " PW
    else
      PW="${TEST_DB_PASSWORD-}"
    fi
    if [[ ${#PW} -ge 12 && ${#PW} -le 30 && "$PW" =~ [A-Z] && "$PW" =~ [a-z] && "$PW" =~ [0-9] && "$PW" != *admin* && "$PW" != *'"'* ]]; then
      break
    else
      echo "Invalid Password, please retry"
    fi
  done

  DB_PASSWORD="$PW"
}


# Collect UI password
# Use the environment variable TEST_UI_PASSWORD if set
function collect_ui_password {
  local PW
  echo
  echo 'UI passwords must be 8 to 30 characters'
  echo

  while true; do
    if test -z "${TEST_UI_PASSWORD-}"; then
      read -s -r -p "Enter the password to be used for accessing the UI: " PW
    else
      PW="${TEST_UI_PASSWORD-}"
    fi
    if [[ ${#PW} -ge 8 && ${#PW} -le 30 ]]; then
      break
    else
      echo "Invalid Password, please retry"
    fi
  done

  UI_PASSWORD="$PW"
}


# Set the ADB-S DB admin password
function set_adbs_admin_password {
  local _db_ocid=$1

  param_file=temp_params
  trap "rm -f -- '$param_file'" EXIT

  umask 177
  echo '{"adminPassword": "'"$DB_PASSWORD"'"}' > $param_file
  umask 22
  oci db autonomous-database update --autonomous-database-id "$_db_ocid" --from-json "file://$param_file" >/dev/null
  rm $param_file
}


# Setup ORDS server
function setup_ords {
  local _server_ip=$1
  local _private_ssh_key_file=$2
  local _app_code_home=$3
  local _db_alias=$4
  local _tns_admin_zip_file=$5

	source ${_app_code_home}/config/db/params.env

  local ords_dir="/opt/oracle/ords"

  local base64_tns_admin=$(base64 -w 0 ${_tns_admin_zip_file})

  # Upload the web app
  scp -o StrictHostKeyChecking=false -i $_private_ssh_key_file -r $_app_code_home/web opc@$_server_ip:/tmp

  # Connect to the ORDS server and configure
  ssh -o StrictHostKeyChecking=false -i $_private_ssh_key_file opc@$_server_ip <<- !
    sudo su - oracle

    # Configure the DB connections
    mkdir -p ${ords_dir}/config/ords/conf
    for conn in apex order inventory; do    
    	cat > ${ords_dir}/config/ords/conf/${conn}_pu.xml <<- EOF
        <?xml version="1.0" encoding="UTF-8" standalone="no"?>
        <!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
        <properties>
        <entry key="db.username">${ORDS_USER}</entry>
        <entry key="db.password">!${DB_PASSWORD}</entry>
        <entry key="db.wallet.zip.service">${_db_alias}</entry>
        <entry key="db.wallet.zip"><![CDATA[${base64_tns_admin}]]></entry>
        </properties>
      EOF
    done

    # Configure the connection mappings
    cat > ${ords_dir}/config/ords/url-mapping.xml <<- EOF
      <?xml version="1.0" encoding="UTF-8"?>
      <pool-config xmlns="http://xmlns.oracle.com/apex/pool-config">
      <pool name="order" base-path="/order" updated="2022-03-17T20:07:33.480Z"/>
      <pool name="inventory" base-path="/inventory" updated="2022-03-17T20:07:33.480Z"/>
      </pool-config>
    EOF

    # Configure the ORDS defaults
    cat > ${ords_dir}/config/ords/defaults.xml <<- EOF
      <?xml version="1.0" encoding="UTF-8" standalone="no"?>
      <!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
      <properties>
      <entry key="plsql.gateway.enabled">true</entry>
      <entry key="jdbc.InitialLimit">3</entry>
      <entry key="jdbc.MaxLimit">3</entry>
      <entry key="jdbc.enableONS">false</entry>
      <entry key="feature.sdw">false</entry>
      <entry key="restEnabledSql.active">true</entry>
      <entry key="database.api.enabled">false</entry>
      <entry key="misc.defaultPage">f?p=DEFAULT</entry>
      </properties>
    EOF

    # Configure standalone properties
    mkdir -p ${ords_dir}/config/ords/standalone/web
    cat > ${ords_dir}/config/ords/standalone/standalone.properties <<- EOF
      jetty.port=8080
      standalone.context.path=/ords
      standalone.doc.root=${ords_dir}/config/ords/standalone/web
      standalone.scheme.do.not.prompt=true
      standalone.static.context.path=/i
    EOF

    # ORDS conf
    cat >/etc/ords/ords.conf <<- EOF
      ORDS_CONFIGDIR=/opt/oracle/ords/config
      JAVA_HOME=/usr/java/latest
      JAVA_OPTIONS=-Xmx2048m
      ORDS_BASE_PATH=/opt/oracle
    EOF

    # Copy the web app over
    cp -r /tmp/web/* ${ords_dir}/config/ords/standalone/web/

	  # Set ORDS config
    java -jar -Xmx1024M /opt/oracle/ords/ords.war configdir /opt/oracle/ords/config

    exit
    sudo su - root

  	systemctl enable ords
    systemctl restart ords
  	systemctl restart firewalld

!
}

# Setup DB
function grabdish_db_setup {
  # Assumes the local variable DB_PASSWORD is set
  # Assumes sqlplus is installed
  if test -z "$DB_PASSWORD"; then
    echo 'ERROR: Invalid local variable DB_PASSWORD'
    return 1
  fi

	local _db_alias=$1
  local _queue_type=$2
  local _app_code_home=$3

	# source the script params
	local QUEUE_TYPE=${_queue_type}
	local DB1_ALIAS=${_db_alias}
	source ${_app_code_home}/config/db/params.env

  cd ${db_script_home}/config/db/1db/apply
	for f in $(ls *.sql); do
    # First expansion to include common files.  Base 64 to preserve newlines.
    SCRIPT=`eval "
      cat <<- !
        $(<$f)
!
    " | base64`

    # Second expansion to substitute passwords (for security)
    eval "
      cat <<- !
        $(base64 --decode <<<$SCRIPT)
!
    " | sqlplus /nolog
  done
}

# Deploy Service
function deploy_service {
  # Assumes the local variable DB_PASSWORD is set
  # Assumes sqlplus is installed
  if test -z "$DB_PASSWORD"; then
    echo 'ERROR: Invalid local variable DB_PASSWORD'
    return 1
  fi

	local _service=$1       # order / inventory
  local _app_code_home=$2
	local _db_alias=$3
  local _language=$4      # plsql / js

	# Source the DB parameters
  source ${_app_code_home}/config/db/params.env

  # cd to the service code home
  cd $_app_code_home/$_service

  sqlplus /nolog <<- !
    $(undeploy.sql)
    $(${_service}-{$_language}/*.sql)
    $(deploy.sql)
!
}