#!/bin/bash
# Copyright (c) 2021 Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

# Make sure this is run via source or .
if ! (return 0 2>/dev/null); then
  echo "ERROR: Usage 'source source.env'"
  return 0
fi

# Base 64 encoder
function base64-encode() {
  # Encode base64 file named $1 with no wrapping on any supported platform
  if test `uname` == Darwin; then
    base64 -b 0
  else
    base64 -w0
  fi
}

# Substitute shell variables into input and return as output
function subst_shell_var {
  # Use base64 to avoid creating a file (security) and to prevent removal of newlines and nulls
  local script=$(base64-encode) # Read STDIN into a variable in base64 encoding

  # Perform variable substitution
  eval "cat <<- UNIQUEEOF
$(base64 --decode <<<$script)
UNIQUEEOF
"
}

# Collect ADB-S DB password
# Use the environment variable TEST_DB_PASSWORD if set
function collect_db_password {
  local PW
  while true; do
    if test -z "${TEST_DB_PASSWORD-}"; then
      echo
      echo 'Database passwords must be 12 to 30 characters and contain at least one uppercase letter,'
      echo 'one lowercase letter, and one number. The password cannot contain the double quote (")'
      echo 'character or the word "admin".'
      echo

      read -s -r -p "Enter the password to be used for the database: " PW
    else
      PW="${TEST_DB_PASSWORD-}"
    fi
    if [[ ${#PW} -ge 12 && ${#PW} -le 30 && "$PW" =~ [A-Z] && "$PW" =~ [a-z] && "$PW" =~ [0-9] && "$PW" != *admin* && "$PW" != *'"'* ]]; then
      break
    else
      echo "Invalid Password, please retry"
    fi
  done

  DB_PASSWORD="$PW"
}

# Collect UI password
# Use the environment variable TEST_UI_PASSWORD if set
function collect_ui_password {
  local PW
  echo
  echo 'UI passwords must be 8 to 30 characters'
  echo

  while true; do
    if test -z "${TEST_UI_PASSWORD-}"; then
      read -s -r -p "Enter the password to be used for accessing the UI: " PW
    else
      PW="${TEST_UI_PASSWORD-}"
    fi
    if [[ ${#PW} -ge 8 && ${#PW} -le 30 ]]; then
      break
    else
      echo "Invalid Password, please retry"
    fi
  done

  UI_PASSWORD="$PW"
}

# Set the ADB-S DB admin password
function set_adbs_admin_password {
  local _db_ocid=$1

  param_file=temp_params
  trap "rm -f -- '$param_file'" EXIT

  umask 177
  echo '{"adminPassword": '`echo -n "$DB_PASSWORD" | jq -aRs .`'}' > temp_params
  umask 22
  oci db autonomous-database update --autonomous-database-id "$_db_ocid" --from-json "file://$param_file" >/dev/null
  rm $param_file
}

# Create ORDS Schema
function create_ords_schema {
  local _schema_name=$1
  local _admin_user=$2
  local _db_alias=$3

  # Assumes the local variable DB_PASSWORD is set
  if test -z "$DB_PASSWORD"; then
    echo 'ERROR: Invalid local variable DB_PASSWORD'
    return 1
  fi

  # Create the schema
  sqlplus /nolog <<!
  connect ${_admin_user}/"${DB_PASSWORD}"@${_db_alias}
  create user ${_schema_name} identified by "${DB_PASSWORD}";
  grant connect to ${_schema_name};
  alter user ${_schema_name} profile ORA_APP_PROFILE;
  BEGIN
    ORDS_ADMIN.PROVISION_RUNTIME_ROLE (
      p_user => '${_schema_name}',
      p_proxy_enabled_schemas => TRUE
    );
  END;
  /
!
}

# Setup ORDS server
function setup_adbs_customer_managed_ords {
  local _db_alias=$1
  local _tns_admin_zip_file=$2
  local _ords_schema_name=$3

  # Assumes variable DB_PASSWORD is set.  Not passed as parameter for security.
  if test -z "$DB_PASSWORD"; then
    echo "ERROR: DB_PASSWORD must be set"
    return 1
  fi

  # Should be executed as user oracle pn ORDS server
  if test "$USER" != 'oracle'; then
    echo "ERROR: Must be run as user oracle"
    return 1
  fi

  local _base64_tns_admin=$(base64 -w 0 ${_tns_admin_zip_file})

  _ords_config=/opt/oracle/ords/config

  # Register config directory
  java -jar /opt/oracle/ords/ords.war configdir $_ords_config

  # Create the static content home
  mkdir -p $_ords_config/ords/standalone/web $_ords_config/ords/conf

  cat >$_ords_config/ords/conf/apex_pu.xml <<!
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
<entry key="db.username">${_ords_schema_name}</entry>
<entry key="db.password">!${DB_PASSWORD}</entry>
<entry key="db.wallet.zip.service">${_db_alias}</entry>
<entry key="db.wallet.zip"><![CDATA[${_base64_tns_admin}]]></entry>
</properties>
!

  cat >$_ords_config/ords/defaults.xml <<!
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
<entry key="plsql.gateway.enabled">false</entry>
<entry key="jdbc.InitialLimit">3</entry>
<entry key="jdbc.MaxLimit">3</entry>
<entry key="feature.sdw">false</entry>
<entry key="restEnabledSql.active">false</entry>
<entry key="database.api.enabled">false</entry>
<entry key="misc.defaultPage">f?p=DEFAULT</entry>
</properties>
!

  cat >$_ords_config/ords/standalone/standalone.properties <<!
jetty.port=8080
standalone.context.path=/ords
standalone.doc.root=/opt/oracle/ords/config/ords/standalone/web
standalone.scheme.do.not.prompt=true
standalone.static.context.path=/i
!

  cat >/etc/ords/ords.conf <<!
ORDS_CONFIGDIR=/opt/oracle/ords/config
JAVA_HOME=/usr/java/latest
JAVA_OPTIONS=-Xmx2048m
ORDS_BASE_PATH=/opt/oracle
!
}

function deploy_grabdish_on_ords {
  local _grabdish_home=$1

  local _ords_config=/opt/oracle/ords/config

  # Assumes variable UI_PASSWORD is set.  Not passed as parameter for security.
  if test -z "$UI_PASSWORD"; then
    echo "ERROR: UI_PASSWORD must be set"
    return 1
  fi

  # Create a connection pool for each service
  for conn in order inventory; do
    cp $_ords_config/ords/conf/apex_pu.xml $_ords_config/ords/conf/${conn}_pu.xml
  done

  # Configure the connection mappings
  cat >$_ords_config/ords/url-mapping.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<pool-config xmlns="http://xmlns.oracle.com/apex/pool-config">
<pool name="order" base-path="/order" updated="2022-03-17T20:07:33.480Z"/>
<pool name="inventory" base-path="/inventory" updated="2022-03-17T20:07:33.480Z"/>
</pool-config>
EOF

  # Copy over the web static content
  cp -r ${_grabdish_home}/web/* ${_ords_config}/ords/standalone/web/

  # Setup grabdish
  java -jar /opt/oracle/ords/ords.war user grabdish order_user inventory_user <<EOF
$UI_PASSWORD
$UI_PASSWORD
EOF
}

# Setup Grabdish in the DB
function setup_grabdish_in_db {
  local _grabdish_code=$1
  local _order_lang=$2     #plsql/js
  local _inventory_lang=$3 #plsql/js
  local _queue_type=$4
  local _db_alias=$5

  # Assumes the local variable DB_PASSWORD is set
  if test -z "$DB_PASSWORD"; then
    echo 'ERROR: Invalid local variable DB_PASSWORD'
    return 1
  fi

	# source the script params
	local QUEUE_TYPE=${_queue_type}
	local DB1_ALIAS=${_db_alias}
	source ${_grabdish_code}/config/db/params.env

  cd ${_grabdish_code}/config/db/1db/apply
	for f in $(ls *.sql); do
    # Double substitution for these files to pick up included files
    cat $f | subst_shell_var | subst_shell_var | sqlplus /nolog
  done

  deploy_mservice ${_grabdish_code} 'order'     ${_order_lang}     ${_queue_type} ${_db_alias}
  deploy_mservice ${_grabdish_code} 'inventory' ${_inventory_lang} ${_queue_type} ${_db_alias}
}

# Deploy Microservice
function deploy_mservice {
  local _grabdish_code=$1
  local _service=$2     #order/inventory
  local _lang=$3        #plsql/js
  local _queue_type=$4
  local _db_alias=$5

  # Assumes the local variable DB_PASSWORD is set
  if test -z "$DB_PASSWORD"; then
    echo 'ERROR: Invalid local variable DB_PASSWORD'
    return 1
  fi

	# Source the DB parameters
	local QUEUE_TYPE=${_queue_type}
	local DB1_ALIAS=${_db_alias}
  source ${_grabdish_code}/config/db/params.env

  # cd to the service code home
  cd ${_grabdish_code}/$_service

  if test "${_service}" == 'order'; then
    cat - undeploy.sql ${_service}-${_lang}/*.sql deploy.sql <<'!' | subst_shell_var | sqlplus /nolog
    connect $ORDER_USER/"$ORDER_PASSWORD"@$DB1_ALIAS
!
  elif test "${_service}" == 'inventory'; then
    cat - undeploy.sql ${_service}-${_lang}/*.sql deploy.sql <<'!' | subst_shell_var | sqlplus /nolog
    connect $INVENTORY_USER/"$INVENTORY_PASSWORD"@$DB1_ALIAS
!
  fi
}
