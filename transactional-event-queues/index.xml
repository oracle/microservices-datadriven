<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Transactional Event Queues</title>
    <link>https://oracle.github.io/microservices-datadriven/transactional-event-queues/index.html</link>
    <description>Oracle Transactional Event Queues (TxEventQ) is a messaging platform built into Oracle Database that combines the best features of messaging and pub/sub systems. TxEventQ was introduced as a rebranding of AQ Sharded Queues in Oracle Database 21c, evolving from the Advanced Queuing (AQ) technology that has been part of Oracle Database since version 8.0. TxEventQ continues to evolve in Oracle Database 23ai, with Kafka Java APIs, Oracle REST Data Services (ORDS) integration, and many more features and integrations.</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://oracle.github.io/microservices-datadriven/transactional-event-queues/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting Started</title>
      <link>https://oracle.github.io/microservices-datadriven/transactional-event-queues/getting-started/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/transactional-event-queues/getting-started/index.html</guid>
      <description>Oracle Database Transactional Event Queues (TxEventQ) is a high-performance messaging platform built into Oracle Database, designed for application workflows, microservices, and event-driven architectures. This guide will provide you with a thorough understanding of Oracle Database Transactional Event Queues, enabling you to leverage its powerful features for building robust, scalable, and event-driven applications.&#xA;This module will cover the following key topics:&#xA;Core Concepts Queues and topics Enqueue/Dequeue vs. Publish/Subscribe models Payload types: RAW, ADT, JSON, and JMS Queue Management Necessary grants, roles, and permissions for using queues Creating, starting, stopping, and dropping queues/topics in various languages SQLcl examples for queue operations Message Operations Producing and consuming messages Message expiry and exception queues Message Delay Message Priority Advanced Features Transactional messaging: Combining messaging and DML in a single transaction Message propagation between queues and databases Exception queues and error handling</description>
    </item>
    <item>
      <title>Kafka APIs</title>
      <link>https://oracle.github.io/microservices-datadriven/transactional-event-queues/kafka/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/transactional-event-queues/kafka/index.html</guid>
      <description>Oracle Database Transactional Event Queues (TxEventQ) offers comprehensive integration with Apache Kafka, providing developers with a powerful and flexible messaging platform. This module explores the synergy between TxEventQ and Kafka, covering essential concepts and practical implementations. In this module, we’ll refer to queues as topics when working with TxEventQ and Kafka.&#xA;Throughout this module, we’ll explore practical examples using Java code and SQLcl commands to demonstrate:&#xA;Creating and managing topics using Kafka APIs with TxEventQ Producing and consuming messages using Kafka client libraries Implementing transactional messaging with database operations Utilizing Kafka REST APIs for TxEventQ message handling Configuring and using Kafka connectors for TxEventQ By the end of this module, you’ll have a comprehensive understanding of how to leverage Oracle TxEventQ’s Kafka compatibility features to build robust, scalable, and event-driven applications.</description>
    </item>
    <item>
      <title>Spring Boot Integration</title>
      <link>https://oracle.github.io/microservices-datadriven/transactional-event-queues/spring-boot/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/transactional-event-queues/spring-boot/index.html</guid>
      <description>Oracle Transactional Event Queues (TxEventQ) features several Spring Boot integrations, allowing application developers to work with TxEventQ using common Spring idioms and starters. This module explores the various integration points and best practices for leveraging TxEventQ within the Spring ecosystem.&#xA;Spring Boot Starter for AQ/JMS The Oracle Spring Boot Starter for AQ/JMS simplifies TxEventQ integration with Spring and JMS. Key features include:&#xA;Automatic configuration of JMS ConnectionFactory Support for transactional message processing Easy setup with Maven or Gradle dependencies Spring Boot Starter for Kafka Java Client for Oracle Database Transactional Event Queues The Kafka Java Client for Oracle Database Transactional Event Queues Spring Boot Starter pulls in all necessary dependencies to work with Transactional Event Queues Kafka Java API using Spring Boot.</description>
    </item>
    <item>
      <title>Performance and Observability</title>
      <link>https://oracle.github.io/microservices-datadriven/transactional-event-queues/observability/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/transactional-event-queues/observability/index.html</guid>
      <description>Oracle TxEventQ offers powerful performance tuning and monitoring capabilities. This module explores advanced techniques for optimizing queue performance and enhancing observability.&#xA;TxEventQ Administrative Views TxEventQ provides administrative views for monitoring performance, including insights to message cache statistics, partition level metrics, and subscriber load. This module will dive into accessing and understanding these database views and their content.&#xA;Oracle Database Metrics Exporter The Oracle Database Metrics Exporter can be configured to export metrics about TxEventQ, providing access to the real-time broker, producer, and consumer metrics in a Grafana dashboard that allows teams to receiving alerts for issues and understand the state of their system.</description>
    </item>
    <item>
      <title>Migrating From AQ</title>
      <link>https://oracle.github.io/microservices-datadriven/transactional-event-queues/aq-migration/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/transactional-event-queues/aq-migration/index.html</guid>
      <description>Oracle Database 23ai includes a migration path from Advanced Queuing (AQ) to Transactional Event Queues (TxEventQ), to take advantage of enhanced performance and scalability for event-driven architectures.&#xA;The DBMS_AQMIGTOOL package facilitates a smooth migration process, designed to be non-disruptive and allowing the parallel operation of AQ and TxEventQ during the transition, enabling a smooth cut-over with minimal downtime for your applications.&#xA;The migration from AQ to TxEventQ is suitable for various scenarios:</description>
    </item>
  </channel>
</rss>