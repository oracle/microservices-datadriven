<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Getting Started :: Transactional Event Queues</title>
    <link>https://oracle.github.io/microservices-datadriven/transactional-event-queues/getting-started/index.html</link>
    <description>Oracle Database Transactional Event Queues (TxEventQ) is a high-performance messaging platform built into Oracle Database, designed for application workflows, microservices, and event-driven architectures. This guide will provide you with a thorough understanding of Oracle Database Transactional Event Queues, enabling you to leverage its powerful features for building robust, scalable, and event-driven applications.&#xA;This module will cover the following key topics:&#xA;Core Concepts Queues and topics Enqueue/Dequeue vs. Publish/Subscribe models Payload types: RAW, Abstract Data Type (ADT), JSON, and JMS Queue Management Necessary grants, roles, and permissions for using queues Creating, starting, stopping, and dropping queues/topics in various languages SQL examples for queue operations Message Operations Producing and consuming messages Message expiration and exception queues Message Delay Message Priority Transactional messaging: Combining messaging and DML in a single transaction Advanced Features Message propagation between queues and databases Exception queues and error handling</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://oracle.github.io/microservices-datadriven/transactional-event-queues/getting-started/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Core Concepts</title>
      <link>https://oracle.github.io/microservices-datadriven/transactional-event-queues/getting-started/core-concepts/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/transactional-event-queues/getting-started/core-concepts/index.html</guid>
      <description>This section provides the basic concepts of Transactional Event Queues, including the difference between queues and topics, how to create queues using SQL, and the available message payload types.&#xA;What are queues and topics? Message Payload Types DBMS_AQADM.JMS_TYPE Raw JSON Object Kafka Message Payloads What are queues and topics? Queues and topics provide high-throughput, asynchronous application communication, with a few key differences that are relevant for developers and architects.&#xA;When using queues, messages follow a send/receive model that allows exactly one consumer. Once the message is consumed, it is discarded after a configurable interval. In contrast, topics may have multiple consumers for each message, and the message is persisted for as long as specified.</description>
    </item>
    <item>
      <title>Queue Management</title>
      <link>https://oracle.github.io/microservices-datadriven/transactional-event-queues/getting-started/queue-management/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/transactional-event-queues/getting-started/queue-management/index.html</guid>
      <description>This section covers the management of Transactional Event Queues, including the grants and roles required to use queues, steps to create, start, and stop queues across different programming languages and APIs.&#xA;Database Permissions for Transactional Event Queues Permissions for SQL Packages Permissions for Users of Kafka APIs Creating, Starting, and Stopping Queues DBMS_AQADM SQL Package Kafka APIs Java with JMS Python .NET JavaScript Oracle REST Data Services Database Permissions for Transactional Event Queues Permissions for SQL Packages For management of queues using Transactional Event Queue APIs in SQL or other languages, the following permissions are recommended for users managing queues:</description>
    </item>
    <item>
      <title>Message Operations</title>
      <link>https://oracle.github.io/microservices-datadriven/transactional-event-queues/getting-started/message-operations/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/transactional-event-queues/getting-started/message-operations/index.html</guid>
      <description>This section explains message operations using queues, topics, and different programming interfaces (SQL, Java, Spring JMS, and more). Youâ€™ll learn how to enqueue, dequeue, and manage messages effectively.&#xA;Enqueue and Dequeue, or Produce and Consume Queues Topics Enqueuing and Dequeuing with SQL Kafka Producers and Consumers Kafka Producer Kafka Consumer Enqueuing and Dequeuing with JMS JMS APIs Message Operations in Other Languages and APIs Message Expiry and Exception Queues Message Delay Message Priority Transactional Messaging: Combine Messaging with Database Queries Enqueue and Dequeue, or Produce and Consume Queues When working with queues, the preferred terms for adding and retrieving messages from Transactional Event Queues are enqueue and dequeue.</description>
    </item>
    <item>
      <title>Advanced Features</title>
      <link>https://oracle.github.io/microservices-datadriven/transactional-event-queues/getting-started/advanced-features/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/transactional-event-queues/getting-started/advanced-features/index.html</guid>
      <description>This section explains advanced features of Transactional Event Queues, including message propagation between queues and the database, and error handling.&#xA;Message Propagation Queue to Queue Message Propagation Stopping Queue Propagation Using Database Links Error Handling Message Propagation Messages can be propagated within the same database or across a database link to different queues or topics. Message propagation is useful for workflows that require processing by different consumers or for event-driven actions that need to trigger subsequent processes.</description>
    </item>
  </channel>
</rss>