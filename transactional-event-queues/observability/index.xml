<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Performance and Observability :: Transactional Event Queues</title>
    <link>https://oracle.github.io/microservices-datadriven/transactional-event-queues/observability/index.html</link>
    <description>Oracle TxEventQ offers powerful performance tuning and monitoring capabilities. This module explores advanced techniques for optimizing queue performance and enhancing observability.&#xA;TxEventQ Administrative Views TxEventQ provides administrative views for monitoring performance, including insights to message cache statistics, partition level metrics, and subscriber load. This module will dive into accessing and understanding these database views and their content.&#xA;Oracle Database Metrics Exporter The Oracle Database Metrics Exporter can be configured to export metrics about TxEventQ, providing access to the real-time broker, producer, and consumer metrics in a Grafana dashboard that allows teams to receiving alerts for issues and understand the state of their system.</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://oracle.github.io/microservices-datadriven/transactional-event-queues/observability/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TxEventQ Administrative Views</title>
      <link>https://oracle.github.io/microservices-datadriven/transactional-event-queues/observability/views/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/transactional-event-queues/observability/views/index.html</guid>
      <description>Oracle Database provides administrative views for collecting metrics on TxEventQ topics and queues. In this section, youâ€™ll learn about each view and its use by database administrators for queue performance monitoring.&#xA;TxEventQ Views Find the list of TxEventQ administrative views and their column definitions in the Oracle Database TxEventQ documentation. Views may be joined and grouped across queries to compose custom metrics and insights about queues and subscribers.&#xA;V$EQ_CACHED_PARTITIONS Provides information about cached event stream partitions. Queries may group on identifiers like QUEUE id or EVENT_STREAM_ID.</description>
    </item>
    <item>
      <title>Database Monitoring Exporter</title>
      <link>https://oracle.github.io/microservices-datadriven/transactional-event-queues/observability/exporter/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/transactional-event-queues/observability/exporter/index.html</guid>
      <description>The Oracle Database Metrics Exporter is a standalone application that provides observability to Oracle Database instances and is designed to run on-premises or in the cloud. This section covers configuring the database exporter for Oracle Database Transactional Event Queues.&#xA;To get started with the database exporter, see the installation section.&#xA;Exporting TxEventQ Metrics Sample Grafana Dashboard Exporting TxEventQ Metrics The database exporter supports custom metric definitions in the form of TOML files. The TxEventQ custom metrics file contains metrics definitions for queue information like total number of queues, enqueued messages, dequeued messages, and more. You can include the TxEventQ metrics in the database exporter by using the custom.metrics program argument and passing the file location:</description>
    </item>
    <item>
      <title>Performance Tuning</title>
      <link>https://oracle.github.io/microservices-datadriven/transactional-event-queues/observability/tuning/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://oracle.github.io/microservices-datadriven/transactional-event-queues/observability/tuning/index.html</guid>
      <description>Performance tuning is critical for ensuring the efficiency, reliability, and responsiveness of TxEventQ event processing. As systems scale and the volume of events increases, poor optimizations can lead to latency, bottlenecks, or even system failures. By applying the techniques described in this section, TxEventQ administrators can significantly enhance throughput, reduce latency, and improve the stability of event driven applications.&#xA;Partitioning/Sharding and Multiple Consumers Creating a Partitioned Kafka Topic Message Cache Tuning System Parameters DB_BLOCK_SIZE JAVA_POOL_SIZE OPEN_CURSORS PGA_AGGREGATE_TARGET PROCESSES SESSIONS SGA_TARGET STREAMS_POOL_SIZE Partitioning/Sharding and Multiple Consumers Oracle Database automatically manages the partitions (also known as shards) of a queue, which corresponds to a table partition. When messages are enqueued, each message is routed to a specific partition of the queue. Messages within a partition maintain a strict, session-level ordering.</description>
    </item>
  </channel>
</rss>